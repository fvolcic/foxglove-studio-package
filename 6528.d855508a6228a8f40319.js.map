{"version":3,"file":"6528.d855508a6228a8f40319.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/util/RpcWorkerUtils.ts","webpack:///../../packages/studio-base/src/components/Chart/worker/ChartJSManager.ts","webpack:///../../packages/studio-base/src/components/Chart/worker/ChartJsMux.ts","webpack:///../../packages/studio-base/src/components/Chart/index.tsx","webpack:///../../packages/studio-base/src/components/MessagePathSyntax/filterMatches.ts","webpack:///../../packages/studio-base/src/hooks/useChangeDetector.ts","webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useCachedGetMessagePathDataItems.ts","webpack:///../../packages/studio-base/src/util/RpcMainThreadUtils.ts","webpack:///../../packages/studio-base/src/util/WebWorkerManager.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport {\n  setNotificationHandler,\n  DetailsType,\n  NotificationType,\n  NotificationSeverity,\n} from \"@foxglove/studio-base/util/sendNotification\";\n\nimport Rpc from \"./Rpc\";\nimport overwriteFetch from \"./overwriteFetch\";\n\nexport function setupSendReportNotificationHandler(rpc: Rpc): void {\n  setNotificationHandler(\n    (\n      message: string,\n      details: DetailsType,\n      type: NotificationType,\n      severity: NotificationSeverity,\n    ) => {\n      if (!(details instanceof Error || typeof details === \"string\")) {\n        console.warn(\"Invalid Error type\", details);\n      }\n      void rpc.send(\"sendNotification\", {\n        message,\n        details: details instanceof Error ? details.toString() : details,\n        type,\n        severity,\n      });\n    },\n  );\n}\n\nexport function setupWorker(rpc: Rpc): void {\n  if (process.env.NODE_ENV !== \"test\") {\n    setupSendReportNotificationHandler(rpc);\n    overwriteFetch();\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Chart, ChartData, ChartOptions, ChartType } from \"chart.js\";\nimport type { Context as DatalabelContext } from \"chartjs-plugin-datalabels\";\nimport DatalabelPlugin from \"chartjs-plugin-datalabels\";\nimport { type Options as DatalabelsPluginOptions } from \"chartjs-plugin-datalabels/types/options\";\nimport EventEmitter from \"eventemitter3\";\n\nimport { Zoom as ZoomPlugin } from \"@foxglove/chartjs-plugin-zoom\";\nimport Logger from \"@foxglove/log\";\nimport { RpcElement, RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\nimport { maybeCast } from \"@foxglove/studio-base/util/maybeCast\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nconst log = Logger.getLogger(__filename);\n\nexport type InitOpts = {\n  id: string;\n  node: { canvas: HTMLCanvasElement };\n  type: ChartType;\n  data: ChartData<\"scatter\">;\n  options: ChartOptions;\n  devicePixelRatio: number;\n  fontLoaded: Promise<FontFace>;\n};\n\n// allows us to override the chart.ctx instance field which zoom plugin uses for adding event listeners\ntype MutableContext<T> = Omit<Chart, \"ctx\"> & { ctx: T };\n\nfunction addEventListener(emitter: EventEmitter) {\n  return (eventName: string, fn?: () => void) => {\n    const existing = emitter.listeners(eventName);\n    if (!fn || existing.includes(fn)) {\n      return;\n    }\n\n    emitter.on(eventName, fn);\n  };\n}\n\nfunction removeEventListener(emitter: EventEmitter) {\n  return (eventName: string, fn?: () => void) => {\n    if (fn) {\n      emitter.off(eventName, fn);\n    }\n  };\n}\n\ntype ZoomableChart = Chart & {\n  $zoom: {\n    panStartHandler(event: HammerInput): void;\n    panHandler(event: HammerInput): void;\n    panEndHandler(event: HammerInput): void;\n  };\n};\n\nexport default class ChartJSManager {\n  private _chartInstance?: Chart;\n  private _fakeNodeEvents = new EventEmitter();\n  private _fakeDocumentEvents = new EventEmitter();\n  private _lastDatalabelClickContext?: DatalabelContext;\n\n  public constructor(initOpts: InitOpts) {\n    log.info(`new ChartJSManager(id=${initOpts.id})`);\n    void this.init(initOpts);\n  }\n\n  public async init({\n    id,\n    node,\n    type,\n    data,\n    options,\n    devicePixelRatio,\n    fontLoaded,\n  }: InitOpts): Promise<void> {\n    const font = await fontLoaded;\n    log.debug(`ChartJSManager(${id}) init, default font \"${font.family}\" status=${font.status}`);\n\n    const fakeNode = {\n      addEventListener: addEventListener(this._fakeNodeEvents),\n      removeEventListener: removeEventListener(this._fakeNodeEvents),\n      ownerDocument: {\n        addEventListener: addEventListener(this._fakeDocumentEvents),\n        removeEventListener: removeEventListener(this._fakeDocumentEvents),\n      },\n    };\n\n    const origZoomStart = ZoomPlugin.start?.bind(ZoomPlugin);\n    ZoomPlugin.start = (chartInstance: MutableContext<unknown>, args, pluginOptions) => {\n      // swap the canvas with our fake dom node canvas to support zoom plugin addEventListener\n      const ctx = chartInstance.ctx;\n      chartInstance.ctx = {\n        canvas: fakeNode,\n      };\n      const res = origZoomStart?.(chartInstance as Chart, args, pluginOptions);\n      chartInstance.ctx = ctx;\n      return res;\n    };\n\n    const fullOptions: ChartOptions = {\n      ...this.addFunctionsToConfig(options),\n      devicePixelRatio,\n      font: { family: fonts.MONOSPACE },\n      // we force responsive off since we manually trigger width/height updates on the chart\n      // responsive mode does not work properly with offscreen canvases and retina device pixel ratios\n      // it results in a run-away canvas that keeps doubling in size!\n      responsive: false,\n    };\n\n    const chartInstance = new Chart(node, {\n      type,\n      data,\n      options: fullOptions,\n      plugins: [DatalabelPlugin, ZoomPlugin],\n    });\n\n    ZoomPlugin.start = origZoomStart;\n    this._chartInstance = chartInstance;\n  }\n\n  public wheel(event: WheelEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this._fakeNodeEvents.emit(\"wheel\", event);\n    return this.getScales();\n  }\n\n  public mousedown(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this._fakeNodeEvents.emit(\"mousedown\", event);\n    return this.getScales();\n  }\n\n  public mousemove(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this._fakeNodeEvents.emit(\"mousemove\", event);\n    return this.getScales();\n  }\n\n  public mouseup(event: MouseEvent): RpcScales {\n    const target = event.target as Element & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    this._fakeDocumentEvents.emit(\"mouseup\", event);\n    return this.getScales();\n  }\n\n  public panstart(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this._chartInstance)?.$zoom.panStartHandler(event);\n    return this.getScales();\n  }\n\n  public panmove(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this._chartInstance)?.$zoom.panHandler(event);\n    return this.getScales();\n  }\n\n  public panend(event: HammerInput): RpcScales {\n    const target = event.target as HTMLElement & { boundingClientRect: DOMRect };\n    target.getBoundingClientRect = () => target.boundingClientRect;\n    maybeCast<ZoomableChart>(this._chartInstance)?.$zoom.panEndHandler(event);\n    return this.getScales();\n  }\n\n  public update({\n    options,\n    width,\n    height,\n    isBoundsReset,\n    data,\n  }: {\n    options?: ChartOptions;\n    width?: number;\n    height?: number;\n    isBoundsReset: boolean;\n    data?: ChartData<\"scatter\">;\n  }): RpcScales {\n    const instance = this._chartInstance;\n    if (instance == undefined) {\n      return {};\n    }\n\n    if (options != undefined) {\n      instance.options.plugins = this.addFunctionsToConfig(options).plugins;\n\n      // Let the chart manage its own scales unless we've been told to reset or if an explicit\n      // min and max have been specified.\n      const scales = options.scales ?? {};\n      if (\n        (isBoundsReset || (scales.x?.min != undefined && scales.x.max != undefined)) &&\n        instance.options.scales\n      ) {\n        instance.options.scales.x = scales.x;\n      }\n      if (\n        (isBoundsReset || (scales.y?.min != undefined && scales.y.max != undefined)) &&\n        instance.options.scales\n      ) {\n        instance.options.scales.y = scales.y;\n      }\n    }\n\n    if (width != undefined || height != undefined) {\n      let shouldResize = false;\n      const wholeWidth = Math.floor(width ?? instance.width);\n      const wholeHeight = Math.floor(height ?? instance.height);\n\n      // Internally chartjs rounds width and height before updating the instance.\n      // If our update has decimal width and height that will cause a resize on every update.\n      // To avoid this we truncate the decimal from the width and height to present chartjs with whole\n      // numbers.\n      if (width != undefined) {\n        if (Math.abs(instance.width - wholeWidth) > Number.EPSILON) {\n          instance.canvas.width = wholeWidth;\n          shouldResize = true;\n        }\n      }\n\n      if (height != undefined) {\n        if (Math.abs(instance.height - wholeHeight) > Number.EPSILON) {\n          instance.canvas.height = wholeHeight;\n          shouldResize = true;\n        }\n      }\n\n      if (shouldResize) {\n        instance.resize(wholeWidth, wholeHeight);\n      }\n    }\n\n    if (data != undefined) {\n      instance.data = data;\n    }\n\n    // While the chartjs API doesn't indicate update should be called after resize, in practice\n    // we've found that performing a resize after an update sometimes results in a blank chart.\n    //\n    // NOTE: \"none\" disables animations - this is important for chart performance because we update\n    // the entire data set which does not preserve history for the chart animations\n    instance.update(\"none\");\n\n    return this.getScales();\n  }\n\n  public destroy(): void {\n    this._chartInstance?.destroy();\n  }\n\n  public getElementsAtEvent({ event }: { event: MouseEvent }): RpcElement[] {\n    const ev = {\n      native: true,\n      x: event.clientX,\n      y: event.clientY,\n    };\n\n    // ev is cast to any because the typings for getElementsAtEventForMode are wrong\n    // ev is specified as a dom Event - but the implementation does not require it for the basic platform\n    const elements =\n      this._chartInstance?.getElementsAtEventForMode(\n        ev as unknown as Event,\n        this._chartInstance.options.interaction?.mode ?? \"intersect\",\n        this._chartInstance.options.interaction ?? {},\n        false,\n      ) ?? [];\n\n    const out = new Array<RpcElement>();\n\n    for (const element of elements) {\n      const data = (this._chartInstance?.data as ChartData<\"scatter\"> | undefined)?.datasets[\n        element.datasetIndex\n      ]?.data[element.index];\n      if (data == undefined || typeof data === \"number\") {\n        continue;\n      }\n\n      // turn into an object we can send over the rpc\n      out.push({\n        data,\n        datasetIndex: element.datasetIndex,\n        view: {\n          x: element.element.x,\n          y: element.element.y,\n        },\n      });\n    }\n\n    // sort elements by proximity to the cursor\n    out.sort((itemA, itemB) => {\n      const dxA = event.clientX - itemA.view.x;\n      const dyA = event.clientY - itemA.view.y;\n      const dxB = event.clientX - itemB.view.x;\n      const dyB = event.clientY - itemB.view.y;\n      const distSquaredA = dxA * dxA + dyA * dyA;\n      const distSquaredB = dxB * dxB + dyB * dyB;\n\n      return distSquaredA - distSquaredB;\n    });\n\n    return out;\n  }\n\n  public getDatalabelAtEvent({ event }: { event: Event }): unknown {\n    this._chartInstance?.notifyPlugins(\"beforeEvent\", { event });\n\n    // clear the stored click context - we have consumed it\n    const context = this._lastDatalabelClickContext;\n    this._lastDatalabelClickContext = undefined;\n\n    return context?.dataset.data[context.dataIndex];\n  }\n\n  // get the current chart scales in an rpc friendly format\n  // all rpc methods return the current chart scale since that is the main thing that could change automatically\n  public getScales(): RpcScales {\n    const scales: RpcScales = {};\n\n    // fill our rpc scales - we only support x and y scales for now\n    const xScale = this._chartInstance?.scales.x;\n    if (xScale) {\n      scales.x = {\n        pixelMin: xScale.left,\n        pixelMax: xScale.right,\n        min: xScale.min,\n        max: xScale.max,\n      };\n    }\n\n    const yScale = this._chartInstance?.scales.y;\n    if (yScale) {\n      scales.y = {\n        pixelMin: yScale.bottom,\n        pixelMax: yScale.top,\n        min: yScale.min,\n        max: yScale.max,\n      };\n    }\n\n    return scales;\n  }\n\n  // We cannot serialize functions over rpc, we add options that require functions here\n  private addFunctionsToConfig(config: ChartOptions): typeof config {\n    const datalabelsOptions = config.plugins?.datalabels as DatalabelsPluginOptions | undefined;\n    if (datalabelsOptions) {\n      // process _click_ events to get the label we clicked on\n      // this is because datalabels does not export any public methods to lookup the clicked label\n      // maybe we contribute a patch upstream with the explanation for web-worker use\n      datalabelsOptions.listeners = {\n        click: (context: DatalabelContext) => {\n          this._lastDatalabelClickContext = context;\n        },\n      };\n\n      // Only display labels for datapoints that include a \"label\" property\n      datalabelsOptions.formatter = (value: { label?: string }, _context: unknown) => {\n        // Return \"null\" if we don't want this label to be displayed.\n        // Returning \"undefined\" falls back to the default formatting and will display\n        // eslint-disable-next-line no-restricted-syntax\n        return value.label ?? null;\n      };\n\n      // Override color so that it can be set per-dataset.\n      const staticColor = datalabelsOptions.color ?? \"white\";\n      datalabelsOptions.color = (context: DatalabelContext) => {\n        const value = context.dataset.data[context.dataIndex];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (value as any)?.labelColor ?? staticColor;\n      };\n    }\n\n    return config;\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport {\n  CategoryScale,\n  Chart,\n  ChartData,\n  ChartOptions,\n  Filler,\n  Legend,\n  LinearScale,\n  LineController,\n  LineElement,\n  PointElement,\n  ScatterController,\n  Ticks,\n  TimeScale,\n  TimeSeriesScale,\n  Title,\n  Tooltip,\n} from \"chart.js\";\nimport AnnotationPlugin from \"chartjs-plugin-annotation\";\n\nimport PlexMono from \"@foxglove/studio-base/styles/assets/PlexMono.woff2\";\nimport Rpc from \"@foxglove/studio-base/util/Rpc\";\nimport { setupWorker } from \"@foxglove/studio-base/util/RpcWorkerUtils\";\n\nimport ChartJSManager, { InitOpts } from \"./ChartJSManager\";\n\ntype RpcEvent<EventType> = { id: string; event: EventType };\n\nexport type ChartUpdateMessage = {\n  data?: ChartData<\"scatter\">;\n  height?: number;\n  options?: ChartOptions;\n  isBoundsReset: boolean;\n  width?: number;\n};\n\ntype RpcUpdateEvent = {\n  id: string;\n} & ChartUpdateMessage;\n\n// Explicitly load the \"Plex Mono\" font, since custom fonts from the main renderer are not inherited\n// by web workers. This is required to draw \"Plex Mono\" on an OffscreenCanvas, and it also appears\n// to fix a crash a large portion of Windows users were seeing where the rendering thread would\n// crash in skia code related to DirectWrite font loading when the system display scaling is set\n// >100%. For more info on this crash, see util/waitForFonts.ts.\nasync function loadDefaultFont(): Promise<FontFace> {\n  const fontFace = new FontFace(\"IBM Plex Mono\", `url(${PlexMono}) format('woff2')`);\n  if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n    (self as unknown as WorkerGlobalScope).fonts.add(fontFace);\n  } else {\n    document.fonts.add(fontFace);\n  }\n  return await fontFace.load();\n}\n\n// Immediately start font loading in the Worker thread. Each ChartJSManager we instantiate will\n// wait on this promise before instantiating a new Chart instance, which kicks off rendering\nconst fontLoaded = loadDefaultFont();\n\n// Register the features we support globally on our chartjs instance\n// Note: Annotation plugin must be registered, it does not work _inline_ (i.e. per instance)\nChart.register(\n  LineElement,\n  PointElement,\n  LineController,\n  ScatterController,\n  CategoryScale,\n  LinearScale,\n  TimeScale,\n  TimeSeriesScale,\n  Filler,\n  Legend,\n  Title,\n  Tooltip,\n  AnnotationPlugin,\n);\n\nconst fixedNumberFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n/**\n * Adjust the `ticks` of the chart options to ensure the first/last x labels remain a constant\n * width. See https://github.com/foxglove/studio/issues/2926\n *\n * Because this requires passing a `callback` function for the tick options, this has to be done in\n * the worker, since functions can't be sent via postMessage.\n */\nfunction fixTicks(args: RpcUpdateEvent): RpcUpdateEvent {\n  const xScale = args.options?.scales?.x;\n\n  if (xScale?.ticks) {\n    xScale.ticks.callback = function (value, index, ticks) {\n      // use a fixed formatter for the first/last ticks\n      if (index === 0 || index === ticks.length - 1) {\n        return fixedNumberFormat.format(value as number);\n      }\n      // otherwise use chart.js's default formatter\n      return Ticks.formatters.numeric.apply(this, [value as number, index, ticks]);\n    };\n  }\n  return args;\n}\n\n// Since we use a capped number of web-workers, a single web-worker may be running multiple chartjs instances\n// The ChartJsWorkerMux forwards an rpc request for a specific chartjs instance id to the appropriate instance\nexport default class ChartJsMux {\n  private readonly _rpc: Rpc;\n  private readonly _managers = new Map<string, ChartJSManager>();\n\n  public constructor(rpc: Rpc) {\n    this._rpc = rpc;\n\n    if (typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope) {\n      setupWorker(this._rpc);\n    }\n\n    // create a new chartjs instance\n    // this must be done before sending any other rpc requests to the instance\n    rpc.receive(\"initialize\", (args: InitOpts) => {\n      args.fontLoaded = fontLoaded;\n      const manager = new ChartJSManager(args);\n      this._managers.set(args.id, manager);\n      return manager.getScales();\n    });\n    rpc.receive(\"wheel\", (args: RpcEvent<WheelEvent>) => this._getChart(args.id).wheel(args.event));\n    rpc.receive(\"mousedown\", (args: RpcEvent<MouseEvent>) =>\n      this._getChart(args.id).mousedown(args.event),\n    );\n    rpc.receive(\"mousemove\", (args: RpcEvent<MouseEvent>) =>\n      this._getChart(args.id).mousemove(args.event),\n    );\n    rpc.receive(\"mouseup\", (args: RpcEvent<MouseEvent>) =>\n      this._getChart(args.id).mouseup(args.event),\n    );\n    rpc.receive(\"panstart\", (args: RpcEvent<HammerInput>) =>\n      this._getChart(args.id).panstart(args.event),\n    );\n    rpc.receive(\"panend\", (args: RpcEvent<HammerInput>) =>\n      this._getChart(args.id).panend(args.event),\n    );\n    rpc.receive(\"panmove\", (args: RpcEvent<HammerInput>) =>\n      this._getChart(args.id).panmove(args.event),\n    );\n\n    rpc.receive(\"update\", (args: RpcUpdateEvent) => this._getChart(args.id).update(fixTicks(args)));\n    rpc.receive(\"destroy\", (args: RpcEvent<void>) => {\n      const manager = this._managers.get(args.id);\n      if (manager) {\n        manager.destroy();\n        this._managers.delete(args.id);\n      }\n    });\n    rpc.receive(\"getElementsAtEvent\", (args: RpcEvent<MouseEvent>) =>\n      this._getChart(args.id).getElementsAtEvent(args),\n    );\n    rpc.receive(\"getDatalabelAtEvent\", (args: RpcEvent<Event>) =>\n      this._getChart(args.id).getDatalabelAtEvent(args),\n    );\n  }\n\n  private _getChart(id: string): ChartJSManager {\n    const chart = this._managers.get(id);\n    if (!chart) {\n      throw new Error(`Could not find chart with id ${id}`);\n    }\n    return chart;\n  }\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\n// These modules declaration merge into chart.js declarations for plugins\n// Since we don't use the modules directly in this file, we need to load the types as references\n// so typescript will have the merged declarations.\n/// <reference types=\"chartjs-plugin-datalabels\" />\n/// <reference types=\"@foxglove/chartjs-plugin-zoom\" />\n\nimport { ChartData as ChartJsChartData, ChartOptions, ScatterDataPoint } from \"chart.js\";\nimport Hammer from \"hammerjs\";\nimport { useCallback, useLayoutEffect, useRef, useState } from \"react\";\nimport { useAsync, useMountedState } from \"react-use\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { type ZoomPluginOptions } from \"@foxglove/chartjs-plugin-zoom/types/options\";\nimport Logger from \"@foxglove/log\";\nimport { RpcElement, RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\nimport ChartJsMux, {\n  ChartUpdateMessage,\n} from \"@foxglove/studio-base/components/Chart/worker/ChartJsMux\";\nimport Rpc, { createLinkedChannels } from \"@foxglove/studio-base/util/Rpc\";\nimport WebWorkerManager from \"@foxglove/studio-base/util/WebWorkerManager\";\nimport { mightActuallyBePartial } from \"@foxglove/studio-base/util/mightActuallyBePartial\";\n\nconst log = Logger.getLogger(__filename);\n\nfunction makeChartJSWorker() {\n  // foxglove-depcheck-used: babel-plugin-transform-import-meta\n  return new Worker(new URL(\"./worker/main\", import.meta.url));\n}\n\nexport type OnClickArg = {\n  datalabel?: unknown;\n  // x-value in scale\n  x: number | undefined;\n  // y-value in scale\n  y: number | undefined;\n};\n\n// Chartjs typings use _null_ to indicate _gaps_ in the dataset\n// eslint-disable-next-line no-restricted-syntax\nconst ChartNull = null;\nexport type ChartData = ChartJsChartData<\"scatter\", (ScatterDataPoint | typeof ChartNull)[]>;\n\ntype Props = {\n  data: ChartData;\n  options: ChartOptions;\n  isBoundsReset: boolean;\n  type: \"scatter\";\n  height: number;\n  width: number;\n  onClick?: (params: OnClickArg) => void;\n\n  // called when the chart scales have updated (happens for zoom/pan/reset)\n  onScalesUpdate?: (scales: RpcScales, opt: { userInteraction: boolean }) => void;\n\n  // called when the chart is about to start rendering new data\n  onStartRender?: () => void;\n\n  // called when the chart has finished updating with new data\n  onFinishRender?: () => void;\n\n  // called when a user hovers over an element\n  // uses the chart.options.hover configuration\n  onHover?: (elements: RpcElement[]) => void;\n};\n\nconst devicePixelRatio = mightActuallyBePartial(window).devicePixelRatio ?? 1;\n\nconst webWorkerManager = new WebWorkerManager(makeChartJSWorker, 4);\n\n// turn a React.MouseEvent into an object we can send over rpc\nfunction rpcMouseEvent(event: React.MouseEvent<HTMLElement>) {\n  const boundingRect = event.currentTarget.getBoundingClientRect();\n\n  return {\n    cancelable: false,\n    clientX: event.clientX - boundingRect.left,\n    clientY: event.clientY - boundingRect.top,\n    target: {\n      boundingClientRect: boundingRect.toJSON(),\n    },\n  };\n}\n\ntype RpcSend = <T>(\n  topic: string,\n  payload?: Record<string, unknown>,\n  transferables?: (Transferable | OffscreenCanvas)[],\n) => Promise<T>;\n\n// Chart component renders data using workers with chartjs offscreen canvas\n\nconst supportsOffscreenCanvas =\n  typeof HTMLCanvasElement.prototype.transferControlToOffscreen === \"function\";\n\nfunction Chart(props: Props): JSX.Element {\n  const [id] = useState(() => uuidv4());\n\n  const initialized = useRef(false);\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const containerRef = useRef<HTMLDivElement>(ReactNull);\n  const isMounted = useMountedState();\n\n  // to avoid changing useCallback deps for callbacks which access the scale value\n  // at the time they are invoked\n  const currentScalesRef = useRef<RpcScales | undefined>();\n\n  const zoomEnabled =\n    (props.options.plugins?.zoom as ZoomPluginOptions | undefined)?.zoom?.enabled ?? false;\n  const panEnabled =\n    (props.options.plugins?.zoom as ZoomPluginOptions | undefined)?.pan?.enabled ?? false;\n\n  const { type, data, isBoundsReset, options, width, height, onStartRender, onFinishRender } =\n    props;\n\n  const sendWrapperRef = useRef<RpcSend | undefined>();\n  const rpcSendRef = useRef<RpcSend | undefined>();\n\n  const hasPannedSinceMouseDown = useRef(false);\n  const previousUpdateMessage = useRef<Record<string, unknown>>({});\n\n  useLayoutEffect(() => {\n    log.info(`Register Chart ${id}`);\n    let rpc: Rpc;\n    if (supportsOffscreenCanvas) {\n      rpc = webWorkerManager.registerWorkerListener(id);\n    } else {\n      const { local, remote } = createLinkedChannels();\n      new ChartJsMux(new Rpc(remote));\n      rpc = new Rpc(local);\n    }\n\n    // helper function to send rpc to our worker - all invocations need an _id_ so we inject it here\n    const sendWrapper = async <T,>(\n      topic: string,\n      payload?: Record<string, unknown>,\n      transferables?: (Transferable | OffscreenCanvas)[],\n    ) => {\n      return await rpc.send<T>(topic, { id, ...payload }, transferables);\n    };\n\n    // store the send wrapper so it can be set to rpcSendRef once initialization occurs\n    sendWrapperRef.current = sendWrapper;\n\n    return () => {\n      log.info(`Unregister chart ${id}`);\n      sendWrapper(\"destroy\").catch(() => {}); // may fail if worker is torn down\n      rpcSendRef.current = undefined;\n      sendWrapperRef.current = undefined;\n      initialized.current = false;\n      previousUpdateMessage.current = {};\n      canvasRef.current?.remove();\n      canvasRef.current = undefined;\n      if (supportsOffscreenCanvas) {\n        webWorkerManager.unregisterWorkerListener(id);\n      }\n    };\n  }, [id]);\n\n  // trigger when scales update\n  const onScalesUpdateRef = useRef(props.onScalesUpdate);\n  onScalesUpdateRef.current = props.onScalesUpdate;\n\n  const maybeUpdateScales = useCallback(\n    (newScales: RpcScales, opt?: { userInteraction: boolean }) => {\n      if (!isMounted()) {\n        return;\n      }\n\n      const oldScales = currentScalesRef.current;\n      currentScalesRef.current = newScales;\n\n      // cheap hack to only update the scales when the values change\n      // avoids triggering handlers that depend on scales\n      const oldStr = JSON.stringify(oldScales);\n      const newStr = JSON.stringify(newScales);\n      if (oldStr !== newStr) {\n        onScalesUpdateRef.current?.(newScales, opt ?? { userInteraction: false });\n      }\n    },\n    [isMounted],\n  );\n\n  // getNewUpdateMessage returns an update message for the changed fields from the last\n  // call to get an update message\n  //\n  // The purpose of this mechanism is to avoid sending data/options/size to the worker\n  // if they are unchanged from a previous initialization or update.\n  const getNewUpdateMessage = useCallback(() => {\n    const prev = previousUpdateMessage.current;\n    const out: Partial<ChartUpdateMessage> = {};\n\n    // NOTE(Roman): I don't know why this happens but when I initialize a chart using some data\n    // and width/height of 0. Even when I later send an update for correct width/height the chart\n    // does not render.\n    //\n    // The workaround here is to avoid sending any initialization or update messages until we have\n    // a width and height that are non-zero\n    if (width === 0 || height === 0) {\n      return undefined;\n    }\n\n    if (prev.data !== data) {\n      prev.data = out.data = data;\n    }\n    if (prev.options !== options) {\n      prev.options = out.options = options;\n    }\n    if (prev.height !== height) {\n      prev.height = out.height = height;\n    }\n    if (prev.width !== width) {\n      prev.width = out.width = width;\n    }\n\n    out.isBoundsReset = isBoundsReset;\n\n    // nothing to update\n    if (Object.keys(out).length === 0) {\n      return;\n    }\n\n    return out;\n  }, [data, height, options, isBoundsReset, width]);\n\n  const { error: updateError } = useAsync(async () => {\n    if (!sendWrapperRef.current) {\n      return;\n    }\n\n    // first time initialization\n    if (!initialized.current) {\n      if (!containerRef.current) {\n        return;\n      }\n\n      const newUpdateMessage = getNewUpdateMessage();\n      if (!newUpdateMessage) {\n        return;\n      }\n\n      if (canvasRef.current) {\n        throw new Error(\"Canvas has already been initialized\");\n      }\n      const canvas = document.createElement(\"canvas\");\n      canvas.style.width = \"100%\";\n      canvas.style.height = \"100%\";\n      canvas.width = newUpdateMessage.width ?? 0;\n      canvas.height = newUpdateMessage.height ?? 0;\n      containerRef.current.appendChild(canvas);\n\n      canvasRef.current = canvas;\n      initialized.current = true;\n\n      onStartRender?.();\n      const offscreenCanvas =\n        typeof canvas.transferControlToOffscreen === \"function\"\n          ? canvas.transferControlToOffscreen()\n          : canvas;\n      const scales = await sendWrapperRef.current<RpcScales>(\n        \"initialize\",\n        {\n          node: offscreenCanvas,\n          type,\n          data: newUpdateMessage.data,\n          options: newUpdateMessage.options,\n          devicePixelRatio,\n          width: newUpdateMessage.width,\n          height: newUpdateMessage.height,\n        },\n        [\n          // If this is actually a HTMLCanvasElement then it will not be transferred because we\n          // don't use a worker\n          offscreenCanvas as OffscreenCanvas,\n        ],\n      );\n\n      // once we are initialized, we can allow other handlers to send to the rpc endpoint\n      rpcSendRef.current = sendWrapperRef.current;\n\n      maybeUpdateScales(scales);\n      onFinishRender?.();\n      return;\n    }\n\n    if (!rpcSendRef.current) {\n      return;\n    }\n\n    const newUpdateMessage = getNewUpdateMessage();\n    if (!newUpdateMessage) {\n      return;\n    }\n\n    onStartRender?.();\n    const scales = await rpcSendRef.current<RpcScales>(\"update\", newUpdateMessage);\n    maybeUpdateScales(scales);\n    onFinishRender?.();\n  }, [getNewUpdateMessage, maybeUpdateScales, onFinishRender, onStartRender, type]);\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    if (!container || !panEnabled) {\n      return;\n    }\n\n    const hammerManager = new Hammer.Manager(container);\n    const threshold = props.options.plugins?.zoom?.pan?.threshold ?? 10;\n    hammerManager.add(new Hammer.Pan({ threshold }));\n\n    hammerManager.on(\"panstart\", async (event) => {\n      hasPannedSinceMouseDown.current = true;\n\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      await rpcSendRef.current<RpcScales>(\"panstart\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          center: {\n            x: event.center.x,\n            y: event.center.y,\n          },\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n    });\n\n    hammerManager.on(\"panmove\", async (event) => {\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"panmove\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    });\n\n    hammerManager.on(\"panend\", async (event) => {\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.target.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"panend\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    });\n\n    return () => {\n      hammerManager.destroy();\n    };\n  }, [maybeUpdateScales, panEnabled, props.options.plugins?.zoom?.pan?.threshold]);\n\n  const onWheel = useCallback(\n    async (event: React.WheelEvent<HTMLElement>) => {\n      if (!zoomEnabled || !rpcSendRef.current) {\n        return;\n      }\n\n      const boundingRect = event.currentTarget.getBoundingClientRect();\n      const scales = await rpcSendRef.current<RpcScales>(\"wheel\", {\n        event: {\n          cancelable: false,\n          deltaY: event.deltaY,\n          deltaX: event.deltaX,\n          clientX: event.clientX,\n          clientY: event.clientY,\n          target: {\n            boundingClientRect: boundingRect.toJSON(),\n          },\n        },\n      });\n      maybeUpdateScales(scales, { userInteraction: true });\n    },\n    [zoomEnabled, maybeUpdateScales],\n  );\n\n  const onMouseDown = useCallback(\n    async (event: React.MouseEvent<HTMLElement>) => {\n      hasPannedSinceMouseDown.current = false;\n\n      if (!rpcSendRef.current) {\n        return;\n      }\n\n      const scales = await rpcSendRef.current<RpcScales>(\"mousedown\", {\n        event: rpcMouseEvent(event),\n      });\n\n      maybeUpdateScales(scales);\n    },\n    [maybeUpdateScales],\n  );\n\n  const onMouseUp = useCallback(async (event: React.MouseEvent<HTMLElement>) => {\n    if (!rpcSendRef.current) {\n      return;\n    }\n\n    return await rpcSendRef.current(\"mouseup\", {\n      event: rpcMouseEvent(event),\n    });\n  }, []);\n\n  // Since hover events are handled via rpc, we might get a response back when we've\n  // already hovered away from the chart. We gate calling onHover by whether the mouse is still\n  // present on the component\n  const mousePresentRef = useRef(false);\n\n  const { onHover } = props;\n  const onMouseMove = useCallback(\n    async (event: React.MouseEvent<HTMLElement>) => {\n      mousePresentRef.current = true; // The mouse must be present if we're getting this event.\n\n      if (onHover == undefined || rpcSendRef.current == undefined) {\n        return;\n      }\n\n      const elements = await rpcSendRef.current<RpcElement[]>(\"getElementsAtEvent\", {\n        event: rpcMouseEvent(event),\n      });\n\n      // Check mouse presence again in case the mouse has left the canvas while we\n      // were waiting for the RPC call.\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (isMounted() && mousePresentRef.current) {\n        onHover(elements);\n      }\n    },\n    [onHover, isMounted],\n  );\n\n  const onMouseEnter = useCallback(() => {\n    mousePresentRef.current = true;\n  }, []);\n\n  const onMouseLeave = useCallback(() => {\n    mousePresentRef.current = false;\n    onHover?.([]);\n  }, [onHover]);\n\n  const onClick = useCallback(\n    async (event: React.MouseEvent<HTMLElement>): Promise<void> => {\n      if (\n        !props.onClick ||\n        !rpcSendRef.current ||\n        !isMounted() ||\n        hasPannedSinceMouseDown.current // Don't send click event if it was part of a pan gesture.\n      ) {\n        return;\n      }\n\n      const rect = event.currentTarget.getBoundingClientRect();\n      const mouseX = event.clientX - rect.left;\n      const mouseY = event.clientY - rect.top;\n\n      // maybe we should forward the click event and add support for datalabel listeners\n      // the rpc channel doesn't have a way to send rpc back...\n      const datalabel = await rpcSendRef.current(\"getDatalabelAtEvent\", {\n        event: { x: mouseX, y: mouseY, type: \"click\" },\n      });\n\n      let xVal: number | undefined;\n      let yVal: number | undefined;\n\n      const xScale = currentScalesRef.current?.x;\n      if (xScale) {\n        const pixels = xScale.pixelMax - xScale.pixelMin;\n        const range = xScale.max - xScale.min;\n        xVal = (range / pixels) * (mouseX - xScale.pixelMin) + xScale.min;\n      }\n\n      const yScale = currentScalesRef.current?.y;\n      if (yScale) {\n        const pixels = yScale.pixelMax - yScale.pixelMin;\n        const range = yScale.max - yScale.min;\n        yVal = (range / pixels) * (mouseY - yScale.pixelMin) + yScale.min;\n      }\n\n      props.onClick({\n        datalabel,\n        x: xVal,\n        y: yVal,\n      });\n    },\n    [isMounted, props],\n  );\n\n  if (updateError) {\n    throw updateError;\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      onWheel={onWheel}\n      onClick={onClick}\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      onMouseEnter={onMouseEnter}\n      onMouseUp={onMouseUp}\n      style={{ width, height, cursor: \"crosshair\", position: \"relative\" }}\n    />\n  );\n}\n\nexport default Chart;\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessagePathFilter } from \"./constants\";\n\nexport function filterMatches(filter: MessagePathFilter, value: unknown): boolean {\n  if (typeof filter.value === \"object\") {\n    throw new Error(\"filterMatches only works on paths where global variables have been filled in\");\n  }\n  if (filter.value == undefined) {\n    return false;\n  }\n\n  let currentValue = value;\n  for (const name of filter.path) {\n    if (typeof currentValue !== \"object\" || currentValue == undefined) {\n      return false;\n    }\n    currentValue = (currentValue as Record<string, unknown>)[name];\n    if (currentValue == undefined) {\n      return false;\n    }\n  }\n\n  // Test equality using `==` so we can be forgiving for comparing booleans with integers,\n  // comparing numbers with strings, bigints with numbers, and so on.\n  // eslint-disable-next-line @foxglove/strict-equality\n  return currentValue != undefined && currentValue == filter.value;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useRef } from \"react\";\nimport shallowequal from \"shallowequal\";\n\n/**\n * Return initiallyTrue the first time, and again if any of the given deps have changed.\n * @deprecated Render functions may be called more than once before effects are run, so relying on\n * the result of useChangeDetector is dangerous. Instead, track the previously used values at the\n * point they are being used.\n */\nexport default function useChangeDetector(\n  deps: unknown[],\n  { initiallyTrue }: { initiallyTrue: boolean },\n): boolean {\n  const ref = useRef(initiallyTrue ? undefined : deps);\n  const changed = !shallowequal(ref.current, deps);\n  ref.current = deps;\n  return changed;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { isEqual } from \"lodash\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport useChangeDetector from \"@foxglove/studio-base/hooks/useChangeDetector\";\nimport useDeepMemo from \"@foxglove/studio-base/hooks/useDeepMemo\";\nimport useGlobalVariables, {\n  GlobalVariables,\n} from \"@foxglove/studio-base/hooks/useGlobalVariables\";\nimport { MessageEvent, Topic } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\nimport {\n  enumValuesByDatatypeAndField,\n  extractTypeFromStudioEnumAnnotation,\n  getTopicsByTopicName,\n} from \"@foxglove/studio-base/util/selectors\";\n\nimport { MessagePathStructureItem, MessagePathStructureItemMessage, RosPath } from \"./constants\";\nimport { filterMatches } from \"./filterMatches\";\nimport { TypicalFilterNames } from \"./isTypicalFilterName\";\nimport { messagePathStructures } from \"./messagePathsForDatatype\";\nimport parseRosPath, { quoteTopicNameIfNeeded } from \"./parseRosPath\";\n\nexport type MessagePathDataItem = {\n  value: unknown; // The actual value.\n  path: string; // The path to get to this value. Tries to use \"nice ids\" like `[:]{some_id==123}` wherever possible.\n  constantName?: string; // The name of the constant that the value matches up with, if any.\n};\n\n// Given a set of message paths, this returns a function that you can call to resolve a single path\n// and message to an array of `MessagePathDataItem` objects. The array+objects will be the same by\n// reference, as long as topics/datatypes/global variables haven't changed in the meantime.\nexport function useCachedGetMessagePathDataItems(\n  paths: string[],\n): (path: string, message: MessageEvent<unknown>) => MessagePathDataItem[] | undefined {\n  const { topics: providerTopics, datatypes } = PanelAPI.useDataSourceInfo();\n  const { globalVariables } = useGlobalVariables();\n  const memoizedPaths: string[] = useShallowMemo<string[]>(paths);\n\n  // We first fill in global variables in the paths, so we can later see which paths have really\n  // changed when the global variables have changed.\n  const unmemoizedFilledInPaths: {\n    [key: string]: RosPath;\n  } = useMemo(() => {\n    const filledInPaths: Record<string, RosPath> = {};\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        filledInPaths[path] = fillInGlobalVariablesInPath(rosPath, globalVariables);\n      }\n    }\n    return filledInPaths;\n  }, [globalVariables, memoizedPaths]);\n  const memoizedFilledInPaths = useDeepMemo<{\n    [key: string]: RosPath;\n  }>(unmemoizedFilledInPaths);\n\n  // Filter down topics and datatypes to only the ones we need to process the requested paths, so\n  // our result can be dependent on the relevant topics only. Without this, adding topics/datatypes\n  // dynamically would result in panels clearing out when their message reducers change as a result\n  // of the change in topics/datatypes identity from the player.\n  const unmemoizedRelevantTopics = useMemo(() => {\n    const topicsByName = getTopicsByTopicName(providerTopics);\n    const seenNames = new Set<string>();\n    const result: Topic[] = [];\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        if (seenNames.has(rosPath.topicName)) {\n          continue;\n        }\n        seenNames.add(rosPath.topicName);\n        const topic = topicsByName[rosPath.topicName];\n        if (topic) {\n          result.push(topic);\n        }\n      }\n    }\n    return result;\n  }, [providerTopics, memoizedPaths]);\n  const relevantTopics = useDeepMemo(unmemoizedRelevantTopics);\n\n  const unmemoizedRelevantDatatypes = useMemo(() => {\n    const relevantDatatypes: RosDatatypes = new Map();\n    function addRelevantDatatype(datatypeName: string, seen: string[]) {\n      if (seen.includes(datatypeName)) {\n        return;\n      }\n\n      const type = datatypes.get(datatypeName);\n      if (type) {\n        relevantDatatypes.set(datatypeName, type);\n        for (const field of type.definitions) {\n          if (\n            field.isComplex === true ||\n            extractTypeFromStudioEnumAnnotation(field.name) != undefined\n          ) {\n            addRelevantDatatype(field.type, [...seen, datatypeName]);\n          }\n        }\n      }\n    }\n    for (const { schemaName } of relevantTopics.values()) {\n      if (schemaName != undefined) {\n        addRelevantDatatype(schemaName, []);\n      }\n    }\n    return relevantDatatypes;\n  }, [datatypes, relevantTopics]);\n  const relevantDatatypes = useDeepMemo(unmemoizedRelevantDatatypes);\n\n  // Cache MessagePathDataItem arrays by Message. We need to clear out this cache whenever\n  // the topics or datatypes change, since that's what getMessagePathDataItems\n  // depends on, outside of the message+path.\n  const cachesByPath = useRef<{\n    [key: string]: {\n      filledInPath: RosPath;\n      weakMap: WeakMap<MessageEvent<unknown>, MessagePathDataItem[] | undefined>;\n    };\n  }>({});\n  if (useChangeDetector([relevantTopics, relevantDatatypes], { initiallyTrue: true })) {\n    cachesByPath.current = {};\n  }\n  // When the filled in paths changed, then that means that either the path string changed, or a\n  // relevant global variable changed. Delete the caches for where the `filledInPath` doesn't match\n  // any more.\n  if (useChangeDetector([memoizedFilledInPaths], { initiallyTrue: false })) {\n    for (const [path, current] of Object.entries(cachesByPath.current)) {\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath || !isEqual(current.filledInPath, filledInPath)) {\n        delete cachesByPath.current[path];\n      }\n    }\n  }\n\n  return useCallback(\n    (path: string, message: MessageEvent<unknown>): MessagePathDataItem[] | undefined => {\n      if (!memoizedPaths.includes(path)) {\n        throw new Error(`path (${path}) was not in the list of cached paths`);\n      }\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath) {\n        return;\n      }\n      const currentPath = (cachesByPath.current[path] = cachesByPath.current[path] ?? {\n        filledInPath,\n        weakMap: new WeakMap(),\n      });\n      const { weakMap } = currentPath;\n      if (!weakMap.has(message)) {\n        const messagePathDataItems = getMessagePathDataItems(\n          message,\n          filledInPath,\n          relevantTopics,\n          relevantDatatypes,\n        );\n        weakMap.set(message, messagePathDataItems);\n        return messagePathDataItems;\n      }\n      const messagePathDataItems = weakMap.get(message);\n      return messagePathDataItems;\n    },\n    [relevantDatatypes, memoizedFilledInPaths, memoizedPaths, relevantTopics],\n  );\n}\n\nexport function fillInGlobalVariablesInPath(\n  rosPath: RosPath,\n  globalVariables: GlobalVariables,\n): RosPath {\n  return {\n    ...rosPath,\n    messagePath: rosPath.messagePath.map((messagePathPart) => {\n      if (messagePathPart.type === \"slice\") {\n        const start =\n          typeof messagePathPart.start === \"object\"\n            ? Number(globalVariables[messagePathPart.start.variableName])\n            : messagePathPart.start;\n        const end =\n          typeof messagePathPart.end === \"object\"\n            ? Number(globalVariables[messagePathPart.end.variableName])\n            : messagePathPart.end;\n\n        return {\n          ...messagePathPart,\n          start: isNaN(start) ? 0 : start,\n          end: isNaN(end) ? Infinity : end,\n        };\n      } else if (messagePathPart.type === \"filter\" && typeof messagePathPart.value === \"object\") {\n        let value;\n        const variable = globalVariables[messagePathPart.value.variableName];\n        if (typeof variable === \"number\" || typeof variable === \"string\") {\n          value = variable;\n        }\n        return { ...messagePathPart, value };\n      }\n\n      return messagePathPart;\n    }),\n  };\n}\n\n// Get a new item that has `queriedData` set to the values and paths as queried by `rosPath`.\n// Exported just for tests.\nexport function getMessagePathDataItems(\n  message: MessageEvent<unknown>,\n  filledInPath: RosPath,\n  providerTopics: readonly Topic[],\n  datatypes: RosDatatypes,\n): MessagePathDataItem[] | undefined {\n  const structures = messagePathStructures(datatypes);\n  const topic = getTopicsByTopicName(providerTopics)[filledInPath.topicName];\n\n  // We don't care about messages that don't match the topic we're looking for.\n  if (!topic || message.topic !== filledInPath.topicName) {\n    return;\n  }\n\n  // Apply top-level filters first. If a message matches all top-level filters, then this function\n  // will *always* return a history item, so this is our only chance to return nothing.\n  for (const item of filledInPath.messagePath) {\n    if (item.type === \"filter\") {\n      if (!filterMatches(item, message.message)) {\n        return [];\n      }\n    } else {\n      break;\n    }\n  }\n\n  const queriedData: MessagePathDataItem[] = [];\n  // Traverse the message (via `value`) and the `messagePath` at the same time. Also keep track\n  // of a `path` string that we should show in the tooltip of the point.\n  function traverse(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value: any,\n    pathIndex: number,\n    path: string,\n    structureItem: MessagePathStructureItem | undefined,\n  ) {\n    if (value == undefined || structureItem == undefined) {\n      return;\n    }\n    const pathItem = filledInPath.messagePath[pathIndex];\n    const nextPathItem = filledInPath.messagePath[pathIndex + 1];\n    const structureIsJson =\n      structureItem.structureType === \"primitive\" && structureItem.primitiveType === \"json\";\n    if (!pathItem) {\n      // If we're at the end of the `messagePath`, we're done! Just store the point.\n      let constantName: string | undefined;\n      const prevPathItem = filledInPath.messagePath[pathIndex - 1];\n      if (prevPathItem && prevPathItem.type === \"name\") {\n        const fieldName = prevPathItem.name;\n        const enumMap = enumValuesByDatatypeAndField(datatypes)[structureItem.datatype];\n        constantName = enumMap?.[fieldName]?.[value];\n      }\n      queriedData.push({ value, path, constantName });\n    } else if (pathItem.type === \"name\" && structureItem.structureType === \"message\") {\n      // If the `pathItem` is a name, we're traversing down using that name.\n      const next = structureItem.nextByName[pathItem.name];\n      const nextStructIsJson = next?.structureType === \"primitive\" && next.primitiveType === \"json\";\n\n      const actualNext: MessagePathStructureItem =\n        !nextStructIsJson && next\n          ? next\n          : { structureType: \"primitive\", primitiveType: \"json\", datatype: \"\" };\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, actualNext);\n    } else if (\n      pathItem.type === \"slice\" &&\n      (structureItem.structureType === \"array\" || structureIsJson)\n    ) {\n      const { start, end } = pathItem;\n      if (typeof start === \"object\" || typeof end === \"object\") {\n        throw new Error(\n          \"getMessagePathDataItems  only works on paths where global variables have been filled in\",\n        );\n      }\n      const startIdx: number = start;\n      const endIdx: number = end;\n      if (typeof startIdx !== \"number\" || typeof endIdx !== \"number\") {\n        return;\n      }\n\n      // If the `pathItem` is a slice, iterate over all the relevant elements in the array.\n      const arrayLength = value.length as number;\n      for (let i = startIdx; i <= Math.min(endIdx, arrayLength - 1); i++) {\n        const index = i >= 0 ? i : arrayLength + i;\n        const arrayElement = value[index];\n        if (arrayElement == undefined) {\n          continue;\n        }\n        // Ideally show something like `/topic.object[:]{some_id=123}` for the path, but fall\n        // back to `/topic.object[10]` if necessary. In any case, make sure that the user can\n        // actually identify where the value came from.\n        let newPath;\n        if (nextPathItem && nextPathItem.type === \"filter\") {\n          // If we have a filter set after this, it will update the path appropriately.\n          newPath = `${path}[:]`;\n        } else if (typeof arrayElement === \"object\") {\n          // See if `arrayElement` has a property that we typically filter on. If so, show that.\n          const name = TypicalFilterNames.find((id) => id in arrayElement);\n          if (name != undefined) {\n            newPath = `${path}[:]{${name}==${arrayElement[name]}}`;\n          } else {\n            // Use `i` here instead of `index`, since it's only different when `i` is negative,\n            // and in that case it's probably more useful to show to the user how many elements\n            // from the end of the array this data is, since they clearly are thinking in that way\n            // (otherwise they wouldn't have chosen a negative slice).\n            newPath = `${path}[${i}]`;\n          }\n        } else {\n          // Use `i` here instead of `index`, since it's only different when `i` is negative,\n          // and in that case it's probably more useful to show to the user how many elements\n          // from the end of the array this data is, since they clearly are thinking in that way\n          // (otherwise they wouldn't have chosen a negative slice).\n          newPath = `${path}[${i}]`;\n        }\n        traverse(\n          arrayElement,\n          pathIndex + 1,\n          newPath,\n          !structureIsJson && structureItem.structureType === \"array\"\n            ? structureItem.next\n            : structureItem, // Structure is already JSON.\n        );\n      }\n    } else if (pathItem.type === \"filter\") {\n      if (filterMatches(pathItem, value)) {\n        traverse(value, pathIndex + 1, `${path}{${pathItem.repr}}`, structureItem);\n      }\n    } else if (structureIsJson && pathItem.type === \"name\") {\n      // Use getField just in case.\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, {\n        structureType: \"primitive\",\n        primitiveType: \"json\",\n        datatype: \"\",\n      });\n    } else {\n      console.warn(\n        `Unknown pathItem.type ${pathItem.type} for structureType: ${structureItem.structureType}`,\n      );\n    }\n  }\n  const structure: MessagePathStructureItemMessage | undefined =\n    // If the topic has no schema, we can at least allow accessing the root message\n    topic.schemaName == undefined\n      ? { structureType: \"message\", datatype: \"\", nextByName: {} }\n      : structures[topic.schemaName];\n  if (structure) {\n    traverse(message.message, 0, quoteTopicNameIfNeeded(filledInPath.topicName), structure);\n  }\n  return queriedData;\n}\n\nexport type MessageAndData = {\n  messageEvent: MessageEvent<unknown>;\n  queriedData: MessagePathDataItem[];\n};\n\nexport type MessageDataItemsByPath = {\n  readonly [key: string]: readonly MessageAndData[];\n};\n\nexport function useDecodeMessagePathsForMessagesByTopic(\n  paths: string[],\n): (messagesByTopic: {\n  [topicName: string]: readonly MessageEvent<unknown>[];\n}) => MessageDataItemsByPath {\n  const memoizedPaths = useShallowMemo<string[]>(paths);\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(memoizedPaths);\n  // Note: Let callers define their own memoization scheme for messagesByTopic. For regular playback\n  // useMemo might be appropriate, but weakMemo will likely better for blocks.\n  return useCallback(\n    (messagesByTopic) => {\n      const obj: { [path: string]: MessageAndData[] } = {};\n      for (const path of memoizedPaths) {\n        // Create an array for invalid paths, and valid paths with entries in messagesByTopic\n        const rosPath = parseRosPath(path);\n        if (!rosPath) {\n          obj[path] = [];\n          continue;\n        }\n        const messages = messagesByTopic[rosPath.topicName];\n        if (!messages) {\n          // For the playback pipeline messagesByTopic will always include an entry for every topic.\n          // For the blocks, missing entries are semantically interesting, and should result in\n          // missing (not empty) entries in the output so that information is communicated\n          // downstream.\n          continue;\n        }\n\n        const messagesForThisPath: MessageAndData[] = [];\n        obj[path] = messagesForThisPath;\n\n        for (const message of messages) {\n          // Add the item (if it exists) to the array.\n          const queriedData = cachedGetMessagePathDataItems(path, message);\n          if (queriedData) {\n            messagesForThisPath.push({ messageEvent: message, queriedData });\n          }\n        }\n      }\n      return obj;\n    },\n    [memoizedPaths, cachedGetMessagePathDataItems],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport sendNotification, {\n  DetailsType,\n  NotificationSeverity,\n  NotificationType,\n} from \"@foxglove/studio-base/util/sendNotification\";\n\nimport Rpc from \"./Rpc\";\n\n// This function should be called inside the parent thread; it sets up receiving a message from the worker thread and\n// calling sendNotification.\nexport function setupReceiveReportErrorHandler(rpc: Rpc): void {\n  rpc.receive(\n    \"sendNotification\",\n    ({\n      message,\n      details,\n      type,\n      severity,\n    }: {\n      message: string;\n      details: DetailsType;\n      type: NotificationType;\n      severity: NotificationSeverity;\n    }) => {\n      sendNotification(message, details, type, severity);\n    },\n  );\n}\n\nexport function setupMainThreadRpc(rpc: Rpc): void {\n  setupReceiveReportErrorHandler(rpc);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport findIndex from \"lodash/findIndex\";\nimport sortBy from \"lodash/sortBy\";\n\nimport Rpc, { Channel } from \"@foxglove/studio-base/util/Rpc\";\nimport { setupMainThreadRpc } from \"@foxglove/studio-base/util/RpcMainThreadUtils\";\n\n// This file provides a convenient way to set up and tear down workers as needed. It will create only a single worker\n// of each class, and terminate the worker when all listeners are unregistered.\n\ntype WorkerListenerState<W> = { rpc: Rpc; worker: W; listenerIds: string[] };\n\nexport default class WebWorkerManager<W extends Channel> {\n  private _createWorker: () => W;\n  private _maxWorkerCount: number;\n  private _workerStates: (WorkerListenerState<W> | undefined)[];\n  private _allListeners: Set<string>;\n\n  public constructor(createWorker: () => W, maxWorkerCount: number) {\n    this._createWorker = createWorker;\n    this._maxWorkerCount = maxWorkerCount;\n    this._workerStates = new Array(maxWorkerCount);\n    this._allListeners = new Set();\n  }\n\n  public testing_workerCount(): number {\n    return this._workerStates.filter(Boolean).length;\n  }\n\n  public testing_getWorkerState(id: string): WorkerListenerState<W> | undefined {\n    return this._workerStates.find((workerState) => workerState?.listenerIds.includes(id));\n  }\n\n  public registerWorkerListener(id: string): Rpc {\n    if (this._allListeners.has(id)) {\n      throw new Error(\"cannot register the same listener id twice\");\n    }\n    this._allListeners.add(id);\n\n    const currentWorkerCount = this._workerStates.filter(Boolean).length;\n    if (currentWorkerCount < this._maxWorkerCount) {\n      const worker = this._createWorker();\n      const rpc = new Rpc(worker);\n      setupMainThreadRpc(rpc);\n\n      const emptyIndex = findIndex(this._workerStates, (x) => !x);\n      this._workerStates[emptyIndex] = { worker, rpc, listenerIds: [id] };\n      return rpc;\n    }\n    const workerStateByListenerCount = sortBy(\n      this._workerStates.filter(Boolean),\n      (workerState) => workerState?.listenerIds.length,\n    );\n    const workerState = workerStateByListenerCount[0];\n    if (!workerState) {\n      throw new Error(\"no worker state\");\n    }\n    workerState.listenerIds.push(id);\n    return workerState.rpc;\n  }\n\n  public unregisterWorkerListener(id: string): void {\n    if (!this._allListeners.has(id)) {\n      throw new Error(\"Cannot find listener to unregister\");\n    }\n    this._allListeners.delete(id);\n\n    const workerStateIndex = findIndex(this._workerStates, (workerState) => {\n      if (!workerState) {\n        return false;\n      }\n      return workerState.listenerIds.includes(id);\n    });\n    const workerState = this._workerStates[workerStateIndex];\n    if (workerStateIndex >= 0 && workerState) {\n      workerState.listenerIds = workerState.listenerIds.filter((_id) => _id !== id);\n      if (workerState.listenerIds.length === 0) {\n        this._workerStates[workerStateIndex] = undefined;\n        workerState.worker.terminate();\n        workerState.rpc.terminate();\n      }\n    }\n  }\n}\n"],"names":["setupSendReportNotificationHandler","rpc","message","details","type","severity","setupWorker","overwriteFetch","log","addEventListener","emitter","eventName","fn","existing","removeEventListener","ChartJSManager","initOpts","id","node","data","options","devicePixelRatio","fontLoaded","font","fakeNode","origZoomStart","chartInstance","args","pluginOptions","ctx","res","fullOptions","event","target","maybeCast","width","height","isBoundsReset","instance","scales","shouldResize","wholeWidth","wholeHeight","ev","elements","out","element","itemA","itemB","dxA","dyA","dxB","dyB","distSquaredA","distSquaredB","context","xScale","yScale","config","datalabelsOptions","value","_context","staticColor","loadDefaultFont","fontFace","fixedNumberFormat","fixTicks","index","ticks","ChartJsMux","manager","chart","makeChartJSWorker","ChartNull","mightActuallyBePartial","webWorkerManager","WebWorkerManager","rpcMouseEvent","boundingRect","supportsOffscreenCanvas","Chart","props","initialized","canvasRef","containerRef","isMounted","useMountedState","currentScalesRef","zoomEnabled","panEnabled","onStartRender","onFinishRender","sendWrapperRef","rpcSendRef","hasPannedSinceMouseDown","previousUpdateMessage","local","remote","Rpc","sendWrapper","topic","payload","transferables","onScalesUpdateRef","maybeUpdateScales","newScales","opt","oldScales","oldStr","newStr","getNewUpdateMessage","prev","updateError","useAsync","newUpdateMessage","canvas","offscreenCanvas","container","hammerManager","threshold","onWheel","onMouseDown","onMouseUp","mousePresentRef","onHover","onMouseMove","onMouseEnter","onMouseLeave","onClick","rect","mouseX","mouseY","datalabel","xVal","yVal","pixels","filterMatches","filter","currentValue","name","useChangeDetector","deps","initiallyTrue","ref","changed","useCachedGetMessagePathDataItems","paths","providerTopics","datatypes","PanelAPI","globalVariables","useGlobalVariables","memoizedPaths","unmemoizedFilledInPaths","filledInPaths","path","rosPath","parseRosPath","fillInGlobalVariablesInPath","memoizedFilledInPaths","useDeepMemo","unmemoizedRelevantTopics","topicsByName","seenNames","result","relevantTopics","unmemoizedRelevantDatatypes","relevantDatatypes","addRelevantDatatype","datatypeName","seen","field","schemaName","cachesByPath","current","filledInPath","currentPath","weakMap","messagePathDataItems","getMessagePathDataItems","messagePathPart","start","end","variable","structures","item","queriedData","traverse","pathIndex","structureItem","pathItem","nextPathItem","structureIsJson","next","actualNext","startIdx","endIdx","arrayLength","i","arrayElement","newPath","constantName","prevPathItem","fieldName","structure","useDecodeMessagePathsForMessagesByTopic","cachedGetMessagePathDataItems","messagesByTopic","obj","messages","messagesForThisPath","setupReceiveReportErrorHandler","sendNotification","setupMainThreadRpc","createWorker","maxWorkerCount","workerState","worker","emptyIndex","x","workerStateIndex","_id"],"sourceRoot":""}