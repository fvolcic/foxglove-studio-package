{"version":3,"file":"1913.b28f6ba1506207a4235e.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/hooks/usePublisher.tsx","webpack:///../../packages/studio-base/src/panels/Publish/buildSampleMessage.ts","webpack:///../../packages/studio-base/src/panels/Publish/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { useMessagePipeline } from \"@foxglove/studio-base/components/MessagePipeline\";\nimport { PlayerCapabilities } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\n\ntype Props = {\n  topic: string;\n  schemaName: string;\n  datatypes: RosDatatypes;\n  name: string;\n};\n\n// Registers a publisher with the player and returns a publish() function to publish data. This uses\n// no-op functions if the player does not have the `advertise` capability\nexport default function usePublisher({\n  topic,\n  schemaName,\n  datatypes,\n  name,\n}: Props): (msg: Record<string, unknown>) => void {\n  const [id] = useState(() => uuidv4());\n  const canPublish = useMessagePipeline((context) =>\n    context.playerState.capabilities.includes(PlayerCapabilities.advertise),\n  );\n  const publish = useMessagePipeline((context) => context.publish);\n  const setPublishers = useMessagePipeline((context) => context.setPublishers);\n  useEffect(() => {\n    if (canPublish) {\n      setPublishers(id, [{ topic, schemaName, options: { datatypes } }]);\n      return () => setPublishers(id, []);\n    } else {\n      return undefined;\n    }\n  }, [id, topic, schemaName, datatypes, name, setPublishers, canPublish]);\n\n  return useCallback(\n    (msg) => {\n      if (canPublish) {\n        publish({ topic, msg });\n      }\n    },\n    [publish, topic, canPublish],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\n\nexport const builtinSampleValues: Record<string, unknown> = {\n  bool: false,\n  int8: 0,\n  uint8: 0,\n  int16: 0,\n  uint16: 0,\n  int32: 0,\n  uint32: 0,\n  int64: 0,\n  uint64: 0,\n  float32: 0,\n  float64: 0,\n  string: \"\",\n  time: { sec: 0, nsec: 0 },\n  duration: { sec: 0, nsec: 0 },\n};\n\nexport default function buildSampleMessage(\n  datatypes: RosDatatypes,\n  datatype: string,\n): unknown | undefined {\n  const builtin = builtinSampleValues[datatype];\n  if (builtin != undefined) {\n    return builtin;\n  }\n  const fields = datatypes.get(datatype)?.definitions;\n  if (!fields) {\n    return undefined;\n  }\n  const obj: Record<string, unknown> = {};\n  for (const field of fields) {\n    if (field.isConstant ?? false) {\n      continue;\n    }\n    const sample = buildSampleMessage(datatypes, field.type);\n    if (field.isArray ?? false) {\n      if (field.arrayLength != undefined) {\n        obj[field.name] = new Array(field.arrayLength).fill(sample);\n      } else {\n        obj[field.name] = [sample];\n      }\n    } else {\n      obj[field.name] = sample;\n    }\n  }\n  return obj;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Button, Typography, styled as muiStyled, OutlinedInput } from \"@mui/material\";\nimport produce from \"immer\";\nimport { set } from \"lodash\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nimport { useRethrow } from \"@foxglove/hooks\";\nimport { SettingsTreeAction, SettingsTreeNodes } from \"@foxglove/studio\";\nimport { useDataSourceInfo } from \"@foxglove/studio-base/PanelAPI\";\nimport Autocomplete, { IAutocomplete } from \"@foxglove/studio-base/components/Autocomplete\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport usePublisher from \"@foxglove/studio-base/hooks/usePublisher\";\nimport { PlayerCapabilities, Topic } from \"@foxglove/studio-base/players/types\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport buildSampleMessage from \"./buildSampleMessage\";\n\ntype Config = Partial<{\n  topicName: string;\n  datatype: string;\n  buttonText: string;\n  buttonTooltip: string;\n  buttonColor: string;\n  advancedView: boolean;\n  value: string;\n}>;\n\ntype Props = {\n  config: Config;\n  saveConfig: SaveConfig<Config>;\n};\n\nfunction buildSettingsTree(config: Config): SettingsTreeNodes {\n  return {\n    general: {\n      fields: {\n        advancedView: { label: \"Editing mode\", input: \"boolean\", value: config.advancedView },\n        buttonText: { label: \"Button title\", input: \"string\", value: config.buttonText },\n        buttonTooltip: { label: \"Button tooltip\", input: \"string\", value: config.buttonTooltip },\n        buttonColor: { label: \"Button color\", input: \"rgb\", value: config.buttonColor },\n      },\n    },\n  };\n}\n\nconst StyledButton = muiStyled(Button, {\n  shouldForwardProp: (prop) => prop !== \"buttonColor\",\n})<{ buttonColor?: string }>(({ theme, buttonColor }) => {\n  if (buttonColor == undefined) {\n    return {};\n  }\n  const augmentedButtonColor = theme.palette.augmentColor({\n    color: { main: buttonColor },\n  });\n\n  return {\n    backgroundColor: augmentedButtonColor.main,\n    color: augmentedButtonColor.contrastText,\n\n    \"&:hover\": {\n      backgroundColor: augmentedButtonColor.dark,\n    },\n  };\n});\n\nconst StyledTextarea = muiStyled(OutlinedInput)(({ theme }) => ({\n  width: \"100%\",\n  height: \"100%\",\n  textAlign: \"left\",\n  backgroundColor: theme.palette.background.paper,\n  overflow: \"hidden\",\n  padding: theme.spacing(1, 0.5),\n\n  \".MuiInputBase-input\": {\n    height: \"100% !important\",\n    font: \"inherit\",\n    lineHeight: 1.4,\n    fontFamily: fonts.MONOSPACE,\n    fontSize: \"100%\",\n    overflow: \"auto !important\",\n    resize: \"none\",\n  },\n}));\n\nfunction getTopicName(topic: Topic): string {\n  return topic.name;\n}\n\nfunction parseInput(value: string): { error?: string; parsedObject?: unknown } {\n  let parsedObject;\n  let error = undefined;\n  try {\n    const parsedAny: unknown = JSON.parse(value);\n    if (Array.isArray(parsedAny)) {\n      error = \"Message content must be an object, not an array\";\n    } else if (parsedAny == null /* eslint-disable-line no-restricted-syntax */) {\n      error = \"Message content must be an object, not null\";\n    } else if (typeof parsedAny !== \"object\") {\n      error = `Message content must be an object, not ‘${typeof parsedAny}’`;\n    } else {\n      parsedObject = parsedAny;\n    }\n  } catch (e) {\n    error = value.length !== 0 ? e.message : \"\";\n  }\n  return { error, parsedObject };\n}\n\nfunction Publish(props: Props) {\n  const { topics, datatypes, capabilities } = useDataSourceInfo();\n  const {\n    config: {\n      topicName = \"\",\n      datatype = \"\",\n      buttonText = \"Publish\",\n      buttonTooltip = \"\",\n      buttonColor = \"#00A871\",\n      advancedView = true,\n      value = \"\",\n    },\n    saveConfig,\n  } = props;\n\n  const publish = usePublisher({\n    name: \"Publish\",\n    topic: topicName,\n    schemaName: datatype,\n    datatypes,\n  });\n\n  const datatypeNames = useMemo(() => Array.from(datatypes.keys()).sort(), [datatypes]);\n  const { error, parsedObject } = useMemo(() => parseInput(value), [value]);\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n\n  // when the selected datatype changes, replace the textarea contents with a sample message of the correct shape\n  // Make sure not to build a sample message on first load, though -- we don't want to overwrite\n  // the user's message just because prevDatatype hasn't been initialized.\n  const prevDatatype = useRef<string | undefined>();\n  useEffect(() => {\n    if (\n      datatype.length > 0 &&\n      prevDatatype.current != undefined &&\n      datatype !== prevDatatype.current &&\n      datatypes.get(datatype) != undefined\n    ) {\n      const sampleMessage = buildSampleMessage(datatypes, datatype);\n      if (sampleMessage != undefined) {\n        const stringifiedSampleMessage = JSON.stringify(sampleMessage, undefined, 2);\n        saveConfig({ value: stringifiedSampleMessage });\n      }\n    }\n    prevDatatype.current = datatype;\n  }, [saveConfig, datatype, datatypes]);\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action !== \"update\") {\n        return;\n      }\n\n      saveConfig(\n        produce((draft) => {\n          set(draft, action.payload.path.slice(1), action.payload.value);\n        }),\n      );\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      nodes: buildSettingsTree(props.config),\n    });\n  }, [actionHandler, props.config, updatePanelSettingsTree]);\n\n  const onChangeTopic = useCallback(\n    (_event: unknown, name: string) => {\n      saveConfig({ topicName: name });\n    },\n    [saveConfig],\n  );\n\n  // when a known topic is selected, also fill in its datatype\n  const onSelectTopic = useCallback(\n    (newValue: string | Topic, autocomplete: IAutocomplete) => {\n      if (typeof newValue === \"string\") {\n        saveConfig({ topicName: newValue });\n      } else {\n        saveConfig({ topicName: newValue.name, datatype: newValue.schemaName });\n      }\n      autocomplete.blur();\n    },\n    [saveConfig],\n  );\n\n  const onSelectDatatype = useCallback(\n    (newDatatype: string, autocomplete: IAutocomplete) => {\n      saveConfig({ datatype: newDatatype });\n      autocomplete.blur();\n    },\n    [saveConfig],\n  );\n\n  const onPublishClicked = useRethrow(\n    useCallback(() => {\n      if (topicName.length !== 0 && parsedObject != undefined) {\n        publish(parsedObject as Record<string, unknown>);\n      } else {\n        throw new Error(`called _publish() when input was invalid`);\n      }\n    }, [publish, parsedObject, topicName]),\n  );\n\n  const canPublish = capabilities.includes(PlayerCapabilities.advertise);\n\n  return (\n    <Stack fullHeight>\n      <PanelToolbar />\n      {advancedView && (\n        <Stack flex=\"auto\" padding={2} gap={1} paddingBottom={0}>\n          <div>\n            <Stack alignItems=\"center\" gap={1} padding={0.5} direction=\"row\" flexShrink={0}>\n              <Typography color=\"text.secondary\" variant=\"body2\" component=\"label\">\n                Topic:\n              </Typography>\n              <Autocomplete\n                placeholder=\"Choose a topic\"\n                items={[...topics]}\n                hasError={false}\n                onChange={onChangeTopic}\n                onSelect={onSelectTopic}\n                selectedItem={{ name: topicName, schemaName: \"\" }}\n                getItemText={getTopicName}\n                getItemValue={getTopicName}\n              />\n            </Stack>\n            <Stack alignItems=\"center\" gap={1} padding={0.5} direction=\"row\" flexShrink={0}>\n              <Typography color=\"text.secondary\" variant=\"body2\" component=\"label\">\n                Datatype:\n              </Typography>\n              <Autocomplete\n                placeholder=\"Choose a datatype\"\n                items={datatypeNames}\n                onSelect={onSelectDatatype}\n                selectedItem={datatype}\n                selectOnFocus\n              />\n            </Stack>\n          </div>\n          <Stack flex=\"auto\">\n            <StyledTextarea\n              multiline\n              placeholder=\"Enter message content as JSON\"\n              value={value}\n              onChange={(event) => saveConfig({ value: event.target.value })}\n            />\n          </Stack>\n        </Stack>\n      )}\n      <Stack\n        direction=\"row\"\n        flex=\"0 0 auto\"\n        alignItems=\"flex-start\"\n        justifyContent={advancedView ? \"flex-end\" : \"center\"}\n        padding={2}\n      >\n        {error && (\n          <Stack flex=\"auto\" padding={0.5} justifyContent=\"center\">\n            <Typography variant=\"body2\" color=\"error.main\">\n              {error}\n            </Typography>\n          </Stack>\n        )}\n        <StyledButton\n          variant=\"contained\"\n          size=\"large\"\n          buttonColor={buttonColor ? buttonColor : undefined}\n          title={canPublish ? buttonTooltip : \"Connect to ROS to publish data\"}\n          disabled={!canPublish || parsedObject == undefined}\n          onClick={onPublishClicked}\n        >\n          {buttonText}\n        </StyledButton>\n      </Stack>\n    </Stack>\n  );\n}\n\nexport default Panel(\n  Object.assign(React.memo(Publish), {\n    panelType: \"Publish\",\n    defaultConfig: {\n      topicName: \"\",\n      datatype: \"\",\n      buttonText: \"Publish\",\n      buttonTooltip: \"\",\n      buttonColor: \"#00A871\",\n      advancedView: true,\n      value: \"\",\n    },\n  }),\n);\n"],"names":["usePublisher","topic","schemaName","datatypes","name","id","canPublish","context","publish","setPublishers","msg","builtinSampleValues","buildSampleMessage","datatype","builtin","fields","obj","field","sample","buildSettingsTree","config","StyledButton","Button","prop","theme","buttonColor","augmentedButtonColor","StyledTextarea","OutlinedInput","getTopicName","parseInput","value","parsedObject","error","parsedAny","e","Publish","props","topics","capabilities","topicName","buttonText","buttonTooltip","advancedView","saveConfig","datatypeNames","updatePanelSettingsTree","prevDatatype","sampleMessage","stringifiedSampleMessage","actionHandler","action","draft","onChangeTopic","_event","onSelectTopic","newValue","autocomplete","onSelectDatatype","newDatatype","onPublishClicked","Stack","PanelToolbar","Typography","Autocomplete","event","Panel","React"],"sourceRoot":""}