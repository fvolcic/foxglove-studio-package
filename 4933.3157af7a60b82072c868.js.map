{"version":3,"file":"4933.3157af7a60b82072c868.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/MessagePathSyntax/filterMatches.ts","webpack:///../../packages/studio-base/src/hooks/useChangeDetector.ts","webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useCachedGetMessagePathDataItems.ts","webpack:///../../packages/studio-base/src/panels/Table/sanitizeAccessorPath.ts","webpack:///../../packages/studio-base/src/panels/Table/TableCell.tsx","webpack:///../../packages/studio-base/src/panels/Table/Table.tsx","webpack:///../../packages/studio-base/src/panels/Table/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { MessagePathFilter } from \"./constants\";\n\nexport function filterMatches(filter: MessagePathFilter, value: unknown): boolean {\n  if (typeof filter.value === \"object\") {\n    throw new Error(\"filterMatches only works on paths where global variables have been filled in\");\n  }\n  if (filter.value == undefined) {\n    return false;\n  }\n\n  let currentValue = value;\n  for (const name of filter.path) {\n    if (typeof currentValue !== \"object\" || currentValue == undefined) {\n      return false;\n    }\n    currentValue = (currentValue as Record<string, unknown>)[name];\n    if (currentValue == undefined) {\n      return false;\n    }\n  }\n\n  // Test equality using `==` so we can be forgiving for comparing booleans with integers,\n  // comparing numbers with strings, bigints with numbers, and so on.\n  // eslint-disable-next-line @foxglove/strict-equality\n  return currentValue != undefined && currentValue == filter.value;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useRef } from \"react\";\nimport shallowequal from \"shallowequal\";\n\n/**\n * Return initiallyTrue the first time, and again if any of the given deps have changed.\n * @deprecated Render functions may be called more than once before effects are run, so relying on\n * the result of useChangeDetector is dangerous. Instead, track the previously used values at the\n * point they are being used.\n */\nexport default function useChangeDetector(\n  deps: unknown[],\n  { initiallyTrue }: { initiallyTrue: boolean },\n): boolean {\n  const ref = useRef(initiallyTrue ? undefined : deps);\n  const changed = !shallowequal(ref.current, deps);\n  ref.current = deps;\n  return changed;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { isEqual } from \"lodash\";\nimport { useCallback, useMemo, useRef } from \"react\";\n\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport * as PanelAPI from \"@foxglove/studio-base/PanelAPI\";\nimport useChangeDetector from \"@foxglove/studio-base/hooks/useChangeDetector\";\nimport useDeepMemo from \"@foxglove/studio-base/hooks/useDeepMemo\";\nimport useGlobalVariables, {\n  GlobalVariables,\n} from \"@foxglove/studio-base/hooks/useGlobalVariables\";\nimport { MessageEvent, Topic } from \"@foxglove/studio-base/players/types\";\nimport { RosDatatypes } from \"@foxglove/studio-base/types/RosDatatypes\";\nimport {\n  enumValuesByDatatypeAndField,\n  extractTypeFromStudioEnumAnnotation,\n  getTopicsByTopicName,\n} from \"@foxglove/studio-base/util/selectors\";\n\nimport { MessagePathStructureItem, MessagePathStructureItemMessage, RosPath } from \"./constants\";\nimport { filterMatches } from \"./filterMatches\";\nimport { TypicalFilterNames } from \"./isTypicalFilterName\";\nimport { messagePathStructures } from \"./messagePathsForDatatype\";\nimport parseRosPath, { quoteTopicNameIfNeeded } from \"./parseRosPath\";\n\nexport type MessagePathDataItem = {\n  value: unknown; // The actual value.\n  path: string; // The path to get to this value. Tries to use \"nice ids\" like `[:]{some_id==123}` wherever possible.\n  constantName?: string; // The name of the constant that the value matches up with, if any.\n};\n\n// Given a set of message paths, this returns a function that you can call to resolve a single path\n// and message to an array of `MessagePathDataItem` objects. The array+objects will be the same by\n// reference, as long as topics/datatypes/global variables haven't changed in the meantime.\nexport function useCachedGetMessagePathDataItems(\n  paths: string[],\n): (path: string, message: MessageEvent<unknown>) => MessagePathDataItem[] | undefined {\n  const { topics: providerTopics, datatypes } = PanelAPI.useDataSourceInfo();\n  const { globalVariables } = useGlobalVariables();\n  const memoizedPaths: string[] = useShallowMemo<string[]>(paths);\n\n  // We first fill in global variables in the paths, so we can later see which paths have really\n  // changed when the global variables have changed.\n  const unmemoizedFilledInPaths: {\n    [key: string]: RosPath;\n  } = useMemo(() => {\n    const filledInPaths: Record<string, RosPath> = {};\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        filledInPaths[path] = fillInGlobalVariablesInPath(rosPath, globalVariables);\n      }\n    }\n    return filledInPaths;\n  }, [globalVariables, memoizedPaths]);\n  const memoizedFilledInPaths = useDeepMemo<{\n    [key: string]: RosPath;\n  }>(unmemoizedFilledInPaths);\n\n  // Filter down topics and datatypes to only the ones we need to process the requested paths, so\n  // our result can be dependent on the relevant topics only. Without this, adding topics/datatypes\n  // dynamically would result in panels clearing out when their message reducers change as a result\n  // of the change in topics/datatypes identity from the player.\n  const unmemoizedRelevantTopics = useMemo(() => {\n    const topicsByName = getTopicsByTopicName(providerTopics);\n    const seenNames = new Set<string>();\n    const result: Topic[] = [];\n    for (const path of memoizedPaths) {\n      const rosPath = parseRosPath(path);\n      if (rosPath) {\n        if (seenNames.has(rosPath.topicName)) {\n          continue;\n        }\n        seenNames.add(rosPath.topicName);\n        const topic = topicsByName[rosPath.topicName];\n        if (topic) {\n          result.push(topic);\n        }\n      }\n    }\n    return result;\n  }, [providerTopics, memoizedPaths]);\n  const relevantTopics = useDeepMemo(unmemoizedRelevantTopics);\n\n  const unmemoizedRelevantDatatypes = useMemo(() => {\n    const relevantDatatypes: RosDatatypes = new Map();\n    function addRelevantDatatype(datatypeName: string, seen: string[]) {\n      if (seen.includes(datatypeName)) {\n        return;\n      }\n\n      const type = datatypes.get(datatypeName);\n      if (type) {\n        relevantDatatypes.set(datatypeName, type);\n        for (const field of type.definitions) {\n          if (\n            field.isComplex === true ||\n            extractTypeFromStudioEnumAnnotation(field.name) != undefined\n          ) {\n            addRelevantDatatype(field.type, [...seen, datatypeName]);\n          }\n        }\n      }\n    }\n    for (const { schemaName } of relevantTopics.values()) {\n      if (schemaName != undefined) {\n        addRelevantDatatype(schemaName, []);\n      }\n    }\n    return relevantDatatypes;\n  }, [datatypes, relevantTopics]);\n  const relevantDatatypes = useDeepMemo(unmemoizedRelevantDatatypes);\n\n  // Cache MessagePathDataItem arrays by Message. We need to clear out this cache whenever\n  // the topics or datatypes change, since that's what getMessagePathDataItems\n  // depends on, outside of the message+path.\n  const cachesByPath = useRef<{\n    [key: string]: {\n      filledInPath: RosPath;\n      weakMap: WeakMap<MessageEvent<unknown>, MessagePathDataItem[] | undefined>;\n    };\n  }>({});\n  if (useChangeDetector([relevantTopics, relevantDatatypes], { initiallyTrue: true })) {\n    cachesByPath.current = {};\n  }\n  // When the filled in paths changed, then that means that either the path string changed, or a\n  // relevant global variable changed. Delete the caches for where the `filledInPath` doesn't match\n  // any more.\n  if (useChangeDetector([memoizedFilledInPaths], { initiallyTrue: false })) {\n    for (const [path, current] of Object.entries(cachesByPath.current)) {\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath || !isEqual(current.filledInPath, filledInPath)) {\n        delete cachesByPath.current[path];\n      }\n    }\n  }\n\n  return useCallback(\n    (path: string, message: MessageEvent<unknown>): MessagePathDataItem[] | undefined => {\n      if (!memoizedPaths.includes(path)) {\n        throw new Error(`path (${path}) was not in the list of cached paths`);\n      }\n      const filledInPath = memoizedFilledInPaths[path];\n      if (!filledInPath) {\n        return;\n      }\n      const currentPath = (cachesByPath.current[path] = cachesByPath.current[path] ?? {\n        filledInPath,\n        weakMap: new WeakMap(),\n      });\n      const { weakMap } = currentPath;\n      if (!weakMap.has(message)) {\n        const messagePathDataItems = getMessagePathDataItems(\n          message,\n          filledInPath,\n          relevantTopics,\n          relevantDatatypes,\n        );\n        weakMap.set(message, messagePathDataItems);\n        return messagePathDataItems;\n      }\n      const messagePathDataItems = weakMap.get(message);\n      return messagePathDataItems;\n    },\n    [relevantDatatypes, memoizedFilledInPaths, memoizedPaths, relevantTopics],\n  );\n}\n\nexport function fillInGlobalVariablesInPath(\n  rosPath: RosPath,\n  globalVariables: GlobalVariables,\n): RosPath {\n  return {\n    ...rosPath,\n    messagePath: rosPath.messagePath.map((messagePathPart) => {\n      if (messagePathPart.type === \"slice\") {\n        const start =\n          typeof messagePathPart.start === \"object\"\n            ? Number(globalVariables[messagePathPart.start.variableName])\n            : messagePathPart.start;\n        const end =\n          typeof messagePathPart.end === \"object\"\n            ? Number(globalVariables[messagePathPart.end.variableName])\n            : messagePathPart.end;\n\n        return {\n          ...messagePathPart,\n          start: isNaN(start) ? 0 : start,\n          end: isNaN(end) ? Infinity : end,\n        };\n      } else if (messagePathPart.type === \"filter\" && typeof messagePathPart.value === \"object\") {\n        let value;\n        const variable = globalVariables[messagePathPart.value.variableName];\n        if (typeof variable === \"number\" || typeof variable === \"string\") {\n          value = variable;\n        }\n        return { ...messagePathPart, value };\n      }\n\n      return messagePathPart;\n    }),\n  };\n}\n\n// Get a new item that has `queriedData` set to the values and paths as queried by `rosPath`.\n// Exported just for tests.\nexport function getMessagePathDataItems(\n  message: MessageEvent<unknown>,\n  filledInPath: RosPath,\n  providerTopics: readonly Topic[],\n  datatypes: RosDatatypes,\n): MessagePathDataItem[] | undefined {\n  const structures = messagePathStructures(datatypes);\n  const topic = getTopicsByTopicName(providerTopics)[filledInPath.topicName];\n\n  // We don't care about messages that don't match the topic we're looking for.\n  if (!topic || message.topic !== filledInPath.topicName) {\n    return;\n  }\n\n  // Apply top-level filters first. If a message matches all top-level filters, then this function\n  // will *always* return a history item, so this is our only chance to return nothing.\n  for (const item of filledInPath.messagePath) {\n    if (item.type === \"filter\") {\n      if (!filterMatches(item, message.message)) {\n        return [];\n      }\n    } else {\n      break;\n    }\n  }\n\n  const queriedData: MessagePathDataItem[] = [];\n  // Traverse the message (via `value`) and the `messagePath` at the same time. Also keep track\n  // of a `path` string that we should show in the tooltip of the point.\n  function traverse(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    value: any,\n    pathIndex: number,\n    path: string,\n    structureItem: MessagePathStructureItem | undefined,\n  ) {\n    if (value == undefined || structureItem == undefined) {\n      return;\n    }\n    const pathItem = filledInPath.messagePath[pathIndex];\n    const nextPathItem = filledInPath.messagePath[pathIndex + 1];\n    const structureIsJson =\n      structureItem.structureType === \"primitive\" && structureItem.primitiveType === \"json\";\n    if (!pathItem) {\n      // If we're at the end of the `messagePath`, we're done! Just store the point.\n      let constantName: string | undefined;\n      const prevPathItem = filledInPath.messagePath[pathIndex - 1];\n      if (prevPathItem && prevPathItem.type === \"name\") {\n        const fieldName = prevPathItem.name;\n        const enumMap = enumValuesByDatatypeAndField(datatypes)[structureItem.datatype];\n        constantName = enumMap?.[fieldName]?.[value];\n      }\n      queriedData.push({ value, path, constantName });\n    } else if (pathItem.type === \"name\" && structureItem.structureType === \"message\") {\n      // If the `pathItem` is a name, we're traversing down using that name.\n      const next = structureItem.nextByName[pathItem.name];\n      const nextStructIsJson = next?.structureType === \"primitive\" && next.primitiveType === \"json\";\n\n      const actualNext: MessagePathStructureItem =\n        !nextStructIsJson && next\n          ? next\n          : { structureType: \"primitive\", primitiveType: \"json\", datatype: \"\" };\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, actualNext);\n    } else if (\n      pathItem.type === \"slice\" &&\n      (structureItem.structureType === \"array\" || structureIsJson)\n    ) {\n      const { start, end } = pathItem;\n      if (typeof start === \"object\" || typeof end === \"object\") {\n        throw new Error(\n          \"getMessagePathDataItems  only works on paths where global variables have been filled in\",\n        );\n      }\n      const startIdx: number = start;\n      const endIdx: number = end;\n      if (typeof startIdx !== \"number\" || typeof endIdx !== \"number\") {\n        return;\n      }\n\n      // If the `pathItem` is a slice, iterate over all the relevant elements in the array.\n      const arrayLength = value.length as number;\n      for (let i = startIdx; i <= Math.min(endIdx, arrayLength - 1); i++) {\n        const index = i >= 0 ? i : arrayLength + i;\n        const arrayElement = value[index];\n        if (arrayElement == undefined) {\n          continue;\n        }\n        // Ideally show something like `/topic.object[:]{some_id=123}` for the path, but fall\n        // back to `/topic.object[10]` if necessary. In any case, make sure that the user can\n        // actually identify where the value came from.\n        let newPath;\n        if (nextPathItem && nextPathItem.type === \"filter\") {\n          // If we have a filter set after this, it will update the path appropriately.\n          newPath = `${path}[:]`;\n        } else if (typeof arrayElement === \"object\") {\n          // See if `arrayElement` has a property that we typically filter on. If so, show that.\n          const name = TypicalFilterNames.find((id) => id in arrayElement);\n          if (name != undefined) {\n            newPath = `${path}[:]{${name}==${arrayElement[name]}}`;\n          } else {\n            // Use `i` here instead of `index`, since it's only different when `i` is negative,\n            // and in that case it's probably more useful to show to the user how many elements\n            // from the end of the array this data is, since they clearly are thinking in that way\n            // (otherwise they wouldn't have chosen a negative slice).\n            newPath = `${path}[${i}]`;\n          }\n        } else {\n          // Use `i` here instead of `index`, since it's only different when `i` is negative,\n          // and in that case it's probably more useful to show to the user how many elements\n          // from the end of the array this data is, since they clearly are thinking in that way\n          // (otherwise they wouldn't have chosen a negative slice).\n          newPath = `${path}[${i}]`;\n        }\n        traverse(\n          arrayElement,\n          pathIndex + 1,\n          newPath,\n          !structureIsJson && structureItem.structureType === \"array\"\n            ? structureItem.next\n            : structureItem, // Structure is already JSON.\n        );\n      }\n    } else if (pathItem.type === \"filter\") {\n      if (filterMatches(pathItem, value)) {\n        traverse(value, pathIndex + 1, `${path}{${pathItem.repr}}`, structureItem);\n      }\n    } else if (structureIsJson && pathItem.type === \"name\") {\n      // Use getField just in case.\n      traverse(value[pathItem.name], pathIndex + 1, `${path}.${pathItem.repr}`, {\n        structureType: \"primitive\",\n        primitiveType: \"json\",\n        datatype: \"\",\n      });\n    } else {\n      console.warn(\n        `Unknown pathItem.type ${pathItem.type} for structureType: ${structureItem.structureType}`,\n      );\n    }\n  }\n  const structure: MessagePathStructureItemMessage | undefined =\n    // If the topic has no schema, we can at least allow accessing the root message\n    topic.schemaName == undefined\n      ? { structureType: \"message\", datatype: \"\", nextByName: {} }\n      : structures[topic.schemaName];\n  if (structure) {\n    traverse(message.message, 0, quoteTopicNameIfNeeded(filledInPath.topicName), structure);\n  }\n  return queriedData;\n}\n\nexport type MessageAndData = {\n  messageEvent: MessageEvent<unknown>;\n  queriedData: MessagePathDataItem[];\n};\n\nexport type MessageDataItemsByPath = {\n  readonly [key: string]: readonly MessageAndData[];\n};\n\nexport function useDecodeMessagePathsForMessagesByTopic(\n  paths: string[],\n): (messagesByTopic: {\n  [topicName: string]: readonly MessageEvent<unknown>[];\n}) => MessageDataItemsByPath {\n  const memoizedPaths = useShallowMemo<string[]>(paths);\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(memoizedPaths);\n  // Note: Let callers define their own memoization scheme for messagesByTopic. For regular playback\n  // useMemo might be appropriate, but weakMemo will likely better for blocks.\n  return useCallback(\n    (messagesByTopic) => {\n      const obj: { [path: string]: MessageAndData[] } = {};\n      for (const path of memoizedPaths) {\n        // Create an array for invalid paths, and valid paths with entries in messagesByTopic\n        const rosPath = parseRosPath(path);\n        if (!rosPath) {\n          obj[path] = [];\n          continue;\n        }\n        const messages = messagesByTopic[rosPath.topicName];\n        if (!messages) {\n          // For the playback pipeline messagesByTopic will always include an entry for every topic.\n          // For the blocks, missing entries are semantically interesting, and should result in\n          // missing (not empty) entries in the output so that information is communicated\n          // downstream.\n          continue;\n        }\n\n        const messagesForThisPath: MessageAndData[] = [];\n        obj[path] = messagesForThisPath;\n\n        for (const message of messages) {\n          // Add the item (if it exists) to the array.\n          const queriedData = cachedGetMessagePathDataItems(path, message);\n          if (queriedData) {\n            messagesForThisPath.push({ messageEvent: message, queriedData });\n          }\n        }\n      }\n      return obj;\n    },\n    [memoizedPaths, cachedGetMessagePathDataItems],\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nexport function sanitizeAccessorPath(accessorPath: string): string {\n  return accessorPath.replace(/\\./g, \"-\");\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport MinusIcon from \"@mui/icons-material/IndeterminateCheckBoxOutlined\";\nimport { IconButton } from \"@mui/material\";\nimport { PropsWithChildren } from \"react\";\nimport { Row } from \"react-table\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { sanitizeAccessorPath } from \"./sanitizeAccessorPath\";\n\nconst useStyles = makeStyles()((theme) => ({\n  objectCell: {\n    fontStyle: \"italic\",\n    cursor: \"pointer\",\n  },\n  iconButton: {\n    marginTop: theme.spacing(-0.5),\n    marginLeft: theme.spacing(-0.5),\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\ntype TableCellProps = {\n  row: Row;\n  accessorPath: string;\n};\n\nexport default function TableCell({\n  row,\n  accessorPath,\n  children,\n}: PropsWithChildren<TableCellProps>): JSX.Element {\n  const { classes } = useStyles();\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const toggleIsExpanded = React.useCallback(() => setIsExpanded((expanded) => !expanded), []);\n\n  if (row.isExpanded || isExpanded) {\n    return (\n      <div>\n        {isExpanded && (\n          <IconButton size=\"small\" onClick={toggleIsExpanded} className={classes.iconButton}>\n            <MinusIcon fontSize=\"small\" />\n          </IconButton>\n        )}\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <span\n      className={classes.objectCell}\n      data-testid={`expand-cell-${sanitizeAccessorPath(accessorPath)}-${row.index}`}\n      onClick={toggleIsExpanded}\n    >\n      Object\n    </span>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\n/// <reference types=\"./react-table-config\" />\n\nimport PlusIcon from \"@mui/icons-material/AddBoxOutlined\";\nimport MinusIcon from \"@mui/icons-material/IndeterminateCheckBoxOutlined\";\nimport KeyboardArrowLeftIcon from \"@mui/icons-material/KeyboardArrowLeft\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\nimport { Container, IconButton, MenuItem, Select, Typography } from \"@mui/material\";\nimport { noop } from \"lodash\";\nimport {\n  useTable,\n  usePagination,\n  useExpanded,\n  useSortBy,\n  Column,\n  ColumnWithLooseAccessor,\n} from \"react-table\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\n\nimport TableCell from \"./TableCell\";\nimport { sanitizeAccessorPath } from \"./sanitizeAccessorPath\";\n\nconst useStyles = makeStyles<void, \"tableData\" | \"tableHeader\">()((theme, _params, classes) => ({\n  table: {\n    border: \"none\",\n    width: \"100%\",\n    borderCollapse: \"collapse\",\n    borderSpacing: 0,\n  },\n  tableRow: {\n    svg: { opacity: 0.6 },\n\n    \"&:nth-child(even)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n    \"&:hover\": {\n      backgroundColor: theme.palette.action.focus,\n\n      [`.${classes.tableData}`]: {\n        backgroundColor: theme.palette.action.hover,\n        cursor: \"pointer\",\n      },\n      svg: { opacity: 0.8 },\n    },\n\n    [`.${classes.tableHeader}:first-of-type`]: {\n      paddingTop: theme.spacing(0.5),\n      paddingBottom: theme.spacing(0.5),\n    },\n  },\n  tableData: {\n    padding: `${theme.spacing(0.5)} !important`,\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\",\n    verticalAlign: \"top\",\n    border: `1px solid ${theme.palette.divider}`,\n    lineHeight: \"1.3em\",\n  },\n  tableHeader: {\n    color: theme.palette.text.primary,\n    verticalAlign: \"top\",\n    border: `1px solid ${theme.palette.divider}`,\n    lineHeight: \"1.3em\",\n    borderLeftColor: \"transparent\",\n    borderRightColor: \"transparent\",\n    padding: theme.spacing(0.5),\n    fontWeight: \"bold !important\",\n    cursor: \"pointer\",\n    width: \"auto\",\n    textAlign: \"left\",\n\n    \"&#expander\": { width: 28 },\n  },\n  sortAsc: {\n    borderBottomColor: theme.palette.primary.main,\n  },\n  sortDesc: {\n    borderTopColor: theme.palette.primary.main,\n  },\n  iconButton: {\n    margin: theme.spacing(-0.5),\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n}));\n\nfunction getColumnsFromObject(\n  val: { toJSON?: () => Record<string, unknown> },\n  accessorPath: string,\n  iconButtonClasses: string,\n): Column[] {\n  const obj = val.toJSON?.() ?? val;\n  const columns = [\n    ...Object.keys(obj).map((accessor) => {\n      const id = accessorPath.length !== 0 ? `${accessorPath}.${accessor}` : accessor;\n      return {\n        Header: accessor,\n        accessor,\n        id,\n        Cell({ value, row }) {\n          if (Array.isArray(value) && typeof value[0] !== \"object\") {\n            return JSON.stringify(value);\n          }\n\n          // eslint-disable-next-line no-restricted-syntax\n          if (typeof value === \"object\" && value != null) {\n            return (\n              <TableCell row={row} accessorPath={id}>\n                <Table value={value} accessorPath={accessorPath} />\n              </TableCell>\n            );\n          }\n\n          // In case the value is null.\n          return `${value}`;\n        },\n      } as Column;\n    }),\n  ];\n\n  const Cell: ColumnWithLooseAccessor[\"Cell\"] = ({ row }) => (\n    <IconButton\n      className={iconButtonClasses}\n      {...row.getToggleRowExpandedProps()}\n      size=\"small\"\n      data-testid={`expand-row-${row.index}`}\n    >\n      {row.isExpanded ? <MinusIcon fontSize=\"small\" /> : <PlusIcon fontSize=\"small\" />}\n    </IconButton>\n  );\n\n  if (accessorPath.length === 0) {\n    columns.unshift({\n      id: \"expander\",\n      Cell,\n    });\n  }\n\n  return columns;\n}\n\nexport default function Table({\n  value,\n  accessorPath,\n}: {\n  value: unknown;\n  accessorPath: string;\n}): JSX.Element {\n  const isNested = accessorPath.length > 0;\n  const { classes, cx } = useStyles();\n\n  const columns = React.useMemo(() => {\n    if (\n      // eslint-disable-next-line no-restricted-syntax\n      value == null ||\n      typeof value !== \"object\" ||\n      // eslint-disable-next-line no-restricted-syntax\n      (Array.isArray(value) && typeof value[0] !== \"object\" && value[0] != null)\n    ) {\n      return [];\n    }\n\n    const maybeMessage = Array.isArray(value) ? value[0] ?? {} : value;\n\n    // Strong assumption about structure of data.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return getColumnsFromObject(maybeMessage, accessorPath, classes.iconButton);\n  }, [accessorPath, classes.iconButton, value]);\n\n  const data = React.useMemo(() => (Array.isArray(value) ? value : [value]), [value]);\n\n  const tableInstance = useTable(\n    {\n      columns,\n      data,\n      autoResetExpanded: false,\n      initialState: { pageSize: 30 },\n    },\n    useSortBy,\n    useExpanded,\n    !isNested ? usePagination : noop,\n  );\n\n  if (\n    typeof value !== \"object\" ||\n    // eslint-disable-next-line no-restricted-syntax\n    value == null ||\n    (!isNested && Array.isArray(value) && typeof value[0] !== \"object\")\n  ) {\n    return (\n      <EmptyState>\n        Cannot render primitive values in a table. Try using the Raw Messages panel instead.\n      </EmptyState>\n    );\n  }\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    rows,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = tableInstance;\n\n  return (\n    <>\n      <table className={classes.table} {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, i) => {\n            return (\n              <tr className={classes.tableRow} {...headerGroup.getHeaderGroupProps()} key={i}>\n                {headerGroup.headers.map((column) => {\n                  return (\n                    <th\n                      className={cx(classes.tableHeader, {\n                        [classes.sortAsc]: column.isSorted && !(column.isSortedDesc ?? false),\n                        [classes.sortDesc]: column.isSorted && (column.isSortedDesc ?? false),\n                      })}\n                      id={column.id}\n                      {...column.getHeaderProps(column.getSortByToggleProps())}\n                      key={column.id}\n                      data-testid={`column-header-${sanitizeAccessorPath(column.id)}`}\n                    >\n                      {column.render(\"Header\")}\n                    </th>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {(!isNested ? page : rows).map((row) => {\n            prepareRow(row);\n            return (\n              <tr className={classes.tableRow} {...row.getRowProps()} key={row.index}>\n                {row.cells.map((cell, i) => {\n                  return (\n                    <td className={classes.tableData} {...cell.getCellProps()} key={i}>\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {!isNested && (\n        <Container maxWidth=\"xs\" disableGutters>\n          <Stack\n            direction=\"row\"\n            flexWrap=\"wrap\"\n            gap={1}\n            paddingX={0.5}\n            paddingTop={0.5}\n            alignItems=\"center\"\n          >\n            <IconButton onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n              <KeyboardDoubleArrowLeftIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => previousPage()} disabled={!canPreviousPage}>\n              <KeyboardArrowLeftIcon fontSize=\"small\" />\n            </IconButton>\n            <Typography flex=\"auto\" variant=\"inherit\" align=\"center\" noWrap>\n              Page{\" \"}\n              <strong>\n                {pageIndex + 1} of {pageOptions.length}\n              </strong>\n            </Typography>\n            <IconButton onClick={() => nextPage()} disabled={!canNextPage}>\n              <KeyboardArrowRightIcon fontSize=\"small\" />\n            </IconButton>\n            <IconButton onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n              <KeyboardDoubleArrowRightIcon fontSize=\"small\" />\n            </IconButton>\n            <Select\n              value={pageSize}\n              size=\"small\"\n              onChange={(e) => setPageSize(Number(e.target.value))}\n              MenuProps={{ MenuListProps: { dense: true } }}\n            >\n              {[10, 20, 30, 40, 50].map((size) => (\n                <MenuItem key={size} value={size}>{`Show ${size}`}</MenuItem>\n              ))}\n            </Select>\n          </Stack>\n        </Container>\n      )}\n    </>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2020-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Box, Stack } from \"@mui/material\";\n\nimport { useMessagesByTopic } from \"@foxglove/studio-base/PanelAPI\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport MessagePathInput from \"@foxglove/studio-base/components/MessagePathSyntax/MessagePathInput\";\nimport { RosPath } from \"@foxglove/studio-base/components/MessagePathSyntax/constants\";\nimport parseRosPath from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport { useCachedGetMessagePathDataItems } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport Table from \"./Table\";\n\ntype Config = { topicPath: string };\ntype Props = { config: Config; saveConfig: SaveConfig<Config> };\n\nfunction TablePanel({ config, saveConfig }: Props) {\n  const { topicPath } = config;\n  const onTopicPathChange = React.useCallback(\n    (newTopicPath: string) => {\n      saveConfig({ topicPath: newTopicPath });\n    },\n    [saveConfig],\n  );\n\n  const topicRosPath: RosPath | undefined = React.useMemo(\n    () => parseRosPath(topicPath),\n    [topicPath],\n  );\n  const topicName = topicRosPath?.topicName ?? \"\";\n  const msgs = useMessagesByTopic({ topics: [topicName], historySize: 1 })[topicName];\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems([topicPath]);\n  const msg = msgs?.[0];\n  const cachedMessages = msg ? cachedGetMessagePathDataItems(topicPath, msg) ?? [] : [];\n  const firstCachedMessage = cachedMessages[0];\n\n  return (\n    <Stack flex=\"auto\" overflow=\"hidden\" position=\"relative\">\n      <PanelToolbar>\n        <Box width=\"100%\" lineHeight=\"20px\">\n          <MessagePathInput\n            index={0}\n            path={topicPath}\n            onChange={onTopicPathChange}\n            inputStyle={{ height: 20 }}\n          />\n        </Box>\n      </PanelToolbar>\n      {topicPath.length === 0 && <EmptyState>No topic selected</EmptyState>}\n      {topicPath.length !== 0 && cachedMessages.length === 0 && (\n        <EmptyState>Waiting for next message</EmptyState>\n      )}\n      {topicPath.length !== 0 && firstCachedMessage && (\n        <Stack overflow=\"auto\" fontFamily={fonts.MONOSPACE}>\n          <Table value={firstCachedMessage.value} accessorPath=\"\" />\n        </Stack>\n      )}\n    </Stack>\n  );\n}\n\nTablePanel.panelType = \"Table\";\nTablePanel.defaultConfig = {\n  topicPath: \"\",\n};\n\nexport default Panel(TablePanel);\n"],"names":["filterMatches","filter","value","currentValue","name","useChangeDetector","deps","initiallyTrue","ref","changed","useCachedGetMessagePathDataItems","paths","providerTopics","datatypes","PanelAPI","globalVariables","useGlobalVariables","memoizedPaths","unmemoizedFilledInPaths","filledInPaths","path","rosPath","parseRosPath","fillInGlobalVariablesInPath","memoizedFilledInPaths","useDeepMemo","unmemoizedRelevantTopics","topicsByName","seenNames","result","topic","relevantTopics","unmemoizedRelevantDatatypes","relevantDatatypes","addRelevantDatatype","datatypeName","seen","type","field","schemaName","cachesByPath","current","filledInPath","message","currentPath","weakMap","messagePathDataItems","getMessagePathDataItems","messagePathPart","start","end","variable","structures","item","queriedData","traverse","pathIndex","structureItem","pathItem","nextPathItem","structureIsJson","next","actualNext","startIdx","endIdx","arrayLength","i","index","arrayElement","newPath","id","constantName","prevPathItem","fieldName","structure","useDecodeMessagePathsForMessagesByTopic","cachedGetMessagePathDataItems","messagesByTopic","obj","messages","messagesForThisPath","sanitizeAccessorPath","accessorPath","useStyles","theme","TableCell","row","children","classes","isExpanded","setIsExpanded","React","toggleIsExpanded","expanded","IconButton","_params","getColumnsFromObject","val","iconButtonClasses","columns","accessor","Table","Cell","isNested","cx","maybeMessage","data","tableInstance","EmptyState","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","rows","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","pageIndex","pageSize","headerGroup","column","cell","Container","KeyboardDoubleArrowLeft","KeyboardArrowLeft","Typography","KeyboardArrowRight","KeyboardDoubleArrowRight","Select","e","size","MenuItem","TablePanel","config","saveConfig","topicPath","onTopicPathChange","newTopicPath","topicName","msgs","msg","cachedMessages","firstCachedMessage","Stack","PanelToolbar","Box","MessagePathInput","Panel"],"sourceRoot":""}