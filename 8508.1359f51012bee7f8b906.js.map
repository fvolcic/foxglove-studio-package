{"version":3,"file":"8508.1359f51012bee7f8b906.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/MessagePathSyntax/useMessageDataItem.ts","webpack:///../../packages/studio-base/src/hooks/useDeepChangeDetector.ts","webpack:///../../packages/studio-base/src/panels/LegacyPlot/Tooltip.tsx","webpack:///../../packages/studio-base/src/panels/LegacyPlot/helpers.ts","webpack:///../../packages/studio-base/src/panels/LegacyPlot/index.tsx"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useCallback, useMemo } from \"react\";\n\nimport { useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\n\nimport parseRosPath from \"./parseRosPath\";\nimport {\n  useCachedGetMessagePathDataItems,\n  MessageAndData,\n} from \"./useCachedGetMessagePathDataItems\";\n\ntype Options = {\n  historySize: number;\n};\n\ntype ReducedValue = {\n  // Matched message (events) oldest message first\n  matches: MessageAndData[];\n\n  // The latest set of message events recevied to addMessages\n  messageEvents: readonly Readonly<MessageEvent<unknown>>[];\n\n  // The path used to match these messages.\n  path: string;\n};\n\n/**\n * Return an array of MessageAndData[] for matching messages on @param path.\n *\n * The first array item is the oldest matched message, and the last item is the newest.\n *\n * The `historySize` option configures how many matching messages to keep. The default is 1.\n */\nexport function useMessageDataItem(path: string, options?: Options): ReducedValue[\"matches\"] {\n  const { historySize = 1 } = options ?? {};\n  const rosPath = useMemo(() => parseRosPath(path), [path]);\n  const topics = useMemo(() => (rosPath ? [rosPath.topicName] : []), [rosPath]);\n\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems([path]);\n\n  const addMessages = useCallback(\n    (prevValue: ReducedValue, messageEvents: Readonly<MessageEvent<unknown>[]>): ReducedValue => {\n      if (messageEvents.length === 0) {\n        return prevValue;\n      }\n\n      const newMatches: MessageAndData[] = [];\n\n      // Iterate backwards since our default history size is 1 and we might not need to visit all messages\n      // This does mean we need to flip newMatches around since we want to store older items first\n      for (let i = messageEvents.length - 1; i >= 0 && newMatches.length < historySize; --i) {\n        const messageEvent = messageEvents[i]!;\n        const queriedData = cachedGetMessagePathDataItems(path, messageEvent);\n        if (queriedData && queriedData.length > 0) {\n          newMatches.push({ messageEvent, queriedData });\n        }\n      }\n\n      // We want older items to be first in the array. Since we iterated backwards\n      // we reverse the matches.\n      const reversed = newMatches.reverse();\n      if (newMatches.length === historySize) {\n        return {\n          matches: reversed,\n          messageEvents,\n          path,\n        };\n      }\n\n      const prevMatches = prevValue.matches;\n      return {\n        matches: prevMatches.concat(reversed).slice(-historySize),\n        messageEvents,\n        path,\n      };\n    },\n    [cachedGetMessagePathDataItems, historySize, path],\n  );\n\n  const restore = useCallback(\n    (prevValue?: ReducedValue): ReducedValue => {\n      if (!prevValue) {\n        return {\n          matches: [],\n          messageEvents: [],\n          path,\n        };\n      }\n\n      // re-filter the previous batch of messages\n      const newMatches: MessageAndData[] = [];\n      for (const messageEvent of prevValue.messageEvents) {\n        const queriedData = cachedGetMessagePathDataItems(path, messageEvent);\n        if (queriedData && queriedData.length > 0) {\n          newMatches.push({ messageEvent, queriedData });\n        }\n      }\n\n      // Return a new message set if we have matching messages or this is a different path\n      // than the path used to fetch the previous set of messages.\n      if (newMatches.length > 0 || path !== prevValue.path) {\n        return {\n          matches: newMatches.slice(-historySize),\n          messageEvents: prevValue.messageEvents,\n          path,\n        };\n      }\n\n      return prevValue;\n    },\n    [cachedGetMessagePathDataItems, historySize, path],\n  );\n\n  const reducedValue = useMessageReducer<ReducedValue>({\n    topics,\n    addMessages,\n    restore,\n  });\n\n  return reducedValue.matches;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { isEqual } from \"lodash\";\nimport { useRef } from \"react\";\n\n// Similar to useChangeDetector, but using deep equality check\nexport default function useDeepChangeDetector(\n  deps: unknown[],\n  { initiallyTrue }: { initiallyTrue: boolean },\n): boolean {\n  const ref = useRef(initiallyTrue ? undefined : deps);\n  const changed = !isEqual(ref.current, deps);\n  ref.current = deps;\n  return changed;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\ntype Position = { x: number; y: number };\ntype TooltipProps = {\n  datapoints: Position[];\n};\n\nexport const TwoDimensionalTooltip = (props: TooltipProps): JSX.Element => {\n  const { datapoints } = props;\n  return (\n    <div>\n      {datapoints\n        .sort((a, b) => b.y - a.y)\n        .map(({ x, y }, i) => {\n          return (\n            <div key={i} style={{ padding: \"4px 0\", display: \"flex\", alignItems: \"center\" }}>\n              <div>\n                {x}, {y}\n              </div>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nexport function safeParseFloat(val: string | undefined): number {\n  if (val == undefined) {\n    return Number.NaN;\n  }\n\n  return parseFloat(val);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2019-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Button, Fade, Tooltip, useTheme } from \"@mui/material\";\nimport { ChartOptions, ScaleOptions } from \"chart.js\";\nimport { flatten, pick, uniq } from \"lodash\";\nimport { ComponentProps, useCallback, useMemo, useState } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport type { ZoomOptions } from \"@foxglove/chartjs-plugin-zoom/types/options\";\nimport { filterMap } from \"@foxglove/den/collection\";\nimport ChartComponent from \"@foxglove/studio-base/components/Chart\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport KeyListener from \"@foxglove/studio-base/components/KeyListener\";\nimport MessagePathInput from \"@foxglove/studio-base/components/MessagePathSyntax/MessagePathInput\";\nimport { useMessageDataItem } from \"@foxglove/studio-base/components/MessagePathSyntax/useMessageDataItem\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport useDeepChangeDetector from \"@foxglove/studio-base/hooks/useDeepChangeDetector\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nimport { TwoDimensionalTooltip } from \"./Tooltip\";\nimport { safeParseFloat } from \"./helpers\";\n\nconst useStyles = makeStyles()((theme) => ({\n  resetButton: {\n    position: \"absolute\",\n    marginRight: theme.spacing(2.5),\n    marginBottom: theme.spacing(7),\n    bottom: 0,\n    right: 0,\n  },\n}));\n\nconst VALID_TYPES = [\"message\"];\nconst keysToPick = [\n  \"order\",\n  \"label\",\n  \"backgroundColor\",\n  \"borderColor\",\n  \"borderDash\",\n  \"borderWidth\",\n  \"pointBackgroundColor\",\n  \"pointBorderColor\",\n  \"pointBorderWidth\",\n  \"pointRadius\",\n  \"pointStyle\",\n  \"lineTension\",\n  \"data\",\n];\n\nconst messagePathInputStyle = { height: \"100%\" };\n\ntype Path = { value: string };\ntype Config = {\n  path: Path;\n  minXVal?: string;\n  maxXVal?: string;\n  minYVal?: string;\n  maxYVal?: string;\n  pointRadiusOverride?: string;\n};\ntype Props = {\n  config: Config;\n  saveConfig: SaveConfig<Config>;\n  onFinishRender?: () => void;\n};\nexport type Line = {\n  order?: number;\n  label: string;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderDash?: number[];\n  borderWidth?: number;\n  pointBackgroundColor?: string;\n  pointBorderColor?: string;\n  pointBorderWidth?: number;\n  pointRadius?: number;\n  pointStyle?:\n    | \"circle\"\n    | \"cross\"\n    | \"crossRot\"\n    | \"dash\"\n    | \"line\"\n    | \"rect\"\n    | \"rectRounded\"\n    | \"rectRot\"\n    | \"star\"\n    | \"triangle\";\n  lineTension?: number;\n  data: { x: number; y: number }[];\n};\n\ntype Data = ComponentProps<typeof ChartComponent>[\"data\"];\n\nexport type PlotMessage = {\n  lines: Line[];\n  points?: Line[];\n  polygons?: Line[];\n  title?: string;\n  yAxisLabel?: string;\n  xAxisLabel?: string;\n  gridColor?: string;\n};\n\nfunction TwoDimensionalPlot(props: Props) {\n  const { config, saveConfig, onFinishRender } = props;\n  const { path, minXVal, maxXVal, minYVal, maxYVal, pointRadiusOverride } = config;\n\n  const theme = useTheme();\n  const { classes } = useStyles();\n  const [hasUserPannedOrZoomed, setHasUserPannedOrZoomed] = React.useState<boolean>(false);\n  const [hasVerticalExclusiveZoom, setHasVerticalExclusiveZoom] = React.useState<boolean>(false);\n  const [hasBothAxesZoom, setHasBothAxesZoom] = React.useState<boolean>(false);\n\n  const matchedMessages = useMessageDataItem(path.value);\n  const message = matchedMessages[0]?.queriedData[0]?.value as PlotMessage | undefined;\n\n  const { title, yAxisLabel, xAxisLabel, gridColor = theme.palette.divider } = message ?? {};\n\n  const datasets = useMemo<Data[\"datasets\"]>(() => {\n    if (!message) {\n      return [];\n    }\n\n    const { lines = [], points = [], polygons = [] } = message;\n\n    const linesDatasets = filterMap(lines, (line) => {\n      const { data, ...picked } = pick(line, keysToPick);\n      if (data == undefined) {\n        return undefined;\n      }\n\n      // since message might be a lazy message, we need to read the individual x/y fields from each item\n      const dataPoints = data.map((item) => ({ x: item.x, y: item.y }));\n      const dataset = { data: dataPoints, showLine: true, fill: false, ...picked };\n      if (pointRadiusOverride != undefined) {\n        dataset.pointRadius = parseFloat(pointRadiusOverride);\n      }\n\n      return dataset;\n    });\n\n    const pointsDatasets = filterMap(points, (point) => {\n      const { data, ...picked } = pick(point, keysToPick);\n      if (data == undefined) {\n        return undefined;\n      }\n\n      // since message might be a lazy message, we need to read the individual x/y fields from each item\n      const dataPoints = data.map((item) => ({ x: item.x, y: item.y }));\n      const dataset = { data: dataPoints, showLine: true, fill: false, ...picked };\n      if (pointRadiusOverride != undefined) {\n        dataset.pointRadius = parseFloat(pointRadiusOverride);\n      }\n\n      return dataset;\n    });\n\n    const polygonDatasets = filterMap(polygons, (polygon) => {\n      const { data, ...picked } = pick(polygon, keysToPick);\n      if (data == undefined) {\n        return undefined;\n      }\n\n      // since message might be a lazy message, we need to read the individual x/y fields from each item\n      const dataPoints = data.map((item) => ({ x: item.x, y: item.y }));\n      const closedData =\n        dataPoints[0] != undefined ? dataPoints.concat([dataPoints[0]]) : dataPoints;\n      const dataset = {\n        data: closedData,\n        fill: true,\n        pointRadius: 0,\n        showLine: true,\n        lineTension: 0,\n        ...picked,\n      };\n\n      return dataset;\n    });\n\n    const allDatasets = [...linesDatasets, ...pointsDatasets, ...polygonDatasets];\n    return allDatasets.sort((a, b) => (b.order ?? 0) - (a.order ?? 0));\n  }, [message, pointRadiusOverride]);\n\n  const { allXs, allYs } = useMemo(() => {\n    const allPoints = filterMap(flatten(datasets.map((dataset) => dataset.data)), (pt) =>\n      pt == undefined ? undefined : pt,\n    );\n    return {\n      allXs: allPoints.map(({ x }) => x),\n      allYs: allPoints.map(({ y }) => y),\n    };\n  }, [datasets]);\n\n  const getBufferedMinMax = useCallback((allVals: number[]) => {\n    const minVal = Math.min(...allVals);\n    const maxVal = Math.max(...allVals);\n    const diff = maxVal - minVal;\n    return {\n      min: diff === 0 ? minVal - 1 : minVal - diff * 0.05,\n      max: diff === 0 ? maxVal + 1 : maxVal + diff * 0.05,\n    };\n  }, []);\n\n  const yScale = useMemo<ScaleOptions>(() => {\n    const min = safeParseFloat(minYVal);\n    const max = safeParseFloat(maxYVal);\n    const minMax = hasUserPannedOrZoomed\n      ? undefined\n      : {\n          min: !isNaN(min) ? min : getBufferedMinMax(allYs).min,\n          max: !isNaN(max) ? max : getBufferedMinMax(allYs).max,\n        };\n    return {\n      grid: { color: gridColor },\n      title: { display: yAxisLabel != undefined, text: yAxisLabel },\n      ...minMax,\n    };\n  }, [allYs, getBufferedMinMax, gridColor, hasUserPannedOrZoomed, maxYVal, minYVal, yAxisLabel]);\n\n  const xScale = useMemo<ScaleOptions>(() => {\n    const min = safeParseFloat(minXVal);\n    const max = safeParseFloat(maxXVal);\n    const minMax = hasUserPannedOrZoomed\n      ? undefined\n      : {\n          min: !isNaN(min) ? min : getBufferedMinMax(allXs).min,\n          max: !isNaN(max) ? max : getBufferedMinMax(allXs).max,\n        };\n\n    return {\n      grid: { color: gridColor },\n      title: { display: xAxisLabel != undefined, text: xAxisLabel },\n      ...minMax,\n    };\n  }, [allXs, getBufferedMinMax, gridColor, hasUserPannedOrZoomed, maxXVal, minXVal, xAxisLabel]);\n\n  const zoomMode = useMemo<ZoomOptions[\"mode\"]>(() => {\n    if (hasVerticalExclusiveZoom) {\n      return \"y\";\n    } else if (hasBothAxesZoom) {\n      return \"xy\";\n    }\n    return \"x\";\n  }, [hasBothAxesZoom, hasVerticalExclusiveZoom]);\n\n  const options = useMemo<ChartOptions>(\n    () => ({\n      scales: {\n        y: yScale,\n        x: xScale,\n      },\n      color: theme.palette.text.secondary,\n      animation: { duration: 0 },\n      plugins: {\n        title: {\n          display: title != undefined,\n          text: title,\n          color: theme.palette.text.primary,\n        },\n        tooltip: {\n          intersect: false,\n          mode: \"nearest\",\n          enabled: false, // Disable native tooltips since we use custom ones.\n        },\n        datalabels: {\n          display: false,\n        },\n        legend: { display: false },\n        zoom: {\n          zoom: {\n            enabled: true,\n            mode: zoomMode,\n            sensitivity: 3,\n            speed: 0.1,\n          },\n          pan: {\n            mode: \"xy\",\n            enabled: true,\n            speed: 20,\n            threshold: 10,\n          },\n        },\n      },\n    }),\n    [theme, title, xScale, yScale, zoomMode],\n  );\n\n  const onScaleBoundsUpdate = useCallback((_: unknown, opt: { userInteraction: boolean }) => {\n    if (opt.userInteraction) {\n      setHasUserPannedOrZoomed(true);\n    }\n  }, []);\n\n  const [activeTooltip, setActiveTooltip] = useState<{\n    x: number;\n    y: number;\n    data: { x: number; y: number }[];\n  }>();\n\n  const tooltipElement = useMemo(() => {\n    return <TwoDimensionalTooltip datapoints={activeTooltip?.data ?? []} />;\n  }, [activeTooltip?.data]);\n\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const {\n    width = 0,\n    height = 0,\n    ref: resizeRef,\n  } = useResizeDetector<HTMLDivElement>({\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  type CallbackType = NonNullable<ComponentProps<typeof ChartComponent>[\"onHover\"]>;\n  const onHover = useCallback<CallbackType>(\n    (elements) => {\n      const first = elements[0];\n      if (!first) {\n        setActiveTooltip(undefined);\n        return;\n      }\n\n      const containerRect = resizeRef.current?.getBoundingClientRect();\n      if (containerRect) {\n        const data = filterMap(elements, (element) => element.data);\n        setActiveTooltip({\n          x: containerRect.left + first.view.x,\n          y: containerRect.top + first.view.y,\n          data,\n        });\n      }\n    },\n    [resizeRef],\n  );\n\n  const onResetZoom = useCallback(() => {\n    setHasUserPannedOrZoomed(false);\n  }, [setHasUserPannedOrZoomed]);\n\n  if (\n    useDeepChangeDetector([pick(props.config, [\"minXVal\", \"maxXVal\", \"minYVal\", \"maxYVal\"])], {\n      initiallyTrue: false,\n    })\n  ) {\n    // Reset the view to the default when the default changes.\n    if (hasUserPannedOrZoomed) {\n      setHasUserPannedOrZoomed(false);\n    }\n  }\n\n  const keyDownHandlers = useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(true),\n      b: () => setHasBothAxesZoom(true),\n    }),\n    [],\n  );\n\n  const keyUphandlers = useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(false),\n      b: () => setHasBothAxesZoom(false),\n    }),\n    [setHasVerticalExclusiveZoom, setHasBothAxesZoom],\n  );\n\n  const onChange = useCallback<ComponentProps<typeof MessagePathInput>[\"onChange\"]>(\n    (value) => saveConfig({ path: { value } }),\n    [saveConfig],\n  );\n\n  if (uniq(datasets.map(({ label }) => label)).length !== datasets.length) {\n    throw new Error(\"2D Plot datasets do not have unique labels\");\n  }\n\n  const data = useMemo(() => {\n    return { datasets };\n  }, [datasets]);\n\n  const emptyMessage = datasets.length === 0;\n  const emptyStateElement = useMemo(() => {\n    if (!message) {\n      return <EmptyState>Waiting for next message</EmptyState>;\n    } else if (emptyMessage) {\n      return <EmptyState>No 2D Plot data (lines, points, polygons) to visualize</EmptyState>;\n    }\n\n    return undefined;\n  }, [emptyMessage, message]);\n\n  return (\n    <Stack flex=\"auto\" fullHeight>\n      <PanelToolbar>\n        <MessagePathInput\n          path={path.value}\n          onChange={onChange}\n          inputStyle={messagePathInputStyle}\n          validTypes={VALID_TYPES}\n          placeholder=\"Select topic messages with 2D Plot data to visualize\"\n          autoSize\n        />\n      </PanelToolbar>\n      <Stack\n        ref={resizeRef}\n        direction=\"row\"\n        flex=\"auto\"\n        fullWidth\n        overflow=\"hidden\"\n        position=\"relative\"\n      >\n        {emptyStateElement ? (\n          emptyStateElement\n        ) : (\n          <>\n            <Tooltip\n              open={activeTooltip != undefined}\n              placement=\"right\"\n              title={tooltipElement}\n              disableInteractive\n              TransitionComponent={Fade}\n              TransitionProps={{ timeout: 0 }}\n              PopperProps={{\n                anchorEl: {\n                  getBoundingClientRect: () => {\n                    return new DOMRect(activeTooltip?.x ?? 0, activeTooltip?.y ?? 0, 0, 0);\n                  },\n                },\n              }}\n            >\n              <div />\n            </Tooltip>\n            <ChartComponent\n              type=\"scatter\"\n              width={width}\n              height={height}\n              options={options}\n              isBoundsReset={false}\n              onScalesUpdate={onScaleBoundsUpdate}\n              onHover={onHover}\n              data={data}\n              onFinishRender={onFinishRender}\n            />\n            {hasUserPannedOrZoomed && (\n              <Button\n                className={classes.resetButton}\n                data-testid=\"reset-zoom\"\n                variant=\"contained\"\n                color=\"inherit\"\n                title=\"(shortcut: double-click)\"\n                onClick={onResetZoom}\n              >\n                Reset view\n              </Button>\n            )}\n            <KeyListener global keyDownHandlers={keyDownHandlers} keyUpHandlers={keyUphandlers} />\n          </>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n\nconst defaultConfig: Config = { path: { value: \"\" } };\n\nexport default Panel(\n  Object.assign(TwoDimensionalPlot, {\n    panelType: \"TwoDimensionalPlot\",\n    defaultConfig,\n  }),\n);\n"],"names":["useMessageDataItem","path","options","historySize","rosPath","topics","cachedGetMessagePathDataItems","addMessages","prevValue","messageEvents","newMatches","i","messageEvent","queriedData","reversed","restore","useDeepChangeDetector","deps","initiallyTrue","ref","changed","TwoDimensionalTooltip","props","datapoints","a","b","x","safeParseFloat","val","useStyles","theme","VALID_TYPES","keysToPick","messagePathInputStyle","TwoDimensionalPlot","config","saveConfig","onFinishRender","minXVal","maxXVal","minYVal","maxYVal","pointRadiusOverride","useTheme","classes","hasUserPannedOrZoomed","setHasUserPannedOrZoomed","React","hasVerticalExclusiveZoom","setHasVerticalExclusiveZoom","hasBothAxesZoom","setHasBothAxesZoom","message","title","yAxisLabel","xAxisLabel","gridColor","datasets","lines","points","polygons","linesDatasets","line","data","picked","dataset","item","pointsDatasets","point","polygonDatasets","polygon","dataPoints","allXs","allYs","allPoints","pt","y","getBufferedMinMax","allVals","minVal","maxVal","diff","yScale","min","max","minMax","xScale","zoomMode","onScaleBoundsUpdate","_","opt","activeTooltip","setActiveTooltip","tooltipElement","width","height","resizeRef","onHover","elements","first","containerRect","element","onResetZoom","keyDownHandlers","keyUphandlers","onChange","value","label","emptyMessage","emptyStateElement","EmptyState","Stack","PanelToolbar","MessagePathInput","Tooltip","Fade","Chart","Button","KeyListener","defaultConfig","Panel"],"sourceRoot":""}