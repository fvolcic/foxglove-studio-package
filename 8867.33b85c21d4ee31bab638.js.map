{"version":3,"file":"8867.33b85c21d4ee31bab638.js","mappings":"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","sources":["webpack:///../../node_modules/@mui/icons-material/PushPin.js","webpack:///../../packages/studio-base/src/util/toggle.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/DiagnosticSummary.tsx","webpack:///../../packages/studio-base/src/panels/diagnostics/settings.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/useDiagnostics.ts","webpack:///../../packages/studio-base/src/util/fuzzyFilter.ts","webpack:///../../packages/studio-base/src/panels/diagnostics/util.ts"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  fillRule: \"evenodd\",\n  d: \"M16 9V4h1c.55 0 1-.45 1-1s-.45-1-1-1H7c-.55 0-1 .45-1 1s.45 1 1 1h1v5c0 1.66-1.34 3-3 3v2h5.97v7l1 1 1-1v-7H19v-2c-1.66 0-3-1.34-3-3z\"\n}), 'PushPin');\nexports.default = _default;","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { reject } from \"lodash\";\n\n// toggles an item in an array based on reference equality\n// or an optional predicate to determine if the item should be toggled in/out\n// this function is pure - it always returns a new array\nexport default function toggle<T>(\n  array: T[],\n  item: T,\n  predicate: (arg0: T) => boolean = (el) => el === item,\n): T[] {\n  const newArray = reject(array, predicate);\n  if (newArray.length === array.length) {\n    newArray.push(item);\n  }\n  return newArray;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\nimport {\n  ListItem,\n  ListItemText,\n  styled as muiStyled,\n  ListItemButton,\n  MenuItem,\n  Select,\n  InputBase,\n  IconButton,\n} from \"@mui/material\";\nimport produce from \"immer\";\nimport { compact, set, uniq } from \"lodash\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { List, AutoSizer, ListRowProps } from \"react-virtualized\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { SettingsTreeAction } from \"@foxglove/studio\";\nimport { useDataSourceInfo } from \"@foxglove/studio-base/PanelAPI\";\nimport EmptyState from \"@foxglove/studio-base/components/EmptyState\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport { usePanelContext } from \"@foxglove/studio-base/components/PanelContext\";\nimport PanelToolbar from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport useDiagnostics from \"@foxglove/studio-base/panels/diagnostics/useDiagnostics\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport toggle from \"@foxglove/studio-base/util/toggle\";\n\nimport { buildSummarySettingsTree } from \"./settings\";\nimport {\n  DiagnosticSummaryConfig,\n  DiagnosticInfo,\n  DiagnosticStatusConfig,\n  getDiagnosticsByLevel,\n  filterAndSortDiagnostics,\n  LEVEL_NAMES,\n  KNOWN_LEVELS,\n} from \"./util\";\n\ntype NodeRowProps = {\n  info: DiagnosticInfo;\n  isPinned: boolean;\n  onClick: (info: DiagnosticInfo) => void;\n  onClickPin: (info: DiagnosticInfo) => void;\n};\n\nconst MESSAGE_COLORS: { [key: string]: string } = {\n  ok: \"success.main\",\n  warn: \"warning.main\",\n  error: \"error.main\",\n  stale: \"text.secondary\",\n};\n\nconst StyledListItemButton = muiStyled(ListItemButton, {\n  shouldForwardProp: (prop) => prop !== \"isPinned\",\n})<{\n  isPinned: boolean;\n}>(({ isPinned, theme }) => ({\n  padding: 0,\n\n  \".MuiIconButton-root\": {\n    visibility: isPinned ? \"visibile\" : \"hidden\",\n\n    \"&:hover\": {\n      backgroundColor: \"transparent\",\n    },\n  },\n  \".MuiListItemText-root\": {\n    gap: theme.spacing(1),\n    display: \"flex\",\n  },\n  \"&:hover .MuiIconButton-root\": {\n    visibility: \"visible\",\n  },\n}));\n\nconst StyledSelect = muiStyled(Select)(() => ({\n  \".MuiInputBase-input.MuiSelect-select.MuiInputBase-inputSizeSmall\": {\n    paddingTop: 0,\n    paddingBottom: 0,\n    minWidth: 40,\n  },\n  \".MuiListItemText-root\": {\n    marginTop: 0,\n    marginBottom: 0,\n  },\n}));\n\nconst NodeRow = React.memo(function NodeRow(props: NodeRowProps) {\n  const { info, isPinned, onClick, onClickPin } = props;\n\n  const handleClick = useCallback(() => {\n    onClick(info);\n  }, [onClick, info]);\n\n  const handleClickPin = useCallback(() => {\n    onClickPin(info);\n  }, [onClickPin, info]);\n\n  const levelName = LEVEL_NAMES[info.status.level];\n\n  return (\n    <ListItem dense disablePadding data-testid-diagnostic-row>\n      <StyledListItemButton disableGutters isPinned={isPinned} onClick={handleClick}>\n        <IconButton\n          size=\"small\"\n          onClick={(event) => {\n            handleClickPin();\n            event.stopPropagation();\n          }}\n        >\n          <PushPinIcon fontSize=\"small\" color={isPinned ? \"inherit\" : \"disabled\"} />\n        </IconButton>\n        <ListItemText\n          primary={info.displayName}\n          secondary={info.status.message}\n          secondaryTypographyProps={{\n            color: MESSAGE_COLORS[levelName ?? \"stale\"],\n          }}\n        />\n      </StyledListItemButton>\n    </ListItem>\n  );\n});\n\ntype Props = {\n  config: DiagnosticSummaryConfig;\n  saveConfig: SaveConfig<DiagnosticSummaryConfig>;\n};\n\nconst ALLOWED_DATATYPES: string[] = [\n  \"diagnostic_msgs/DiagnosticArray\",\n  \"diagnostic_msgs/msg/DiagnosticArray\",\n  \"ros.diagnostic_msgs.DiagnosticArray\",\n];\n\nfunction DiagnosticSummary(props: Props): JSX.Element {\n  const { config, saveConfig } = props;\n  const { topics } = useDataSourceInfo();\n  const { minLevel, topicToRender, pinnedIds, hardwareIdFilter, sortByLevel = true } = config;\n  const { openSiblingPanel } = usePanelContext();\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n\n  const togglePinned = useCallback(\n    (info: DiagnosticInfo) => {\n      saveConfig({ pinnedIds: toggle(pinnedIds, info.id) });\n    },\n    [pinnedIds, saveConfig],\n  );\n\n  const showDetails = useCallback(\n    (info: DiagnosticInfo) => {\n      openSiblingPanel({\n        panelType: \"DiagnosticStatusPanel\",\n        siblingConfigCreator: () =>\n          ({\n            selectedHardwareId: info.status.hardware_id,\n            selectedName: info.status.name,\n            topicToRender,\n            collapsedSections: [],\n          } as DiagnosticStatusConfig),\n        updateIfExists: true,\n      });\n    },\n    [topicToRender, openSiblingPanel],\n  );\n\n  const renderRow = useCallback(\n    // eslint-disable-next-line react/no-unused-prop-types\n    ({ item, key }: ListRowProps & { item: DiagnosticInfo }) => {\n      return (\n        <NodeRow\n          key={key}\n          info={item}\n          isPinned={pinnedIds.includes(item.id)}\n          onClick={showDetails}\n          onClickPin={togglePinned}\n        />\n      );\n    },\n    [pinnedIds, showDetails, togglePinned],\n  );\n\n  // Filter down all topics to those that conform to our supported datatypes\n  const availableTopics = useMemo(() => {\n    const filtered = topics\n      .filter(\n        (topic) => topic.schemaName != undefined && ALLOWED_DATATYPES.includes(topic.schemaName),\n      )\n      .map((topic) => topic.name);\n\n    // Keeps only the first occurrence of each topic.\n    return uniq([...filtered]);\n  }, [topics]);\n\n  // If the topicToRender is not in the availableTopics, then we should not try to use it\n  const diagnosticTopic = useMemo(() => {\n    return availableTopics.includes(topicToRender) ? topicToRender : undefined;\n  }, [availableTopics, topicToRender]);\n\n  const diagnostics = useDiagnostics(diagnosticTopic);\n\n  const summary = useMemo(() => {\n    if (diagnostics.size === 0) {\n      return (\n        <EmptyState>\n          Waiting for <code>{topicToRender}</code> messages\n        </EmptyState>\n      );\n    }\n    const pinnedNodes = filterMap(pinnedIds, (id) => {\n      const [_, trimmedHardwareId, name] = id.split(\"|\");\n      if (name == undefined || trimmedHardwareId == undefined) {\n        return;\n      }\n      const diagnosticsByName = diagnostics.get(trimmedHardwareId);\n      return diagnosticsByName?.get(name);\n    });\n\n    const nodesByLevel = getDiagnosticsByLevel(diagnostics);\n    const levels = Array.from(nodesByLevel.keys()).sort().reverse();\n    const sortedNodes = sortByLevel\n      ? ([] as DiagnosticInfo[]).concat(\n          ...levels.map((level) =>\n            filterAndSortDiagnostics(nodesByLevel.get(level) ?? [], hardwareIdFilter, pinnedIds),\n          ),\n        )\n      : filterAndSortDiagnostics(\n          ([] as DiagnosticInfo[]).concat(...nodesByLevel.values()),\n          hardwareIdFilter,\n          pinnedIds,\n        );\n\n    const nodes: DiagnosticInfo[] = [...compact(pinnedNodes), ...sortedNodes].filter(\n      ({ status }) => status.level >= minLevel,\n    );\n    if (nodes.length === 0) {\n      return ReactNull;\n    }\n    return (\n      <AutoSizer>\n        {({ height, width }) => (\n          <List\n            width={width}\n            height={height}\n            style={{ outline: \"none\" }}\n            rowHeight={30}\n            rowRenderer={(rowProps) => renderRow({ ...rowProps, item: nodes[rowProps.index]! })}\n            rowCount={nodes.length}\n            overscanRowCount={10}\n          />\n        )}\n      </AutoSizer>\n    );\n  }, [diagnostics, hardwareIdFilter, pinnedIds, renderRow, sortByLevel, minLevel, topicToRender]);\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action !== \"update\") {\n        return;\n      }\n\n      const { path, value } = action.payload;\n      saveConfig(produce<DiagnosticSummaryConfig>((draft) => set(draft, path.slice(1), value)));\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      nodes: buildSummarySettingsTree(config, topicToRender, availableTopics),\n    });\n  }, [actionHandler, availableTopics, config, topicToRender, updatePanelSettingsTree]);\n\n  return (\n    <Stack flex=\"auto\">\n      <PanelToolbar>\n        <Stack flex=\"auto\" direction=\"row\" gap={1}>\n          <StyledSelect\n            value={minLevel}\n            id=\"status-filter-menu\"\n            color=\"secondary\"\n            size=\"small\"\n            onChange={(event) => saveConfig({ minLevel: event.target.value as number })}\n            MenuProps={{ MenuListProps: { dense: true } }}\n          >\n            {KNOWN_LEVELS.map((level) => (\n              <MenuItem key={level} value={level}>\n                <ListItemText\n                  primary={LEVEL_NAMES[level]?.toUpperCase()}\n                  primaryTypographyProps={{\n                    variant: \"inherit\",\n                    color: MESSAGE_COLORS[LEVEL_NAMES[level] ?? \"stale\"],\n                  }}\n                />\n              </MenuItem>\n            ))}\n          </StyledSelect>\n          <InputBase\n            value={hardwareIdFilter}\n            placeholder=\"Filter\"\n            onChange={(e) => saveConfig({ hardwareIdFilter: e.target.value })}\n            style={{ flex: \"auto\", font: \"inherit\" }}\n          />\n        </Stack>\n      </PanelToolbar>\n      <Stack flex=\"auto\">{summary}</Stack>\n    </Stack>\n  );\n}\n\nconst defaultConfig: DiagnosticSummaryConfig = {\n  minLevel: 0,\n  pinnedIds: [],\n  hardwareIdFilter: \"\",\n  topicToRender: \"/diagnostics\",\n  sortByLevel: true,\n};\n\nexport default Panel(\n  Object.assign(DiagnosticSummary, {\n    panelType: \"DiagnosticSummary\",\n    defaultConfig,\n  }),\n);\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { SettingsTreeNodes } from \"@foxglove/studio\";\n\nimport { DiagnosticSummaryConfig } from \"./util\";\n\nexport function buildSummarySettingsTree(\n  config: DiagnosticSummaryConfig,\n  topicToRender: string,\n  availableTopics: readonly string[],\n): SettingsTreeNodes {\n  const topicOptions = availableTopics.map((topic) => ({ label: topic, value: topic }));\n  const topicIsAvailable = availableTopics.includes(topicToRender);\n  if (!topicIsAvailable) {\n    topicOptions.unshift({ value: topicToRender, label: topicToRender });\n  }\n  const topicError = topicIsAvailable ? undefined : `Topic ${topicToRender} is not available`;\n\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        topicToRender: {\n          label: \"Topic\",\n          input: \"select\",\n          value: topicToRender,\n          error: topicError,\n          options: topicOptions,\n        },\n        sortByLevel: { label: \"Sort by level\", input: \"boolean\", value: config.sortByLevel },\n      },\n    },\n  };\n}\n\nexport function buildStatusPanelSettingsTree(\n  topicToRender: string,\n  numericPrecision: number | undefined,\n  availableTopics: readonly string[],\n): SettingsTreeNodes {\n  const topicOptions = availableTopics.map((topic) => ({ label: topic, value: topic }));\n  const topicIsAvailable = availableTopics.includes(topicToRender);\n  if (!topicIsAvailable) {\n    topicOptions.unshift({ value: topicToRender, label: topicToRender });\n  }\n  const topicError = topicIsAvailable ? undefined : `Topic ${topicToRender} is not available`;\n\n  return {\n    general: {\n      label: \"General\",\n      fields: {\n        topicToRender: {\n          label: \"Topic\",\n          input: \"select\",\n          value: topicToRender,\n          error: topicError,\n          options: topicOptions,\n        },\n        numericPrecision: {\n          label: \"Numeric precision\",\n          input: \"number\",\n          min: 0,\n          max: 17,\n          precision: 0,\n          step: 1,\n          placeholder: \"auto\",\n          value: numericPrecision,\n        },\n      },\n    },\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useMemo } from \"react\";\n\nimport { useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport { MessageEvent } from \"@foxglove/studio-base/players/types\";\n\nimport { DiagnosticStatusArrayMsg, DiagnosticsById, computeDiagnosticInfo } from \"./util\";\n\ntype UseDiagnosticsResult = Map<string, DiagnosticsById>;\n\n// Exported for tests\nexport function addMessages(\n  prevResult: UseDiagnosticsResult,\n  msgEvents: readonly MessageEvent<unknown>[],\n): UseDiagnosticsResult {\n  // Mutates the previous value since there might be many diagnostic messages\n  let modified = false;\n  for (const msgEvent of msgEvents as MessageEvent<DiagnosticStatusArrayMsg>[]) {\n    const { header, status: statusArray }: DiagnosticStatusArrayMsg = msgEvent.message;\n\n    for (const status of statusArray) {\n      const info = computeDiagnosticInfo(status, header.stamp);\n      const hardwareId = status.hardware_id;\n      const hardwareDiagnosticsByName = prevResult.get(hardwareId);\n      if (hardwareDiagnosticsByName == undefined) {\n        modified = true;\n        prevResult.set(hardwareId, new Map([[status.name, info]]));\n      } else {\n        modified = true;\n        hardwareDiagnosticsByName.set(status.name, info);\n      }\n    }\n  }\n  // We shallow-copy the buffer when it changes to help users know when to rerender.\n  return modified ? new Map(prevResult) : prevResult;\n}\n\nconst EmptyMap = () => new Map();\n\nexport default function useDiagnostics(topic?: string): UseDiagnosticsResult {\n  const topics = useMemo(() => {\n    if (topic) {\n      return [topic];\n    }\n    return [];\n  }, [topic]);\n\n  return useMessageReducer<UseDiagnosticsResult>({\n    topics,\n    restore: EmptyMap,\n    addMessages,\n  });\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\n// Fuzzy matching: allow filter \"fzmg\" to match \"fuzzy/matching\".\n// Score by how early in the string matches appear.\nexport default function fuzzyFilter<T>({\n  options,\n  filter,\n  getText,\n  sort = true,\n}: {\n  options: T[];\n  filter: string | undefined;\n  getText: (option: T) => string;\n  sort?: boolean;\n}): T[] {\n  if (filter == undefined || filter === \"\") {\n    return options;\n  }\n  const needle = filter.toLowerCase().replace(/[^a-z0-9]/g, \"\");\n  if (needle.length === 0) {\n    return options;\n  }\n\n  type Result = { option: T; score: number };\n  const results: Result[] = [];\n\n  for (const option of options) {\n    const haystack = getText(option).toLowerCase();\n    let charPos = -1;\n    let score = 0;\n    for (const char of needle) {\n      charPos = haystack.indexOf(char, charPos + 1);\n      if (charPos === -1) {\n        break;\n      }\n      score += charPos;\n    }\n    if (charPos !== -1) {\n      results.push({\n        option,\n        score: score * haystack.length,\n      });\n    }\n  }\n\n  if (sort) {\n    results.sort((a, b) => a.score - b.score);\n  }\n  return results.map((result: Result): T => result.option);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { sortBy, truncate } from \"lodash\";\n\nimport { Time } from \"@foxglove/rostime\";\nimport { Header } from \"@foxglove/studio-base/types/Messages\";\nimport fuzzyFilter from \"@foxglove/studio-base/util/fuzzyFilter\";\n\n// Trim the message if it's too long. We sometimes get crazy massive messages here that can\n// otherwise crash our entire UI. I looked at a bunch of messages manually and they are typically\n// way smaller than 5KB, so this is a very generous maximum. But feel free to increase it more if\n// necessary. Exported for tests.\nexport const MAX_STRING_LENGTH = 5000; // 5KB\n\n// ts-prune-ignore-next\nexport const LEVELS: { OK: 0; WARN: 1; ERROR: 2; STALE: 3 } = {\n  OK: 0,\n  WARN: 1,\n  ERROR: 2,\n  STALE: 3,\n};\n\nexport const LEVEL_NAMES: { [key: number]: string } = {\n  0: \"ok\",\n  1: \"warn\",\n  2: \"error\",\n  3: \"stale\",\n};\n\nexport const KNOWN_LEVELS = [0, 1, 2, 3];\n\ninterface ToString {\n  toString(): string;\n}\n\nexport type DiagnosticStatusConfig = {\n  selectedHardwareId?: string;\n  selectedName?: string;\n  splitFraction?: number;\n  topicToRender: string;\n  numericPrecision?: number;\n};\n\nexport type DiagnosticSummaryConfig = {\n  minLevel: number;\n  pinnedIds: DiagnosticId[];\n  topicToRender: string;\n  hardwareIdFilter: string;\n  sortByLevel?: boolean;\n};\n\nexport type DiagnosticId = string & ToString;\n\nexport type KeyValue = { key: string; value: string };\n\n// diagnostic_msgs/DiagnosticStatus\nexport type DiagnosticStatusMessage = {\n  name: string;\n  hardware_id: string;\n  level: number;\n  message: string;\n  values: KeyValue[];\n};\n\nexport type DiagnosticInfo = {\n  status: DiagnosticStatusMessage;\n  stamp: Time;\n  id: DiagnosticId;\n  displayName: string;\n};\n\nexport type DiagnosticStatusArrayMsg = {\n  header: Header;\n  status: DiagnosticStatusMessage[];\n};\n\nexport type DiagnosticsById = Map<DiagnosticId, DiagnosticInfo>;\n\n// Remove leading slash from hardware_id if present.\nexport function trimHardwareId(hardwareId: string): string {\n  return hardwareId.startsWith(\"/\") ? hardwareId.slice(1) : hardwareId;\n}\n\nexport function getDiagnosticId(hardwareId: string, name?: string): DiagnosticId {\n  const trimmedHardwareId = trimHardwareId(hardwareId);\n  return name != undefined ? `|${trimmedHardwareId}|${name}|` : `|${trimmedHardwareId}|`;\n}\n\nexport function getDisplayName(hardwareId: string, name: string): string {\n  return name.length > 0\n    ? hardwareId.length > 0\n      ? `${hardwareId}: ${name}`\n      : `${name}`\n    : hardwareId.length > 0\n    ? `${hardwareId}`\n    : `(empty)`;\n}\n\n// ensures the diagnostic status message's name consists of both the hardware id and the name\nexport function computeDiagnosticInfo(\n  status: DiagnosticStatusMessage,\n  stamp: Time,\n): DiagnosticInfo {\n  const displayName = getDisplayName(status.hardware_id, status.name);\n  let validatedStatus = status;\n  if (status.values.some(({ value }) => value.length > MAX_STRING_LENGTH)) {\n    validatedStatus = {\n      ...status,\n      values: status.values.map((kv) =>\n        kv.value.length > MAX_STRING_LENGTH\n          ? { key: kv.key, value: truncate(kv.value, { length: MAX_STRING_LENGTH }) }\n          : kv,\n      ),\n    };\n  }\n  return {\n    status: validatedStatus,\n    stamp,\n    id: getDiagnosticId(status.hardware_id, status.name),\n    displayName,\n  };\n}\n\nexport function getDiagnosticsByLevel(\n  diagnosticsByHardwareId: Map<string, DiagnosticsById>,\n): Map<number, DiagnosticInfo[]> {\n  const ret = new Map<number, DiagnosticInfo[]>();\n  for (const diagnosticsByName of diagnosticsByHardwareId.values()) {\n    for (const diagnostic of diagnosticsByName.values()) {\n      const statuses = ret.get(diagnostic.status.level);\n      if (statuses) {\n        statuses.push(diagnostic);\n      } else {\n        ret.set(diagnostic.status.level, [diagnostic]);\n      }\n    }\n  }\n  return ret;\n}\n\nexport const filterAndSortDiagnostics = (\n  nodes: DiagnosticInfo[],\n  hardwareIdFilter: string,\n  pinnedIds: DiagnosticId[],\n): DiagnosticInfo[] => {\n  const unpinnedNodes = nodes.filter(({ id }) => !pinnedIds.includes(id));\n  if (hardwareIdFilter.length === 0) {\n    return sortBy(unpinnedNodes, (info) => info.displayName.replace(/^\\//, \"\"));\n  }\n  // fuzzyFilter sorts by match accuracy.\n  return fuzzyFilter({\n    options: unpinnedNodes,\n    filter: hardwareIdFilter,\n    getText: ({ displayName }) => displayName,\n  });\n};\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","toggle","array","item","predicate","el","newArray","MESSAGE_COLORS","StyledListItemButton","ListItemButton","prop","isPinned","theme","StyledSelect","Select","NodeRow","React","props","info","onClick","onClickPin","handleClick","handleClickPin","levelName","ListItem","IconButton","event","PushPin","ListItemText","ALLOWED_DATATYPES","DiagnosticSummary","config","saveConfig","topics","minLevel","topicToRender","pinnedIds","hardwareIdFilter","sortByLevel","openSiblingPanel","updatePanelSettingsTree","togglePinned","showDetails","renderRow","key","availableTopics","filtered","topic","diagnosticTopic","diagnostics","useDiagnostics","summary","EmptyState","pinnedNodes","id","_","trimmedHardwareId","name","nodesByLevel","levels","sortedNodes","level","nodes","status","height","width","rowProps","actionHandler","action","path","value","draft","Stack","PanelToolbar","MenuItem","InputBase","e","defaultConfig","Panel","buildSummarySettingsTree","topicOptions","topicIsAvailable","topicError","buildStatusPanelSettingsTree","numericPrecision","addMessages","prevResult","msgEvents","modified","msgEvent","header","statusArray","hardwareId","hardwareDiagnosticsByName","EmptyMap","fuzzyFilter","options","filter","getText","sort","needle","results","option","haystack","charPos","score","char","a","b","result","MAX_STRING_LENGTH","LEVELS","LEVEL_NAMES","KNOWN_LEVELS","trimHardwareId","getDiagnosticId","getDisplayName","computeDiagnosticInfo","stamp","displayName","validatedStatus","kv","getDiagnosticsByLevel","diagnosticsByHardwareId","ret","diagnosticsByName","diagnostic","statuses","filterAndSortDiagnostics","unpinnedNodes"],"sourceRoot":""}