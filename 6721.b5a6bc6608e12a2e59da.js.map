{"version":3,"file":"6721.b5a6bc6608e12a2e59da.js","mappings":"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","sources":["webpack:///../../packages/studio-base/src/components/TimeBasedChart/TimeBasedChartTooltipContent.tsx","webpack:///../../packages/studio-base/src/components/TimeBasedChart/downsample.ts","webpack:///../../packages/studio-base/src/components/TimeBasedChart/index.tsx","webpack:///../../packages/studio-base/src/panels/Plot/internalTypes.ts","webpack:///../../packages/studio-base/src/panels/Plot/PlotChart.tsx","webpack:///../../packages/studio-base/src/panels/Plot/types.ts","webpack:///../../packages/studio-base/src/panels/Plot/PlotLegendRow.tsx","webpack:///../../packages/studio-base/src/panels/Plot/PlotLegend.tsx","webpack:///../../packages/studio-base/src/panels/Plot/csv.ts","webpack:///../../packages/studio-base/src/panels/Plot/transformPlotRange.ts","webpack:///../../packages/studio-base/src/panels/Plot/datasets.tsx","webpack:///../../packages/studio-base/src/panels/Plot/settings.ts","webpack:///../../packages/studio-base/src/panels/Plot/index.tsx","webpack:///../../packages/studio-base/src/util/plotColors.ts","webpack:///../../packages/studio-base/src/util/toolsColorScheme.ts"],"sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Square24Filled } from \"@fluentui/react-icons\";\nimport { sortBy, take } from \"lodash\";\nimport { Fragment, PropsWithChildren, useMemo } from \"react\";\nimport { DeepReadonly } from \"ts-essentials\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport { TimeBasedChartTooltipData } from \"./index\";\n\ntype Props = DeepReadonly<{\n  colorsByDatasetIndex?: Record<string, undefined | string>;\n  content: TimeBasedChartTooltipData[];\n  labelsByDatasetIndex?: Record<string, undefined | string>;\n  // Flag indicating the containing chart has multiple datasets\n  multiDataset: boolean;\n}>;\n\nconst useStyles = makeStyles()((theme) => ({\n  root: {\n    fontFamily: fonts.MONOSPACE,\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.lineHeight,\n    overflowWrap: \"break-word\",\n  },\n  grid: {\n    columnGap: theme.spacing(0.5),\n    display: \"grid\",\n    gridTemplateColumns: \"auto minmax(0px, max-content) minmax(auto, max-content)\",\n    alignItems: \"center\",\n    fontFamily: fonts.MONOSPACE,\n    fontSize: theme.typography.caption.fontSize,\n    lineHeight: theme.typography.caption.lineHeight,\n    overflowWrap: \"break-word\",\n  },\n  icon: {\n    gridColumn: \"1\",\n    height: 12,\n    width: 12,\n  },\n  path: {\n    opacity: 0.9,\n    whiteSpace: \"nowrap\",\n  },\n  value: {\n    fontWeight: 600,\n    paddingLeft: theme.spacing(2),\n  },\n  overflow: {\n    gridColumn: \"2/4\",\n    opacity: theme.palette.action.disabledOpacity,\n    fontStyle: \"italic\",\n\n    \":not(:last-child)\": {\n      marginBottom: theme.spacing(0.5),\n    },\n  },\n}));\n\nfunction OverflowMessage(): JSX.Element {\n  const { classes } = useStyles();\n\n  return <div className={classes.overflow}>&lt;multiple values under cursor&gt;</div>;\n}\n\nexport default function TimeBasedChartTooltipContent(\n  props: PropsWithChildren<Props>,\n): React.ReactElement {\n  const { colorsByDatasetIndex, content, labelsByDatasetIndex, multiDataset } = props;\n  const { classes, cx } = useStyles();\n\n  const itemsByPath = useMemo(() => {\n    const out = new Map<string, TimeBasedChartTooltipData[]>();\n    const overflow = new Set<string>();\n    // for single dataset plots we don't care about grouping by path - there is only one path\n    if (!multiDataset) {\n      return { out, overflow };\n    }\n    // group items by path\n    for (const item of content) {\n      const existing = out.get(item.path) ?? [];\n      existing.push(item);\n      out.set(item.path, existing);\n\n      if (existing.length > 1) {\n        overflow.add(item.path);\n      }\n    }\n\n    return { out, overflow };\n  }, [content, multiDataset]);\n\n  // If the chart contains only one dataset, we don't need to render the dataset label - saving space\n  // We cannot detect this from the content since content is only what is actively hovered which may\n  // not include all datasets\n  if (!multiDataset) {\n    return (\n      <Stack className={classes.root} data-testid=\"TimeBasedChartTooltipContent\">\n        {take(content, 1).map((item, idx) => {\n          const value =\n            typeof item.value === \"string\"\n              ? item.value\n              : typeof item.value === \"bigint\"\n              ? item.value.toString()\n              : JSON.stringify(item.value);\n          return (\n            <div key={idx}>\n              {value}\n              {item.constantName != undefined ? ` (${item.constantName})` : \"\"}\n            </div>\n          );\n        })}\n        {content.length > 1 && <OverflowMessage />}\n      </Stack>\n    );\n  }\n\n  // Sort items by their dataset index to maintain the same ordering as the series in the legend.\n  const sortedItems = sortBy(\n    [...itemsByPath.out.entries()],\n    ([_, items]) => items[0]?.datasetIndex ?? 0,\n  );\n\n  return (\n    <div className={cx(classes.root, classes.grid)} data-testid=\"TimeBasedChartTooltipContent\">\n      {sortedItems.map(([path, items], idx) => {\n        const firstItem = items[0];\n        const color =\n          firstItem?.datasetIndex != undefined\n            ? colorsByDatasetIndex?.[firstItem.datasetIndex]\n            : \"auto\";\n        const label =\n          firstItem?.datasetIndex != undefined\n            ? labelsByDatasetIndex?.[firstItem.datasetIndex]\n            : undefined;\n        return (\n          <Fragment key={idx}>\n            <Square24Filled className={classes.icon} primaryFill={color} />\n            <div className={classes.path}>{label ?? path}</div>\n            {take(items, 1).map((item, itemIdx) => {\n              const value =\n                typeof item.value === \"string\"\n                  ? item.value\n                  : typeof item.value === \"bigint\"\n                  ? item.value.toString()\n                  : JSON.stringify(item.value);\n              return (\n                <div className={classes.value} key={itemIdx}>\n                  {value}\n                  {item.constantName != undefined ? ` (${item.constantName})` : \"\"}\n                </div>\n              );\n            })}\n            {itemsByPath.overflow.has(path) && <OverflowMessage />}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { ChartData, ScatterDataPoint } from \"chart.js\";\n\n// Chartjs typings use _null_ to indicate _gaps_ in the dataset\n// eslint-disable-next-line no-restricted-syntax\ntype ChartNull = null;\ntype Data = ChartData<\"scatter\", (ScatterDataPoint | ChartNull)[]>;\ntype DataSet = Data[\"datasets\"][0];\n\ntype DownsampleBounds = {\n  width: number;\n  height: number;\n  x: { min: number; max: number };\n  y: { min: number; max: number };\n};\n\n/**\n * Downsample a timeseries dataset\n *\n * This function assumes the dataset x axis time and sorted.\n *\n * The downsampled data preserves the shape of the original data. The algorithm does this by\n * downsampling within an interval. Each interval tracks the first datum of the interval,\n * minimum y-value datum, maximum y-value datum, and the last datum of the interval.\n *\n * For each datum within the dataset, we determine first if it falls within the current interval.\n * - If the datum falls within the current interval we update the min/max y or last values. Then move\n *   to the next datum.\n * - If the datum falls outside the current interval, we determine whether to add the min/max and\n *   last datum to the downsampled dataset, and then move to the next datum.\n * - If first/min/max/last are all the same datum, then only one datum appears in the downsampled\n *   dataset.\n *\n * By tracking the first/min/max/last within an interval, the shape of the original data is preserved.\n * Points before the interval connect into the interval with the same slope line as the original\n * dataset, and the interval connects to the next interval with the same slope line as the original\n * data. The min/max entries preserve spikes within the data.\n */\nexport function downsampleTimeseries(dataset: DataSet, bounds: DownsampleBounds): DataSet {\n  // datasets of length 1 don't need downsampling\n  if (dataset.data.length <= 1) {\n    return dataset;\n  }\n\n  const pixelPerXValue = bounds.width / (bounds.x.max - bounds.x.min);\n  const pixelPerYValue = bounds.height / (bounds.y.max - bounds.y.min);\n\n  const downsampled: ScatterDataPoint[] = [];\n\n  type IntervalItem = { xPixel: number; yPixel: number; datum: ScatterDataPoint };\n\n  let intFirst: IntervalItem | undefined;\n  let intLast: IntervalItem | undefined;\n  let intMin: IntervalItem | undefined;\n  let intMax: IntervalItem | undefined;\n\n  // We keep points within a buffer window around the bounds so points near the bounds are\n  // connected to their peers and available for pan/zoom.\n  // Points outside this buffer window are dropped.\n  const xRange = bounds.x.max - bounds.x.min;\n  const minX = bounds.x.min - xRange * 0.5;\n  const maxX = bounds.x.max + xRange * 0.5;\n\n  let firstPastBounds: (typeof dataset.data)[0] | undefined = undefined;\n\n  for (const datum of dataset.data) {\n    if (!datum) {\n      continue;\n    }\n\n    // track the first point before our bounds\n    if (datum.x < minX) {\n      if (downsampled.length === 0) {\n        downsampled.push(datum);\n      } else {\n        // the first point outside our bounds will always be at index 0\n        downsampled[0] = datum;\n      }\n      continue;\n    }\n\n    // track the first point outside of our bounds\n    if (datum.x > maxX) {\n      firstPastBounds = datum;\n      continue;\n    }\n\n    const x = Math.round(datum.x * pixelPerXValue);\n    const y = Math.round(datum.y * pixelPerYValue);\n\n    // interval has ended, we determine whether to write additional points for min/max/last\n    if (intFirst?.xPixel !== x) {\n      // add the min value from previous interval if it doesn't match the first or last of that interval\n      if (intMin && intMin.yPixel !== intFirst?.yPixel && intMin.yPixel !== intLast?.yPixel) {\n        downsampled.push(intMin.datum);\n      }\n\n      // add the max value from previous interval if it doesn't match the first or last of that interval\n      if (intMax && intMax.yPixel !== intFirst?.yPixel && intMax.yPixel !== intLast?.yPixel) {\n        downsampled.push(intMax.datum);\n      }\n\n      // add the last value if it doesn't match the first\n      if (intLast && intFirst?.yPixel !== intLast.yPixel) {\n        downsampled.push(intLast.datum);\n      }\n\n      // always add the first datum of an new interval\n      downsampled.push(datum);\n\n      intFirst = intLast = { xPixel: x, yPixel: y, datum };\n      intMin = { xPixel: x, yPixel: y, datum };\n      intMax = { xPixel: x, yPixel: y, datum };\n      continue;\n    }\n\n    intLast = { xPixel: x, yPixel: y, datum };\n\n    if (intMin && y < intMin.yPixel) {\n      intMin.yPixel = y;\n      intMin.datum = datum;\n    }\n\n    if (intMax && y > intMax.yPixel) {\n      intMax.yPixel = y;\n      intMax.datum = datum;\n    }\n  }\n\n  // add the min value from previous interval if it doesn't match the first or last of that interval\n  if (intMin && intMin.yPixel !== intFirst?.yPixel && intMin.yPixel !== intLast?.yPixel) {\n    downsampled.push(intMin.datum);\n  }\n\n  // add the max value from previous interval if it doesn't match the first or last of that interval\n  if (intMax && intMax.yPixel !== intFirst?.yPixel && intMax.yPixel !== intLast?.yPixel) {\n    downsampled.push(intMax.datum);\n  }\n\n  // add the last value if it doesn't match the first\n  if (intLast && intFirst?.yPixel !== intLast.yPixel) {\n    downsampled.push(intLast.datum);\n  }\n\n  if (firstPastBounds) {\n    downsampled.push(firstPastBounds);\n  }\n\n  return { ...dataset, data: downsampled };\n}\n\nexport function downsampleScatter(dataset: DataSet, bounds: DownsampleBounds): DataSet {\n  // datasets of length 1 don't need downsampling\n  if (dataset.data.length <= 1) {\n    return dataset;\n  }\n\n  const pixelPerXValue = bounds.width / (bounds.x.max - bounds.x.min);\n  const pixelPerYValue = bounds.height / (bounds.y.max - bounds.y.min);\n  const pixelPerRow = bounds.width;\n\n  const downsampled: ScatterDataPoint[] = [];\n\n  // downsampling tracks a sparse array of x/y locations\n  const sparse: boolean[] = [];\n\n  for (const datum of dataset.data) {\n    if (!datum) {\n      continue;\n    }\n\n    // Out-of-bounds scatter points are ignored. We don't filter on y\n    // because y values are needed to allow chart to auto scale to the correct\n    // height.\n    if (datum.x > bounds.x.max || datum.x < bounds.x.min) {\n      continue;\n    }\n\n    const x = Math.round(datum.x * pixelPerXValue);\n    const y = Math.round(datum.y * pixelPerYValue);\n\n    // the locator is the x/y pixel value as one number\n    const locator = y * pixelPerRow + x;\n    if (sparse[locator] === true) {\n      continue;\n    }\n    sparse[locator] = true;\n    downsampled.push(datum);\n  }\n\n  return { ...dataset, data: downsampled };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { Button, Fade, Tooltip, useTheme } from \"@mui/material\";\nimport { ChartOptions, ScaleOptions } from \"chart.js\";\nimport { AnnotationOptions } from \"chartjs-plugin-annotation\";\nimport { isEqual } from \"lodash\";\nimport React, {\n  ComponentProps,\n  MouseEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useMountedState, useThrottle } from \"react-use\";\nimport { makeStyles } from \"tss-react/mui\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport type { ZoomOptions } from \"@foxglove/chartjs-plugin-zoom/types/options\";\nimport { filterMap } from \"@foxglove/den/collection\";\nimport Logger from \"@foxglove/log\";\nimport ChartComponent from \"@foxglove/studio-base/components/Chart/index\";\nimport { RpcElement, RpcScales } from \"@foxglove/studio-base/components/Chart/types\";\nimport KeyListener from \"@foxglove/studio-base/components/KeyListener\";\nimport { useMessagePipeline } from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport {\n  TimelineInteractionStateStore,\n  useClearHoverValue,\n  useSetHoverValue,\n  useTimelineInteractionState,\n} from \"@foxglove/studio-base/context/TimelineInteractionStateContext\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport HoverBar from \"./HoverBar\";\nimport TimeBasedChartTooltipContent from \"./TimeBasedChartTooltipContent\";\nimport { VerticalBarWrapper } from \"./VerticalBarWrapper\";\nimport { downsampleScatter, downsampleTimeseries } from \"./downsample\";\n\nconst log = Logger.getLogger(__filename);\n\nexport type TimeBasedChartTooltipData = {\n  datasetIndex?: number;\n  x: number | bigint;\n  y: number | bigint;\n  path: string;\n  value: number | bigint | boolean | string;\n  constantName?: string;\n};\n\nconst useStyles = makeStyles()((theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  resetZoomButton: {\n    position: \"absolute\",\n    bottom: 0,\n    right: 0,\n    marginBottom: theme.spacing(4),\n    marginRight: theme.spacing(1),\n  },\n  tooltip: {\n    maxWidth: \"none\",\n  },\n  bar: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    width: 1,\n    marginLeft: -1,\n    display: \"block\",\n  },\n  playbackBar: {\n    backgroundColor: \"#aaa\",\n  },\n}));\n\ntype ChartComponentProps = ComponentProps<typeof ChartComponent>;\n\nconst selectGlobalBounds = (store: TimelineInteractionStateStore) => store.globalBounds;\nconst selectSetGlobalBounds = (store: TimelineInteractionStateStore) => store.setGlobalBounds;\n\n// Calculation mode for the \"reset view\" view.\nexport type ChartDefaultView =\n  | { type: \"fixed\"; minXValue: number; maxXValue: number }\n  | { type: \"following\"; width: number };\n\nexport type Props = {\n  type: \"scatter\";\n  width: number;\n  height: number;\n  zoom: boolean;\n  data: ChartComponentProps[\"data\"];\n  tooltips?: Map<string, TimeBasedChartTooltipData>;\n  xAxes?: ScaleOptions<\"linear\">;\n  yAxes: ScaleOptions<\"linear\">;\n  annotations?: AnnotationOptions[];\n  isSynced?: boolean;\n  linesToHide?: {\n    [key: string]: boolean;\n  };\n  datasetId?: string;\n  onClick?: ChartComponentProps[\"onClick\"];\n  // If the x axis represents playback time (\"timestamp\"), the hover cursor will be synced.\n  // Note, this setting should not be used for other time values.\n  xAxisIsPlaybackTime: boolean;\n  showXAxisLabels: boolean;\n  plugins?: ChartOptions[\"plugins\"];\n  currentTime?: number;\n  defaultView?: ChartDefaultView;\n};\n\n// Create a chart with any y-axis but with an x-axis that shows time since the\n// start of the bag, and which is kept in sync with other instances of this\n// component. Uses chart.js internally, with a zoom/pan plugin, and with our\n// standard tooltips.\nexport default function TimeBasedChart(props: Props): JSX.Element {\n  const requestID = useRef<number>(0);\n  const {\n    datasetId,\n    type,\n    width,\n    height,\n    data,\n    isSynced = false,\n    tooltips,\n    yAxes,\n    xAxes,\n    defaultView,\n    currentTime,\n    xAxisIsPlaybackTime,\n    showXAxisLabels,\n  } = props;\n\n  const { labels, datasets } = data;\n\n  const theme = useTheme();\n  const { classes, cx } = useStyles();\n  const componentId = useMemo(() => uuidv4(), []);\n  const isMounted = useMountedState();\n  const canvasContainer = useRef<HTMLDivElement>(ReactNull);\n\n  const [hasUserPannedOrZoomed, setHasUserPannedOrZoomed] = useState<boolean>(false);\n\n  const pauseFrame = useMessagePipeline(\n    useCallback((messagePipeline) => messagePipeline.pauseFrame, []),\n  );\n\n  const resumeFrame = useRef<() => void | undefined>();\n  const requestedResumeFrame = useRef<() => void | undefined>();\n\n  // when data changes, we pause and wait for onFinishRender to resume\n  const onStartRender = useCallback(() => {\n    if (resumeFrame.current) {\n      resumeFrame.current();\n    }\n    // during streaming the message pipeline should not give us any more data until we finish\n    // rendering this update\n    resumeFrame.current = pauseFrame(\"TimeBasedChart\");\n  }, [pauseFrame]);\n\n  // resumes any paused frames\n  // since we render in a web-worker we need to pause/resume the message pipeline to keep\n  // our plot rendeirng in-sync with data rendered elsewhere in the app\n  const onFinishRender = useCallback(() => {\n    const current = resumeFrame.current;\n    resumeFrame.current = undefined;\n    requestedResumeFrame.current = current;\n\n    if (current) {\n      // allow the chart offscreen canvas to render to screen before calling done\n      requestID.current = requestAnimationFrame(() => {\n        current();\n        requestedResumeFrame.current = undefined;\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    // cleanup paused frames on unmount or dataset changes\n    return () => {\n      onFinishRender();\n      cancelAnimationFrame(requestID.current);\n      requestedResumeFrame.current?.();\n    };\n  }, [pauseFrame, onFinishRender]);\n\n  const globalBounds = useTimelineInteractionState(selectGlobalBounds);\n  const setGlobalBounds = useTimelineInteractionState(selectSetGlobalBounds);\n\n  // Ignore global bounds if we're not synced.\n  const syncedGlobalBounds = useMemo(\n    () => (isSynced ? globalBounds : undefined),\n    [globalBounds, isSynced],\n  );\n\n  const linesToHide = useMemo(() => props.linesToHide ?? {}, [props.linesToHide]);\n\n  // some callbacks don't need to re-create when the current scales change, so we keep a ref\n  const currentScalesRef = useRef<RpcScales | undefined>(undefined);\n\n  // calculates the minX/maxX for all our datasets\n  // we do this on the unfiltered datasets because we need the bounds to properly filter adjacent points\n  const datasetBounds = useMemo(() => {\n    let xMin: number | undefined;\n    let xMax: number | undefined;\n    let yMin: number | undefined;\n    let yMax: number | undefined;\n\n    for (const dataset of datasets) {\n      for (const item of dataset.data) {\n        if (item == undefined) {\n          continue;\n        }\n        if (!isNaN(item.x)) {\n          xMin = Math.min(xMin ?? item.x, item.x);\n          xMax = Math.max(xMax ?? item.x, item.x);\n        }\n\n        if (!isNaN(item.x)) {\n          yMin = Math.min(yMin ?? item.y, item.y);\n          yMax = Math.max(yMax ?? item.y, item.y);\n        }\n      }\n    }\n\n    return { x: { min: xMin, max: xMax }, y: { min: yMin, max: yMax } };\n  }, [datasets]);\n\n  // avoid re-doing a downsample on every scale change, instead mark the downsample as dirty\n  // with a debounce and if downsampling hasn't happened after some time, trigger a downsample via state update\n  const [invalidateDownsample, setDownsampleFlush] = useState({});\n  const queueDownsampleInvalidate = useDebouncedCallback(\n    () => {\n      setDownsampleFlush({});\n    },\n    100,\n    // maxWait equal to debounce timeout makes the debounce act like a throttle\n    // Without a maxWait - invocations of the debounced invalidate reset the countdown\n    // resulting in no invalidation when scales are constantly changing (playback)\n    { leading: false, maxWait: 100 },\n  );\n\n  const onResetZoom = () => {\n    setHasUserPannedOrZoomed(false);\n    setGlobalBounds(undefined);\n  };\n\n  const [hasVerticalExclusiveZoom, setHasVerticalExclusiveZoom] = useState<boolean>(false);\n  const [hasBothAxesZoom, setHasBothAxesZoom] = useState<boolean>(false);\n\n  const zoomMode = useMemo<ZoomOptions[\"mode\"]>(() => {\n    if (hasVerticalExclusiveZoom) {\n      return \"y\";\n    } else if (hasBothAxesZoom) {\n      return \"xy\";\n    }\n    return \"x\";\n  }, [hasBothAxesZoom, hasVerticalExclusiveZoom]);\n\n  const keyDownHandlers = React.useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(true),\n      b: () => setHasBothAxesZoom(true),\n    }),\n    [setHasVerticalExclusiveZoom, setHasBothAxesZoom],\n  );\n  const keyUphandlers = React.useMemo(\n    () => ({\n      v: () => setHasVerticalExclusiveZoom(false),\n      b: () => setHasBothAxesZoom(false),\n    }),\n    [setHasVerticalExclusiveZoom, setHasBothAxesZoom],\n  );\n\n  const mouseYRef = useRef<number | undefined>(undefined);\n\n  // We use a custom tooltip so we can style it more nicely, and so that it can break\n  // out of the bounds of the canvas, in case the panel is small.\n  const [activeTooltip, setActiveTooltip] = useState<{\n    x: number;\n    y: number;\n    data: TimeBasedChartTooltipData[];\n  }>();\n  const updateTooltip = useCallback(\n    (elements: RpcElement[]) => {\n      if (elements.length === 0 || mouseYRef.current == undefined) {\n        return setActiveTooltip(undefined);\n      }\n\n      const tooltipItems: { item: TimeBasedChartTooltipData; element: RpcElement }[] = [];\n\n      for (const element of elements) {\n        if (!element.data) {\n          continue;\n        }\n        const key = `${element.data.x}:${element.data.y}:${element.datasetIndex}`;\n        const foundTooltip = tooltips?.get(key);\n        if (!foundTooltip) {\n          continue;\n        }\n\n        tooltipItems.push({\n          item: { ...foundTooltip, datasetIndex: element.datasetIndex },\n          element,\n        });\n      }\n\n      if (tooltipItems.length === 0) {\n        return setActiveTooltip(undefined);\n      }\n\n      const element = tooltipItems[0]!.element;\n\n      const canvasRect = canvasContainer.current?.getBoundingClientRect();\n      if (canvasRect) {\n        setActiveTooltip({\n          x: canvasRect.left + element.view.x,\n          y: canvasRect.top + mouseYRef.current,\n          data: tooltipItems.map((item) => item.item),\n        });\n      }\n    },\n    [tooltips],\n  );\n\n  const setHoverValue = useSetHoverValue();\n  const clearHoverValue = useClearHoverValue();\n  const clearGlobalHoverTime = useCallback(\n    () => clearHoverValue(componentId),\n    [clearHoverValue, componentId],\n  );\n\n  const onMouseOut = useCallback(() => {\n    setActiveTooltip(undefined);\n    clearGlobalHoverTime();\n  }, [clearGlobalHoverTime]);\n\n  // currentScalesRef is used because we don't need to change this callback content when the scales change\n  // this does mean that scale changes don't remove tooltips - which is a future enhancement\n  const onMouseMove = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      const xScale = currentScalesRef.current?.x;\n      if (!xScale || !canvasContainer.current) {\n        setActiveTooltip(undefined);\n        clearGlobalHoverTime();\n        return;\n      }\n\n      const canvasContainerRect = canvasContainer.current.getBoundingClientRect();\n\n      // tooltip vertical placement align with the cursor y value\n      mouseYRef.current = event.pageY - canvasContainerRect.top;\n\n      const mouseX = event.pageX - canvasContainerRect.left;\n      const pixels = xScale.pixelMax - xScale.pixelMin;\n      const range = xScale.max - xScale.min;\n      const xVal = (range / pixels) * (mouseX - xScale.pixelMin) + xScale.min;\n\n      const xInBounds = xVal >= xScale.min && xVal <= xScale.max;\n      if (!xInBounds || isNaN(xVal)) {\n        setActiveTooltip(undefined);\n        clearGlobalHoverTime();\n        return;\n      }\n\n      setHoverValue({\n        componentId,\n        value: xVal,\n        type: xAxisIsPlaybackTime ? \"PLAYBACK_SECONDS\" : \"OTHER\",\n      });\n    },\n    [setHoverValue, componentId, xAxisIsPlaybackTime, clearGlobalHoverTime],\n  );\n\n  const plugins = useMemo<ChartOptions[\"plugins\"]>(() => {\n    return {\n      decimation: {\n        enabled: true,\n        algorithm: \"lttb\",\n      },\n      legend: {\n        display: false,\n      },\n      datalabels: {\n        display: false,\n      },\n      tooltip: {\n        enabled: false, // Disable native tooltips since we use custom ones.\n      },\n      zoom: {\n        zoom: {\n          enabled: props.zoom,\n          mode: zoomMode,\n          sensitivity: 3,\n          speed: 0.1,\n        },\n        pan: {\n          mode: \"xy\",\n          enabled: true,\n          speed: 20,\n          threshold: 10,\n        },\n      },\n      ...props.plugins,\n      annotation: { annotations: props.annotations },\n    };\n  }, [props.annotations, props.plugins, props.zoom, zoomMode]);\n\n  // To avoid making a new xScale identity on all updates that might change the min/max\n  // we memo the min/max X values so only when the values change is the scales object re-made\n  const { min: minX, max: maxX } = useMemo(() => {\n    // when unlocking sync keep the last manually panned/zoomed chart state\n    if (!syncedGlobalBounds && hasUserPannedOrZoomed) {\n      return { min: undefined, max: undefined };\n    }\n\n    // If we're the source of global bounds then use our current values\n    // to avoid scale feedback jitter.\n    if (syncedGlobalBounds?.sourceId === componentId && syncedGlobalBounds.userInteraction) {\n      return { min: undefined, max: undefined };\n    }\n\n    let min: number | undefined;\n    let max: number | undefined;\n\n    // default view possibly gives us some initial bounds\n    if (defaultView?.type === \"fixed\") {\n      min = defaultView.minXValue;\n      max = defaultView.maxXValue;\n    } else if (defaultView?.type === \"following\") {\n      max = currentTime ?? 0;\n      min = max - defaultView.width;\n    } else {\n      min = datasetBounds.x.min;\n      max = datasetBounds.x.max;\n    }\n\n    // If the global bounds are from user interaction, we use that unconditionally.\n    if (syncedGlobalBounds?.userInteraction === true) {\n      min = syncedGlobalBounds.min;\n      max = syncedGlobalBounds.max;\n    }\n\n    // if the min/max are the same, use undefined to fall-back to chart component auto-scales\n    // without this the chart axis does not appear since it has as 0 size\n    if (min === max) {\n      return { min: undefined, max: undefined };\n    }\n\n    return { min, max };\n  }, [\n    componentId,\n    currentTime,\n    datasetBounds.x.max,\n    datasetBounds.x.min,\n    defaultView,\n    syncedGlobalBounds,\n    hasUserPannedOrZoomed,\n  ]);\n\n  const xScale = useMemo<ScaleOptions>(() => {\n    const defaultXTicksSettings: ScaleOptions[\"ticks\"] = {\n      font: {\n        family: fonts.MONOSPACE,\n        size: 10,\n      },\n      color: theme.palette.text.secondary,\n      maxRotation: 0,\n    };\n\n    const scale: ScaleOptions<\"linear\"> = {\n      grid: { color: theme.palette.divider },\n      ...xAxes,\n      min: minX,\n      max: maxX,\n      ticks: {\n        display: showXAxisLabels,\n        ...defaultXTicksSettings,\n        ...xAxes?.ticks,\n      },\n    };\n\n    return scale;\n  }, [theme.palette, showXAxisLabels, xAxes, minX, maxX]);\n\n  const yScale = useMemo<ScaleOptions>(() => {\n    const defaultYTicksSettings: ScaleOptions[\"ticks\"] = {\n      font: {\n        family: fonts.MONOSPACE,\n        size: 10,\n      },\n      color: theme.palette.text.secondary,\n      padding: 0,\n    };\n\n    let { min: minY, max: maxY } = yAxes;\n\n    // chartjs doesn't like it when only one of min/max are specified for scales\n    // so if either is specified then we specify both\n    if (maxY == undefined && minY != undefined) {\n      maxY = datasetBounds.y.max;\n    }\n    if (minY == undefined && maxY != undefined) {\n      minY = datasetBounds.y.min;\n    }\n\n    return {\n      type: \"linear\",\n      ...yAxes,\n      min: minY,\n      max: maxY,\n      ticks: {\n        ...defaultYTicksSettings,\n        ...yAxes.ticks,\n      },\n    } as ScaleOptions;\n  }, [datasetBounds.y, yAxes, theme.palette]);\n\n  const datasetBoundsRef = useRef(datasetBounds);\n  datasetBoundsRef.current = datasetBounds;\n  const downsampleDatasets = useCallback(\n    (fullDatasets: typeof datasets) => {\n      const currentScales = currentScalesRef.current;\n      let bounds:\n        | {\n            width: number;\n            height: number;\n            x: { min: number; max: number };\n            y: { min: number; max: number };\n          }\n        | undefined = undefined;\n      if (currentScales?.x && currentScales.y) {\n        bounds = {\n          width,\n          height,\n          x: {\n            min: currentScales.x.min,\n            max: currentScales.x.max,\n          },\n          y: {\n            min: currentScales.y.min,\n            max: currentScales.y.max,\n          },\n        };\n      }\n\n      const dataBounds = datasetBoundsRef.current;\n\n      // if we don't have bounds (chart not initialized) but do have dataset bounds\n      // then setup bounds as x/y min/max around the dataset values rather than the scales\n      if (\n        !bounds &&\n        dataBounds.x.min != undefined &&\n        dataBounds.x.max != undefined &&\n        dataBounds.y.min != undefined &&\n        dataBounds.y.max != undefined\n      ) {\n        bounds = {\n          width,\n          height,\n          x: {\n            min: dataBounds.x.min,\n            max: dataBounds.x.max,\n          },\n          y: {\n            min: dataBounds.y.min,\n            max: dataBounds.y.max,\n          },\n        };\n      }\n\n      // If we don't have any bounds - we assume the component is still initializing and return no data\n      // The other alternative is to return the full data set. This leads to rendering full fidelity data\n      // which causes render pauses and blank charts for large data sets.\n      if (!bounds) {\n        return [];\n      }\n\n      return fullDatasets.map((dataset) => {\n        if (!bounds) {\n          return dataset;\n        }\n\n        const downsampled =\n          dataset.showLine !== true\n            ? downsampleScatter(dataset, bounds)\n            : downsampleTimeseries(dataset, bounds);\n        // NaN item values create gaps in the line\n        const undefinedToNanData = downsampled.data.map((item) => {\n          if (item == undefined || isNaN(item.x) || isNaN(item.y)) {\n            return { x: NaN, y: NaN };\n          }\n          return item;\n        });\n\n        return { ...downsampled, data: undefinedToNanData };\n      });\n    },\n    [height, width],\n  );\n\n  // remove datasets that should be hidden\n  const visibleDatasets = useMemo(() => {\n    return filterMap(datasets, (dataset) => {\n      const { label } = dataset;\n      if ((label == undefined || linesToHide[label]) ?? false) {\n        return;\n      }\n      return dataset;\n    });\n  }, [datasets, linesToHide]);\n\n  // throttle the downsampleDatasets callback since this is an input to the downsampledData memo\n  // avoids doing a downsample if the callback changes rapidly\n  const throttledDownsample = useThrottle(() => downsampleDatasets, 100);\n\n  // downsample datasets with the latest downsample function\n  const downsampledDatasets = useMemo(() => {\n    void invalidateDownsample;\n\n    return throttledDownsample(visibleDatasets);\n  }, [invalidateDownsample, throttledDownsample, visibleDatasets]);\n\n  const downsampledData = useMemo(() => {\n    return {\n      labels,\n      datasets: downsampledDatasets,\n    };\n  }, [labels, downsampledDatasets]);\n\n  const options = useMemo<ChartOptions>(() => {\n    return {\n      maintainAspectRatio: false,\n      animation: false,\n      // Disable splines, they seem to cause weird rendering artifacts:\n      elements: { line: { tension: 0 } },\n      interaction: {\n        intersect: false,\n        mode: \"x\",\n      },\n      scales: {\n        x: xScale,\n        y: yScale,\n      },\n      plugins,\n    };\n  }, [plugins, xScale, yScale]);\n\n  const onHover = useCallback(\n    (elements: RpcElement[]) => {\n      // onHover could fire after component unmounts so we need to guard with mounted checks\n      if (isMounted()) {\n        updateTooltip(elements);\n      }\n    },\n    [isMounted, updateTooltip],\n  );\n\n  const onScalesUpdate = useCallback(\n    (scales: RpcScales, { userInteraction }: { userInteraction: boolean }) => {\n      if (!isMounted()) {\n        return;\n      }\n\n      // If this is an update from the chart adjusting its own bounds and not a\n      // user interaction and the X scale is defined but hasn't changed we can\n      // skip updating global bounds and downsampling. This avoids a feedback\n      // loop on boundary conditions when the chart is adjusting its own Y axis\n      // to fit the dataset.\n      if (\n        scales.x != undefined &&\n        isEqual(scales.x, currentScalesRef.current?.x) &&\n        !userInteraction\n      ) {\n        return;\n      }\n\n      if (userInteraction) {\n        setHasUserPannedOrZoomed(true);\n      }\n\n      currentScalesRef.current = scales;\n\n      queueDownsampleInvalidate();\n\n      // chart indicated we got a scales update, we may need to update global bounds\n      if (!isSynced || !scales.x) {\n        return;\n      }\n\n      // the change is a result of user interaction on our chart\n      // we set the sync scale value so other synced charts follow our zoom/pan behavior\n      if (userInteraction) {\n        setGlobalBounds({\n          min: scales.x.min,\n          max: scales.x.max,\n          sourceId: componentId,\n          userInteraction: true,\n        });\n        return;\n      }\n\n      // the scales changed due to new data or another non-user initiated event\n      // the sync value is conditionally set depending on the state of the existing sync value\n      setGlobalBounds((old) => {\n        // no scale from our plot, always use old value\n        const scalesX = scales.x;\n        if (!scalesX) {\n          return old;\n        }\n\n        // no old value for sync, initialize with our value\n        if (!old) {\n          return {\n            min: scalesX.min,\n            max: scalesX.max,\n            sourceId: componentId,\n            userInteraction: false,\n          };\n        }\n\n        // give preference to an old value set via user interaction\n        // note that updates due to _our_ user interaction are set earlier\n        if (old.userInteraction) {\n          return old;\n        }\n\n        // calculate min/max based on old value and our new scale\n        const newMin = Math.min(scalesX.min, old.min);\n        const newMax = Math.max(scalesX.max, old.max);\n\n        // avoid making a new sync object if the existing one matches our range\n        // avoids infinite set states\n        if (old.max === newMax && old.min === newMin) {\n          return old;\n        }\n\n        // existing value does not match our new range, update the global sync value\n        return {\n          min: newMin,\n          max: newMax,\n          sourceId: componentId,\n          userInteraction: false,\n        };\n      });\n    },\n    [componentId, isMounted, isSynced, queueDownsampleInvalidate, setGlobalBounds],\n  );\n\n  useEffect(() => log.debug(`<TimeBasedChart> (datasetId=${datasetId})`), [datasetId]);\n\n  const colorsByDatasetIndex = useMemo(() => {\n    return Object.fromEntries(\n      data.datasets.map((dataset, index) => [index, dataset.borderColor?.toString()]),\n    );\n  }, [data.datasets]);\n\n  const labelsByDatasetIndex = useMemo(() => {\n    return Object.fromEntries(data.datasets.map((dataset, index) => [index, dataset.label]));\n  }, [data.datasets]);\n\n  const datasetsLength = datasets.length;\n  const tooltipContent = useMemo(() => {\n    return activeTooltip ? (\n      <TimeBasedChartTooltipContent\n        content={activeTooltip.data}\n        multiDataset={datasetsLength > 1}\n        colorsByDatasetIndex={colorsByDatasetIndex}\n        labelsByDatasetIndex={labelsByDatasetIndex}\n      />\n    ) : undefined;\n  }, [activeTooltip, colorsByDatasetIndex, datasetsLength, labelsByDatasetIndex]);\n\n  // reset is shown if we have sync lock and there has been user interaction, or if we don't\n  // have sync lock and the user has manually interacted with the plot\n  //\n  // The reason we check for pan lock is to remove reset display from all sync'd plots once\n  // the range has been reset.\n  const showReset = useMemo(() => {\n    return isSynced ? syncedGlobalBounds?.userInteraction === true : hasUserPannedOrZoomed;\n  }, [syncedGlobalBounds?.userInteraction, hasUserPannedOrZoomed, isSynced]);\n\n  // We don't memo this since each option itself is memo'd and this is just convenience to pass to\n  // the component.\n  const chartProps: ChartComponentProps = {\n    type,\n    width,\n    height,\n    isBoundsReset: globalBounds == undefined,\n    options,\n    data: downsampledData,\n    onClick: props.onClick,\n    onScalesUpdate,\n    onStartRender,\n    onFinishRender,\n    onHover,\n  };\n\n  // avoid rendering if width/height are 0 - usually on initial mount\n  // so we don't trigger onFinishRender if we know we will immediately resize\n  if (width === 0 || height === 0) {\n    return <></>;\n  }\n\n  return (\n    <Stack direction=\"row\" fullWidth>\n      <Tooltip\n        arrow={false}\n        classes={{ tooltip: classes.tooltip }}\n        open={activeTooltip != undefined}\n        placement=\"right\"\n        title={tooltipContent ?? <></>}\n        disableInteractive\n        followCursor\n        TransitionComponent={Fade}\n        TransitionProps={{ timeout: 0 }}\n      >\n        <Stack direction=\"row\" style={{ width }}>\n          <div className={classes.root} onDoubleClick={onResetZoom}>\n            <HoverBar\n              componentId={componentId}\n              isTimestampScale={xAxisIsPlaybackTime}\n              scales={currentScalesRef.current}\n            >\n              <div\n                className={classes.bar}\n                style={{\n                  backgroundColor: xAxisIsPlaybackTime\n                    ? theme.palette.warning.main\n                    : theme.palette.info.main,\n                }}\n              />\n            </HoverBar>\n            {xAxisIsPlaybackTime && (\n              <VerticalBarWrapper scales={currentScalesRef.current} xValue={currentTime}>\n                <div className={cx(classes.bar, classes.playbackBar)} />\n              </VerticalBarWrapper>\n            )}\n\n            <div ref={canvasContainer} onMouseMove={onMouseMove} onMouseOut={onMouseOut}>\n              <ChartComponent {...chartProps} />\n            </div>\n\n            {showReset && (\n              <Button\n                className={classes.resetZoomButton}\n                variant=\"contained\"\n                color=\"inherit\"\n                title=\"(shortcut: double-click)\"\n                onClick={onResetZoom}\n              >\n                Reset view\n              </Button>\n            )}\n            <KeyListener global keyDownHandlers={keyDownHandlers} keyUpHandlers={keyUphandlers} />\n          </div>\n        </Stack>\n      </Tooltip>\n    </Stack>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { ChartDataset } from \"chart.js\";\n\nimport { Time } from \"@foxglove/rostime\";\nimport { MessagePathDataItem } from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport { TimestampMethod } from \"@foxglove/studio-base/util/time\";\n\nexport type BasePlotPath = {\n  value: string;\n  enabled: boolean;\n};\n\nexport type PlotPath = BasePlotPath & {\n  color?: string;\n  label?: string;\n  timestampMethod: TimestampMethod;\n};\n\nexport type Datum = {\n  x: number;\n  y: number;\n  receiveTime: Time;\n  headerStamp?: Time;\n  path: string;\n  value: number | bigint | boolean | string;\n  constantName?: string;\n};\n\nexport type DataSet = ChartDataset<\"scatter\", Datum[]>;\n\nexport type PlotDataItem = {\n  queriedData: MessagePathDataItem[];\n  receiveTime: Time;\n  headerStamp?: Time;\n};\n\nexport type PlotDataByPath = {\n  [path: string]: PlotDataItem[][];\n};\n\n// A \"reference line\" plot path is a numeric value. It creates a horizontal line on the plot at the specified value.\nexport function isReferenceLinePlotPathType(path: BasePlotPath): boolean {\n  return !isNaN(Number.parseFloat(path.value));\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { useTheme } from \"@mui/material\";\nimport { ScaleOptions } from \"chart.js\";\nimport { AnnotationOptions } from \"chartjs-plugin-annotation\";\nimport { ComponentProps, useMemo } from \"react\";\nimport { useResizeDetector } from \"react-resize-detector\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport TimeBasedChart, {\n  Props as TimeBasedChartProps,\n  ChartDefaultView,\n  TimeBasedChartTooltipData,\n} from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { getLineColor } from \"@foxglove/studio-base/util/plotColors\";\n\nimport { PlotXAxisVal } from \"./index\";\nimport { PlotPath, isReferenceLinePlotPathType } from \"./internalTypes\";\n\n// A \"reference line\" plot path is a numeric value. It creates a horizontal line on the plot at the specified value.\nfunction getAnnotationFromReferenceLine(path: PlotPath, index: number): AnnotationOptions {\n  const borderColor = getLineColor(path.color, index);\n  return {\n    type: \"line\",\n    display: true,\n    drawTime: \"beforeDatasetsDraw\",\n    scaleID: \"y\",\n    label: { content: path.value, width: \"100%\", height: \"100%\" },\n    borderColor,\n    borderDash: [5, 5],\n    borderWidth: 1,\n    value: Number.parseFloat(path.value),\n  };\n}\n\nfunction getAnnotations(paths: PlotPath[]) {\n  return filterMap(paths, (path: PlotPath, index: number) => {\n    if (!path.enabled) {\n      return undefined;\n    } else if (isReferenceLinePlotPathType(path)) {\n      return getAnnotationFromReferenceLine(path, index);\n    }\n    return undefined;\n  });\n}\n\ntype PlotChartProps = {\n  isSynced: boolean;\n  paths: PlotPath[];\n  minYValue: number;\n  maxYValue: number;\n  showXAxisLabels: boolean;\n  showYAxisLabels: boolean;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  tooltips: Map<string, TimeBasedChartTooltipData>;\n  xAxisVal: PlotXAxisVal;\n  currentTime?: number;\n  defaultView?: ChartDefaultView;\n  onClick?: TimeBasedChartProps[\"onClick\"];\n};\nexport default function PlotChart(props: PlotChartProps): JSX.Element {\n  const theme = useTheme();\n  const {\n    paths,\n    currentTime,\n    defaultView,\n    showXAxisLabels,\n    showYAxisLabels,\n    minYValue,\n    maxYValue,\n    datasets,\n    onClick,\n    isSynced,\n    tooltips,\n    xAxisVal,\n  } = props;\n\n  const annotations = useMemo(() => getAnnotations(paths), [paths]);\n\n  const yAxes = useMemo((): ScaleOptions<\"linear\"> => {\n    const min = isNaN(minYValue) ? undefined : minYValue;\n    const max = isNaN(maxYValue) ? undefined : maxYValue;\n    return {\n      min,\n      max,\n      ticks: {\n        display: showYAxisLabels,\n        precision: 3,\n      },\n      grid: {\n        color: theme.palette.divider,\n      },\n    };\n  }, [maxYValue, minYValue, showYAxisLabels, theme]);\n\n  // Use a debounce and 0 refresh rate to avoid triggering a resize observation while handling\n  // an existing resize observation.\n  // https://github.com/maslianok/react-resize-detector/issues/45\n  const {\n    width,\n    height,\n    ref: sizeRef,\n  } = useResizeDetector({\n    refreshRate: 0,\n    refreshMode: \"debounce\",\n  });\n\n  const data = useMemo(() => {\n    return { datasets };\n  }, [datasets]);\n\n  return (\n    <div style={{ width: \"100%\", flexGrow: 1, overflow: \"hidden\", padding: \"2px\" }} ref={sizeRef}>\n      <TimeBasedChart\n        key={xAxisVal}\n        isSynced={isSynced}\n        zoom\n        width={width ?? 0}\n        height={height ?? 0}\n        data={data}\n        tooltips={tooltips}\n        annotations={annotations}\n        type=\"scatter\"\n        yAxes={yAxes}\n        xAxisIsPlaybackTime={xAxisVal === \"timestamp\"}\n        showXAxisLabels={showXAxisLabels}\n        currentTime={currentTime}\n        defaultView={defaultView}\n        onClick={onClick}\n      />\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport type { BasePlotPath, PlotPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { PANEL_TITLE_CONFIG_KEY } from \"@foxglove/studio-base/util/layout\";\n\n// X-axis values:\nexport type PlotXAxisVal =\n  | \"timestamp\" // Message playback time. Preloaded.\n  | \"index\" // Message-path value index. One \"current\" message at playback time.\n  | \"custom\" // Message path data. Preloaded.\n  | \"currentCustom\"; // Message path data. One \"current\" message at playback time.\n\n/**\n * Coalesces null, undefined and empty string to undefined.\n */\nfunction presence<T>(value: undefined | T): undefined | T {\n  if (value === \"\") {\n    return undefined;\n  }\n\n  return value == undefined ? undefined : value;\n}\n\nexport function plotPathDisplayName(path: Readonly<PlotPath>, index: number): string {\n  return presence(path.label) ?? presence(path.value) ?? `Series ${index + 1}`;\n}\n\ntype DeprecatedPlotConfig = {\n  showSidebar?: boolean;\n  sidebarWidth?: number;\n};\nexport type PlotConfig = DeprecatedPlotConfig & {\n  /** @deprecated Replaced by global panel rename functionality https://github.com/foxglove/studio/pull/5225 */\n  title?: string;\n  paths: PlotPath[];\n  minXValue?: number;\n  maxXValue?: number;\n  minYValue?: string | number;\n  maxYValue?: string | number;\n  showLegend: boolean;\n  legendDisplay: \"floating\" | \"top\" | \"left\" | \"none\";\n  showPlotValuesInLegend: boolean;\n  showXAxisLabels: boolean;\n  showYAxisLabels: boolean;\n  isSynced: boolean;\n  xAxisVal: PlotXAxisVal;\n  xAxisPath?: BasePlotPath;\n  followingViewWidth?: number;\n  sidebarDimension: number;\n  [PANEL_TITLE_CONFIG_KEY]?: string;\n};\n\nexport const plotableRosTypes = [\n  \"bool\",\n  \"int8\",\n  \"uint8\",\n  \"int16\",\n  \"uint16\",\n  \"int32\",\n  \"uint32\",\n  \"int64\",\n  \"uint64\",\n  \"float32\",\n  \"float64\",\n  \"time\",\n  \"duration\",\n  \"string\",\n  \"json\",\n];\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { ErrorCircle16Filled, Square24Filled, Square24Regular } from \"@fluentui/react-icons\";\nimport { Checkbox, Tooltip, Typography } from \"@mui/material\";\nimport { ComponentProps, useMemo, useState } from \"react\";\nimport { makeStyles } from \"tss-react/mui\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { usePanelContext } from \"@foxglove/studio-base/components/PanelContext\";\nimport TimeBasedChart from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { useSelectedPanels } from \"@foxglove/studio-base/context/CurrentLayoutContext\";\nimport { useHoverValue } from \"@foxglove/studio-base/context/TimelineInteractionStateContext\";\nimport { useWorkspaceActions } from \"@foxglove/studio-base/context/WorkspaceContext\";\nimport { plotPathDisplayName } from \"@foxglove/studio-base/panels/Plot/types\";\nimport { getLineColor } from \"@foxglove/studio-base/util/plotColors\";\nimport { fonts } from \"@foxglove/studio-base/util/sharedStyleConstants\";\n\nimport { PlotPath } from \"./internalTypes\";\n\ntype PlotLegendRowProps = {\n  currentTime?: number;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  hasMismatchedDataLength: boolean;\n  index: number;\n  onClickPath: () => void;\n  path: PlotPath;\n  paths: PlotPath[];\n  savePaths: (paths: PlotPath[]) => void;\n  showPlotValuesInLegend: boolean;\n};\n\nconst ROW_HEIGHT = 28;\n\nconst useStyles = makeStyles<void, \"plotName\">()((theme, _params, classes) => ({\n  root: {\n    display: \"contents\",\n    cursor: \"pointer\",\n\n    \"&:hover\": {\n      \"& > *:last-child\": {\n        opacity: 1,\n      },\n      \"& > *\": {\n        backgroundColor: theme.palette.background.paper,\n        backgroundImage: `linear-gradient(${[\n          \"0deg\",\n          theme.palette.action.focus,\n          theme.palette.action.focus,\n        ].join(\" ,\")})`,\n      },\n    },\n  },\n  showPlotValue: {\n    [`.${classes.plotName}`]: {\n      gridColumn: \"span 1\",\n    },\n  },\n  listIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"sticky\",\n    height: ROW_HEIGHT,\n    left: 0,\n  },\n  checkbox: {\n    fontSize: \"1em\",\n    padding: theme.spacing(0.975),\n    borderRadius: 0,\n\n    \"svg:not(.MuiSvgIcon-root)\": {\n      fontSize: \"1em\",\n    },\n  },\n  disabledPathLabel: {\n    opacity: 0.5,\n  },\n  plotName: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: ROW_HEIGHT,\n    padding: theme.spacing(0, 1.5, 0, 0.5),\n    gridColumn: \"span 2\",\n    fontFeatureSettings: `${fonts.SANS_SERIF_FEATURE_SETTINGS}, \"zero\"`,\n\n    \".MuiTypography-root\": {\n      whiteSpace: \"nowrap\",\n    },\n  },\n  plotValue: {\n    display: \"flex\",\n    alignItems: \"center\",\n    height: ROW_HEIGHT,\n    padding: theme.spacing(0.25, 1, 0.25, 0.25),\n  },\n  errorIcon: {\n    color: theme.palette.error.main,\n  },\n}));\n\nexport function PlotLegendRow({\n  currentTime,\n  datasets,\n  hasMismatchedDataLength,\n  index,\n  onClickPath,\n  path,\n  paths,\n  savePaths,\n  showPlotValuesInLegend,\n}: PlotLegendRowProps): JSX.Element {\n  const { openPanelSettings } = useWorkspaceActions();\n  const { id: panelId } = usePanelContext();\n  const { setSelectedPanelIds } = useSelectedPanels();\n  const { classes, cx } = useStyles();\n\n  const correspondingData = useMemo(() => {\n    if (!showPlotValuesInLegend) {\n      return [];\n    }\n    return datasets[index]?.data ?? [];\n  }, [datasets, index, showPlotValuesInLegend]);\n\n  const [hoverComponentId] = useState<string>(() => uuidv4());\n  const hoverValue = useHoverValue({\n    componentId: hoverComponentId,\n    isTimestampScale: true,\n  });\n\n  const currentValue = useMemo(() => {\n    if (!showPlotValuesInLegend) {\n      return undefined;\n    }\n    const timeToCompare = hoverValue?.value ?? currentTime;\n\n    let value;\n    for (const pt of correspondingData) {\n      if (timeToCompare == undefined || pt == undefined || pt.x > timeToCompare) {\n        break;\n      }\n      value = pt.y;\n    }\n    return value;\n  }, [showPlotValuesInLegend, hoverValue?.value, currentTime, correspondingData]);\n\n  return (\n    <div\n      className={cx(classes.root, {\n        [classes.showPlotValue]: showPlotValuesInLegend,\n      })}\n      onClick={() => {\n        setSelectedPanelIds([panelId]);\n        openPanelSettings();\n        onClickPath();\n      }}\n    >\n      <div className={classes.listIcon}>\n        <Checkbox\n          className={classes.checkbox}\n          checked={path.enabled}\n          size=\"small\"\n          title=\"Toggle visibility\"\n          style={{ color: getLineColor(path.color, index) }}\n          icon={<Square24Regular />}\n          checkedIcon={<Square24Filled />}\n          onChange={(event) => {\n            event.stopPropagation();\n\n            const newPaths = paths.slice();\n            const newPath = newPaths[index];\n\n            if (newPath) {\n              newPaths[index] = { ...newPath, enabled: !newPath.enabled };\n            }\n            savePaths(newPaths);\n          }}\n        />\n      </div>\n      <div\n        className={classes.plotName}\n        style={{ gridColumn: !showPlotValuesInLegend ? \"span 2\" : undefined }}\n      >\n        <Typography\n          noWrap={showPlotValuesInLegend}\n          flex=\"auto\"\n          variant=\"body2\"\n          className={cx({ [classes.disabledPathLabel]: !path.enabled })}\n        >\n          {plotPathDisplayName(path, index)}\n        </Typography>\n        {hasMismatchedDataLength && (\n          <Tooltip\n            placement=\"top\"\n            title=\"Mismatch in the number of elements in x-axis and y-axis messages\"\n          >\n            <ErrorCircle16Filled className={classes.errorIcon} />\n          </Tooltip>\n        )}\n      </div>\n      {showPlotValuesInLegend && (\n        <div className={classes.plotValue}>\n          <Typography\n            variant=\"body2\"\n            align=\"right\"\n            color={hoverValue?.value != undefined ? \"warning.main\" : \"text.secondary\"}\n          >\n            {currentValue ?? \"\"}\n          </Typography>\n        </div>\n      )}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport {\n  ChevronDown20Regular,\n  ChevronUp20Regular,\n  ChevronLeft20Regular,\n  ChevronRight20Regular,\n  TextBulletListLtr20Filled,\n  ArrowMinimize24Filled,\n} from \"@fluentui/react-icons\";\nimport { IconButton } from \"@mui/material\";\nimport { clamp } from \"lodash\";\nimport { ComponentProps, useCallback, useMemo, useRef } from \"react\";\nimport tinycolor from \"tinycolor2\";\nimport { makeStyles } from \"tss-react/mui\";\n\nimport { PANEL_TOOLBAR_MIN_HEIGHT } from \"@foxglove/studio-base/components/PanelToolbar\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport TimeBasedChart from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { PlotLegendRow } from \"@foxglove/studio-base/panels/Plot/PlotLegendRow\";\nimport { PlotPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { PlotConfig } from \"@foxglove/studio-base/panels/Plot/types\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\n\nconst minLegendWidth = 25;\nconst maxLegendWidth = 800;\n\ntype Props = {\n  currentTime?: number;\n  datasets: ComponentProps<typeof TimeBasedChart>[\"data\"][\"datasets\"];\n  legendDisplay: \"floating\" | \"top\" | \"left\";\n  onClickPath: (index: number) => void;\n  paths: PlotPath[];\n  pathsWithMismatchedDataLengths: string[];\n  saveConfig: SaveConfig<PlotConfig>;\n  showLegend: boolean;\n  showPlotValuesInLegend: boolean;\n  sidebarDimension: number;\n};\n\nconst useStyles = makeStyles<void, \"container\" | \"toggleButton\" | \"toggleButtonFloating\">()(\n  ({ palette, shadows, shape, spacing }, _params, classes) => ({\n    root: {\n      display: \"flex\",\n      overflow: \"hidden\",\n    },\n    rootFloating: {\n      padding: spacing(0.75), // pad the container to prevent shadow from being clipped\n      pointerEvents: \"none\",\n      gap: spacing(0.75),\n      position: \"absolute\",\n      top: spacing(4.5),\n      left: spacing(4),\n      zIndex: 1000,\n      backgroundColor: \"transparent\",\n      alignItems: \"flex-start\",\n      height: `calc(100% - ${PANEL_TOOLBAR_MIN_HEIGHT}px - ${spacing(5.25)})`,\n      overflow: \"hidden\",\n\n      [`.${classes.container}`]: {\n        pointerEvents: \"auto\",\n        borderRadius: shape.borderRadius,\n        backgroundImage: `linear-gradient(${[\n          \"0deg\",\n          tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n          tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n        ].join(\" ,\")})`,\n        backgroundColor: tinycolor(palette.background.paper).setAlpha(0.8).toHex8String(),\n        backdropFilter: \"blur(3px)\",\n        maxWidth: `calc(100% - ${spacing(1)})`,\n        boxShadow: shadows[3],\n      },\n    },\n    rootLeft: {\n      alignItems: \"flex-start\",\n      maxWidth: \"80%\",\n\n      [`.${classes.toggleButton}`]: {\n        padding: spacing(0.25),\n        height: \"100%\",\n        borderRadius: 0,\n        borderTop: \"none\",\n        borderBottom: \"none\",\n      },\n      [`.${classes.container}`]: {\n        overflow: \"auto\",\n        height: \"100%\",\n        alignContent: \"flex-start\",\n      },\n    },\n    rootTop: {\n      flexDirection: \"column\",\n      maxHeight: \"80%\",\n\n      [`.${classes.toggleButton}`]: {\n        padding: spacing(0.25),\n        borderRadius: 0,\n        borderRight: \"none\",\n        borderLeft: \"none\",\n      },\n    },\n    container: {\n      alignItems: \"center\",\n      overflow: \"auto\",\n      display: \"grid\",\n      gridTemplateColumns: \"auto minmax(0, 1fr) auto\",\n    },\n    dragHandle: {\n      userSelect: \"none\",\n      border: `0px solid ${palette.action.hover}`,\n\n      \"&:hover\": {\n        borderColor: palette.action.selected,\n      },\n    },\n    toggleButton: {\n      fontSize: \"1rem\",\n      padding: spacing(0.75),\n\n      \"svg:not(.MuiSvgIcon-root)\": {\n        fontSize: \"1em\",\n      },\n    },\n    toggleButtonFloating: {\n      backdropFilter: \"blur(3px)\",\n      pointerEvents: \"auto\",\n      backgroundImage: `linear-gradient(${[\n        \"0deg\",\n        tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n        tinycolor(palette.background.default).setAlpha(0.2).toHex8String(),\n      ].join(\" ,\")})`,\n      backgroundColor: tinycolor(palette.background.paper).setAlpha(0.8).toHex8String(),\n      boxShadow: shadows[3],\n\n      \"&:hover\": {\n        backgroundColor: palette.background.paper,\n        backgroundImage: `linear-gradient(0deg, ${palette.action.hover}, ${palette.action.hover})`,\n      },\n    },\n  }),\n);\n\nexport function PlotLegend(props: Props): JSX.Element {\n  const {\n    currentTime,\n    datasets,\n    legendDisplay,\n    onClickPath,\n    paths,\n    pathsWithMismatchedDataLengths,\n    saveConfig,\n    showLegend,\n    showPlotValuesInLegend,\n    sidebarDimension,\n  } = props;\n  const { classes, cx } = useStyles();\n\n  const dragStart = useRef({ x: 0, y: 0, sidebarDimension: 0 });\n\n  const toggleLegend = useCallback(\n    () => saveConfig({ showLegend: !showLegend }),\n    [showLegend, saveConfig],\n  );\n\n  const legendIcon = useMemo(() => {\n    switch (legendDisplay) {\n      case \"floating\":\n        return showLegend ? <ArrowMinimize24Filled /> : <TextBulletListLtr20Filled />;\n      case \"left\":\n        return showLegend ? <ChevronLeft20Regular /> : <ChevronRight20Regular />;\n      case \"top\":\n        return showLegend ? <ChevronUp20Regular /> : <ChevronDown20Regular />;\n    }\n  }, [showLegend, legendDisplay]);\n\n  const handlePointerMove = useCallback(\n    (event: React.PointerEvent) => {\n      if (legendDisplay === \"floating\" || event.buttons !== 1) {\n        return;\n      }\n      const delta =\n        legendDisplay === \"left\"\n          ? event.clientX - dragStart.current.x\n          : event.clientY - dragStart.current.y;\n      const newDimension = clamp(\n        dragStart.current.sidebarDimension + delta,\n        minLegendWidth,\n        maxLegendWidth,\n      );\n      saveConfig({ sidebarDimension: newDimension });\n    },\n    [legendDisplay, saveConfig],\n  );\n\n  const handlePointerDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.currentTarget.setPointerCapture(event.pointerId);\n      dragStart.current = { x: event.clientX, y: event.clientY, sidebarDimension };\n    },\n    [sidebarDimension],\n  );\n\n  const handlePointerUp = useCallback((event: React.PointerEvent) => {\n    event.currentTarget.releasePointerCapture(event.pointerId);\n  }, []);\n\n  const savePaths = useCallback(\n    (newPaths: PlotPath[]) => {\n      saveConfig({ paths: newPaths });\n    },\n    [saveConfig],\n  );\n\n  return (\n    <div\n      className={cx(classes.root, {\n        [classes.rootFloating]: legendDisplay === \"floating\",\n        [classes.rootLeft]: legendDisplay === \"left\",\n        [classes.rootTop]: legendDisplay === \"top\",\n      })}\n    >\n      <IconButton\n        onClick={toggleLegend}\n        className={cx(classes.toggleButton, {\n          [classes.toggleButtonFloating]: legendDisplay === \"floating\",\n        })}\n      >\n        {legendIcon}\n      </IconButton>\n      {showLegend && (\n        <Stack\n          flexGrow={1}\n          gap={0.5}\n          overflow=\"auto\"\n          fullHeight={legendDisplay !== \"top\"}\n          style={{\n            height: legendDisplay === \"top\" ? Math.round(sidebarDimension) : undefined,\n            width: legendDisplay === \"left\" ? Math.round(sidebarDimension) : undefined,\n          }}\n        >\n          <Stack\n            flex=\"auto\"\n            fullWidth\n            fullHeight={legendDisplay !== \"top\"}\n            overflow={legendDisplay === \"floating\" ? \"auto\" : undefined}\n          >\n            <div className={classes.container}>\n              {paths.map((path, index) => (\n                <PlotLegendRow\n                  key={index}\n                  index={index}\n                  onClickPath={() => onClickPath(index)}\n                  path={path}\n                  paths={paths}\n                  hasMismatchedDataLength={pathsWithMismatchedDataLengths.includes(path.value)}\n                  datasets={datasets}\n                  currentTime={currentTime}\n                  savePaths={savePaths}\n                  showPlotValuesInLegend={showPlotValuesInLegend}\n                />\n              ))}\n            </div>\n          </Stack>\n        </Stack>\n      )}\n      {legendDisplay !== \"floating\" && (\n        <div\n          className={classes.dragHandle}\n          onPointerDown={handlePointerDown}\n          onPointerMove={handlePointerMove}\n          onPointerUp={handlePointerUp}\n          style={\n            legendDisplay === \"left\"\n              ? {\n                  marginLeft: -6,\n                  cursor: \"ew-resize\",\n                  borderRightWidth: 2,\n                  height: \"100%\",\n                  width: 4,\n                }\n              : {\n                  marginTop: -6,\n                  cursor: \"ns-resize\",\n                  borderBottomWidth: 2,\n                  width: \"100%\",\n                  height: 4,\n                }\n          }\n        />\n      )}\n    </div>\n  );\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { downloadFiles } from \"@foxglove/studio-base/util/download\";\nimport { formatTimeRaw } from \"@foxglove/studio-base/util/time\";\n\nimport { DataSet, Datum } from \"./internalTypes\";\nimport { PlotXAxisVal } from \"./types\";\n\nfunction getCSVRow(label: string | undefined, data: Datum) {\n  const { x, value, receiveTime, headerStamp } = data;\n  const receiveTimeFloat = formatTimeRaw(receiveTime);\n  const stampTime = headerStamp ? formatTimeRaw(headerStamp) : \"\";\n  return [x, receiveTimeFloat, stampTime, label, value];\n}\n\nconst getCVSColName = (xAxisVal: PlotXAxisVal): string => {\n  return {\n    timestamp: \"elapsed time\",\n    index: \"index\",\n    custom: \"x value\",\n    currentCustom: \"x value\",\n  }[xAxisVal];\n};\n\nfunction generateCSV(datasets: DataSet[], xAxisVal: PlotXAxisVal): string {\n  const headLine = [getCVSColName(xAxisVal), \"receive time\", \"header.stamp\", \"topic\", \"value\"];\n  const combinedLines = [];\n  combinedLines.push(headLine);\n  for (const dataset of datasets) {\n    for (const datum of dataset.data) {\n      combinedLines.push(getCSVRow(dataset.label, datum));\n    }\n  }\n  return combinedLines.join(\"\\n\");\n}\n\nfunction downloadCSV(datasets: DataSet[], xAxisVal: PlotXAxisVal): void {\n  const csvData = generateCSV(datasets, xAxisVal);\n  const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8;\" });\n  downloadFiles([{ blob, fileName: `plot_data.csv` }]);\n}\n\nexport { downloadCSV, generateCSV };\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nexport type MathFunction = (arg: number) => number;\n\nexport function derivative<T extends { x: number; y: number; path: string }>(data: T[]): T[] {\n  const newDatums = [];\n  for (let i = 1; i < data.length; i++) {\n    const item = data[i]!;\n    const prevItem = data[i - 1]!;\n    const secondsDifference = item.x - prevItem.x;\n    const value = (item.y - prevItem.y) / secondsDifference;\n    newDatums.push({\n      ...item,\n      y: value,\n      value,\n      path: `${item.path}.@derivative`,\n    });\n  }\n  return newDatums;\n}\n\nexport const mathFunctions: { [fn: string]: MathFunction } = {\n  abs: Math.abs,\n  acos: Math.acos,\n  asin: Math.asin,\n  atan: Math.atan,\n  ceil: Math.ceil,\n  cos: Math.cos,\n  log: Math.log,\n  log1p: Math.log1p,\n  log2: Math.log2,\n  log10: Math.log10,\n  round: Math.round,\n  sign: Math.sign,\n  sin: Math.sin,\n  sqrt: Math.sqrt,\n  tan: Math.tan,\n  trunc: Math.trunc,\n  negative: (value: number) => -value,\n  deg2rad: (degrees: number) => degrees * (Math.PI / 180),\n  rad2deg: (radians: number) => radians * (180 / Math.PI),\n};\n\nexport function applyToDatum<T extends { y: number | string | bigint; path: string }>(\n  datum: T,\n  func: MathFunction,\n): T {\n  let { y } = datum;\n  const numericYValue: number = Number(y);\n  // Only apply the function if the Y value is a valid number.\n  if (!isNaN(numericYValue)) {\n    y = func(numericYValue);\n  }\n  return { ...datum, y, value: y, path: `${datum.path}.@${func.name}` };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { isTime, subtract, Time, toSec } from \"@foxglove/rostime\";\nimport { format } from \"@foxglove/studio-base/util/formatTime\";\nimport { darkColor, getLineColor, lightColor } from \"@foxglove/studio-base/util/plotColors\";\nimport { formatTimeRaw, TimestampMethod } from \"@foxglove/studio-base/util/time\";\n\nimport { PlotXAxisVal } from \"./index\";\nimport {\n  BasePlotPath,\n  DataSet,\n  Datum,\n  isReferenceLinePlotPathType,\n  PlotDataByPath,\n  PlotDataItem,\n  PlotPath,\n} from \"./internalTypes\";\nimport { applyToDatum, derivative, MathFunction, mathFunctions } from \"./transformPlotRange\";\n\nconst isCustomScale = (xAxisVal: PlotXAxisVal): boolean =>\n  xAxisVal === \"custom\" || xAxisVal === \"currentCustom\";\n\nfunction getXForPoint(\n  xAxisVal: PlotXAxisVal,\n  timestamp: number,\n  innerIdx: number,\n  xAxisRanges: readonly (readonly PlotDataItem[])[] | undefined,\n  xItem: PlotDataItem | undefined,\n  xAxisPath: BasePlotPath | undefined,\n): number | bigint {\n  if (isCustomScale(xAxisVal) && xAxisPath) {\n    if (isReferenceLinePlotPathType(xAxisPath)) {\n      return Number.parseFloat(xAxisPath.value);\n    }\n    if (xAxisRanges) {\n      if (!xItem) {\n        return NaN;\n      }\n      const value = xItem.queriedData[innerIdx]?.value;\n      return isTime(value) ? toSec(value) : typeof value === \"bigint\" ? value : Number(value);\n    }\n  }\n  return xAxisVal === \"timestamp\" ? timestamp : innerIdx;\n}\n\nfunction getDatumsForMessagePathItem(\n  yItem: PlotDataItem,\n  xItem: PlotDataItem | undefined,\n  startTime: Time,\n  timestampMethod: TimestampMethod,\n  xAxisVal: PlotXAxisVal,\n  xAxisPath?: BasePlotPath,\n  xAxisRanges?: readonly (readonly PlotDataItem[])[],\n): { data: Datum[]; hasMismatchedData: boolean } {\n  const timestamp = timestampMethod === \"headerStamp\" ? yItem.headerStamp : yItem.receiveTime;\n  if (!timestamp) {\n    return { data: [], hasMismatchedData: false };\n  }\n  const data: Datum[] = [];\n  const elapsedTime = toSec(subtract(timestamp, startTime));\n  for (const entry of yItem.queriedData.entries()) {\n    const [innerIdx, { value, path: queriedPath, constantName }] = entry;\n    if (\n      typeof value === \"number\" ||\n      typeof value === \"boolean\" ||\n      typeof value === \"string\" ||\n      typeof value === \"bigint\"\n    ) {\n      const valueNum = typeof value === \"bigint\" ? value : Number(value);\n      if (typeof valueNum === \"bigint\" || !isNaN(valueNum)) {\n        const x = getXForPoint(xAxisVal, elapsedTime, innerIdx, xAxisRanges, xItem, xAxisPath);\n        const y = valueNum;\n\n        data.push({\n          x: Number(x),\n          y: Number(y),\n          path: queriedPath,\n          value,\n          constantName,\n          receiveTime: yItem.receiveTime,\n          headerStamp: yItem.headerStamp,\n        });\n      }\n    } else if (isTime(value)) {\n      const x = getXForPoint(xAxisVal, elapsedTime, innerIdx, xAxisRanges, xItem, xAxisPath);\n      const y = toSec(value);\n\n      data.push({\n        x: Number(x),\n        y,\n        path: queriedPath,\n        receiveTime: yItem.receiveTime,\n        headerStamp: yItem.headerStamp,\n        value: `${format(value)} (${formatTimeRaw(value)})`,\n        constantName,\n      });\n    }\n  }\n\n  const hasMismatchedData =\n    isCustomScale(xAxisVal) && (!xItem || yItem.queriedData.length !== xItem.queriedData.length);\n  return { data, hasMismatchedData };\n}\n\nfunction getDatasetsFromMessagePlotPath({\n  path,\n  yAxisRanges,\n  index,\n  startTime,\n  xAxisVal,\n  xAxisRanges,\n  xAxisPath,\n  invertedTheme = false,\n}: {\n  path: PlotPath;\n  yAxisRanges: readonly (readonly PlotDataItem[])[];\n  index: number;\n  startTime: Time;\n  xAxisVal: PlotXAxisVal;\n  xAxisRanges: readonly (readonly PlotDataItem[])[] | undefined;\n  xAxisPath?: BasePlotPath;\n  invertedTheme?: boolean;\n}): {\n  dataset: DataSet;\n  hasMismatchedData: boolean;\n} {\n  let showLine = true;\n  let hasMismatchedData =\n    isCustomScale(xAxisVal) &&\n    xAxisRanges != undefined &&\n    (yAxisRanges.length !== xAxisRanges.length ||\n      xAxisRanges.every((range, rangeIndex) => range.length !== yAxisRanges[rangeIndex]?.length));\n\n  const plotData: Datum[] = [];\n\n  let maybeMathFn: MathFunction | undefined;\n  for (const funcName of Object.keys(mathFunctions)) {\n    if (path.value.endsWith(`.@${funcName}`)) {\n      maybeMathFn = mathFunctions[funcName];\n      if (maybeMathFn) {\n        break;\n      }\n    }\n  }\n\n  for (const [rangeIdx, range] of yAxisRanges.entries()) {\n    const xRange: readonly PlotDataItem[] | undefined = xAxisRanges?.[rangeIdx];\n    let rangeData: Datum[] = [];\n    for (const [outerIdx, item] of range.entries()) {\n      const xItem: PlotDataItem | undefined = xRange?.[outerIdx];\n      const { data: datums, hasMismatchedData: itemHasMistmatchedData } =\n        getDatumsForMessagePathItem(\n          item,\n          xItem,\n          startTime,\n          path.timestampMethod,\n          xAxisVal,\n          xAxisPath,\n          xAxisRanges,\n        );\n\n      for (const datum of datums) {\n        if (maybeMathFn) {\n          rangeData.push(applyToDatum(datum, maybeMathFn));\n        } else {\n          rangeData.push(datum);\n        }\n      }\n\n      hasMismatchedData = hasMismatchedData || itemHasMistmatchedData;\n      // If we have added more than one point for this message, make it a scatter plot.\n      if (item.queriedData.length > 1 && xAxisVal !== \"index\") {\n        showLine = false;\n      }\n    }\n\n    if (path.value.endsWith(\".@derivative\")) {\n      if (showLine) {\n        rangeData = derivative(rangeData);\n      } else {\n        // If we have a scatter plot, we can't take the derivative, so instead show nothing\n        rangeData = [];\n      }\n    }\n\n    // Messages are provided in receive time order but header stamps might be out of order\n    // This would create zig-zag lines connecting the wrong points. Sorting the header stamp values (x)\n    // results in the datums being in the correct order for connected lines.\n    //\n    // An example is when messages at the same receive time have different header stamps. The receive\n    // time ordering is undefined (could be different for different data sources), but the header stamps\n    // still need sorting so the plot renders correctly.\n    if (path.timestampMethod === \"headerStamp\") {\n      rangeData.sort((a, b) => a.x - b.x);\n    }\n\n    // NaN points are not displayed, and result in a break in the line.\n    // We add NaN points before each range (avoid adding before the very first range)\n    if (rangeIdx > 0) {\n      plotData.push({\n        x: NaN,\n        y: NaN,\n        receiveTime: { sec: 0, nsec: 0 },\n        value: \"\",\n        path: path.value,\n      });\n    }\n    for (const datum of rangeData) {\n      plotData.push(datum);\n    }\n  }\n\n  const borderColor = getLineColor(path.color, index);\n  const dataset: DataSet = {\n    borderColor,\n    label: path.label != undefined && path.label !== \"\" ? path.label : path.value,\n    showLine,\n    fill: false,\n    borderWidth: 1,\n    pointRadius: 1,\n    pointHoverRadius: 3,\n    pointBackgroundColor: invertedTheme ? lightColor(borderColor) : darkColor(borderColor),\n    pointBorderColor: \"transparent\",\n    data: plotData,\n  };\n  return {\n    dataset,\n    hasMismatchedData,\n  };\n}\n\ntype Args = {\n  paths: PlotPath[];\n  itemsByPath: PlotDataByPath;\n  startTime: Time;\n  xAxisVal: PlotXAxisVal;\n  xAxisPath?: BasePlotPath;\n  invertedTheme?: boolean;\n};\n\ntype ReturnVal = {\n  datasets: DataSet[];\n  pathsWithMismatchedDataLengths: string[];\n};\n\nexport function getDatasets({\n  paths,\n  itemsByPath,\n  startTime,\n  xAxisVal,\n  xAxisPath,\n  invertedTheme,\n}: Args): ReturnVal {\n  const pathsWithMismatchedDataLengths: string[] = [];\n  const datasets = filterMap(paths, (path: PlotPath, index: number) => {\n    const yRanges = itemsByPath[path.value] ?? [];\n    const xRanges = xAxisPath && itemsByPath[xAxisPath.value];\n    if (!path.enabled) {\n      return undefined;\n    } else if (!isReferenceLinePlotPathType(path)) {\n      const res = getDatasetsFromMessagePlotPath({\n        path,\n        yAxisRanges: yRanges,\n        index,\n        startTime,\n        xAxisVal,\n        xAxisRanges: xRanges,\n        xAxisPath,\n        invertedTheme,\n      });\n\n      if (res.hasMismatchedData) {\n        pathsWithMismatchedDataLengths.push(path.value);\n      }\n      return res.dataset;\n    }\n    return undefined;\n  });\n\n  return {\n    datasets,\n    pathsWithMismatchedDataLengths,\n  };\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\nimport { TFunction } from \"i18next\";\nimport produce from \"immer\";\nimport { isEqual, isNumber, set } from \"lodash\";\nimport memoizeWeak from \"memoize-weak\";\nimport { useCallback, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { SettingsTreeAction, SettingsTreeNode, SettingsTreeNodes } from \"@foxglove/studio\";\nimport { PlotPath } from \"@foxglove/studio-base/panels/Plot/internalTypes\";\nimport { usePanelSettingsTreeUpdate } from \"@foxglove/studio-base/providers/PanelStateContextProvider\";\nimport { SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { lineColors } from \"@foxglove/studio-base/util/plotColors\";\n\nimport { plotableRosTypes, PlotConfig, plotPathDisplayName } from \"./types\";\n\nconst makeSeriesNode = memoizeWeak(\n  (path: PlotPath, index: number, t: TFunction<\"plot\">): SettingsTreeNode => {\n    return {\n      actions: [\n        {\n          type: \"action\",\n          id: \"delete-series\",\n          label: t(\"deleteSeries\"),\n          display: \"inline\",\n          icon: \"Clear\",\n        },\n      ],\n      label: plotPathDisplayName(path, index),\n      visible: path.enabled,\n      fields: {\n        value: {\n          label: t(\"messagePath\"),\n          input: \"messagepath\",\n          value: path.value,\n          validTypes: plotableRosTypes,\n        },\n        label: {\n          input: \"string\",\n          label: t(\"label\"),\n          value: path.label,\n        },\n        color: {\n          input: \"rgb\",\n          label: t(\"color\"),\n          value: path.color ?? lineColors[index % lineColors.length],\n        },\n        timestampMethod: {\n          input: \"select\",\n          label: t(\"timestamp\"),\n          value: path.timestampMethod,\n          options: [\n            { label: t(\"receiveTime\"), value: \"receiveTime\" },\n            { label: t(\"headerStamp\"), value: \"headerStamp\" },\n          ],\n        },\n      },\n    };\n  },\n);\n\nconst makeRootSeriesNode = memoizeWeak(\n  (paths: PlotPath[], t: TFunction<\"plot\">): SettingsTreeNode => {\n    const children = Object.fromEntries(\n      paths.map((path, index) => [`${index}`, makeSeriesNode(path, index, t)]),\n    );\n    return {\n      label: t(\"series\"),\n      children,\n      actions: [\n        {\n          type: \"action\",\n          id: \"add-series\",\n          label: t(\"addSeries\"),\n          display: \"inline\",\n          icon: \"Addchart\",\n        },\n      ],\n    };\n  },\n);\n\nfunction buildSettingsTree(config: PlotConfig, t: TFunction<\"plot\">): SettingsTreeNodes {\n  const maxYError =\n    isNumber(config.minYValue) && isNumber(config.maxYValue) && config.minYValue >= config.maxYValue\n      ? t(\"maxYError\")\n      : undefined;\n\n  const maxXError =\n    isNumber(config.minXValue) && isNumber(config.maxXValue) && config.minXValue >= config.maxXValue\n      ? t(\"maxXError\")\n      : undefined;\n\n  return {\n    general: {\n      label: t(\"general\"),\n      fields: {\n        isSynced: { label: t(\"syncWithOtherPlots\"), input: \"boolean\", value: config.isSynced },\n      },\n    },\n    legend: {\n      label: t(\"legend\"),\n      fields: {\n        legendDisplay: {\n          label: t(\"position\"),\n          input: \"select\",\n          value: config.legendDisplay,\n          options: [\n            { value: \"floating\", label: t(\"floating\") },\n            { value: \"left\", label: t(\"left\") },\n            { value: \"top\", label: t(\"top\") },\n            { value: \"none\", label: t(\"hidden\") },\n          ],\n        },\n        showPlotValuesInLegend: {\n          label: t(\"showValues\"),\n          input: \"boolean\",\n          value: config.showPlotValuesInLegend,\n        },\n      },\n    },\n    yAxis: {\n      label: t(\"yAxis\"),\n      defaultExpansionState: \"collapsed\",\n      fields: {\n        showYAxisLabels: {\n          label: t(\"showLabels\"),\n          input: \"boolean\",\n          value: config.showYAxisLabels,\n        },\n        minYValue: {\n          label: t(\"min\"),\n          input: \"number\",\n          value: config.minYValue != undefined ? Number(config.minYValue) : undefined,\n          placeholder: \"auto\",\n        },\n        maxYValue: {\n          label: t(\"max\"),\n          input: \"number\",\n          error: maxYError,\n          value: config.maxYValue != undefined ? Number(config.maxYValue) : undefined,\n          placeholder: \"auto\",\n        },\n      },\n    },\n    xAxis: {\n      label: t(\"xAxis\"),\n      defaultExpansionState: \"collapsed\",\n      fields: {\n        xAxisVal: {\n          label: t(\"value\"),\n          input: \"select\",\n          value: config.xAxisVal,\n          options: [\n            { label: t(\"timestamp\"), value: \"timestamp\" },\n            { label: t(\"index\"), value: \"index\" },\n            { label: t(\"currentPath\"), value: \"currentCustom\" },\n            { label: t(\"accumulatedPath\"), value: \"custom\" },\n          ],\n        },\n        xAxisPath:\n          config.xAxisVal === \"currentCustom\" || config.xAxisVal === \"custom\"\n            ? {\n                label: t(\"messagePath\"),\n                input: \"messagepath\",\n                value: config.xAxisPath?.value ?? \"\",\n                validTypes: plotableRosTypes,\n              }\n            : undefined,\n        showXAxisLabels: {\n          label: t(\"showLabels\"),\n          input: \"boolean\",\n          value: config.showXAxisLabels,\n        },\n        minXValue: {\n          label: t(\"min\"),\n          input: \"number\",\n          value: config.minXValue != undefined ? Number(config.minXValue) : undefined,\n          placeholder: \"auto\",\n        },\n        maxXValue: {\n          label: t(\"max\"),\n          input: \"number\",\n          error: maxXError,\n          value: config.maxXValue != undefined ? Number(config.maxXValue) : undefined,\n          placeholder: \"auto\",\n        },\n        followingViewWidth: {\n          label: t(\"secondsRange\"),\n          input: \"number\",\n          placeholder: \"auto\",\n          value: config.followingViewWidth,\n        },\n      },\n    },\n    paths: makeRootSeriesNode(config.paths, t),\n  };\n}\n\nexport function usePlotPanelSettings(\n  config: PlotConfig,\n  saveConfig: SaveConfig<PlotConfig>,\n  focusedPath?: readonly string[],\n): void {\n  const updatePanelSettingsTree = usePanelSettingsTreeUpdate();\n  const { t } = useTranslation(\"plot\");\n\n  const actionHandler = useCallback(\n    (action: SettingsTreeAction) => {\n      if (action.action === \"update\") {\n        const { path, value } = action.payload;\n        saveConfig(\n          produce((draft) => {\n            if (path[0] === \"paths\") {\n              if (path[2] === \"visible\") {\n                set(draft, [...path.slice(0, 2), \"enabled\"], value);\n              } else {\n                set(draft, path, value);\n              }\n            } else if (isEqual(path, [\"legend\", \"legendDisplay\"])) {\n              draft.legendDisplay = value;\n              draft.showLegend = true;\n            } else if (isEqual(path, [\"xAxis\", \"xAxisPath\"])) {\n              set(draft, [\"xAxisPath\", \"value\"], value);\n            } else {\n              set(draft, path.slice(1), value);\n\n              // X min/max and following width are mutually exclusive.\n              if (path[1] === \"followingViewWidth\") {\n                draft.minXValue = undefined;\n                draft.maxXValue = undefined;\n              } else if (path[1] === \"minXValue\" || path[1] === \"maxXValue\") {\n                draft.followingViewWidth = undefined;\n              }\n            }\n          }),\n        );\n      } else {\n        if (action.payload.id === \"add-series\") {\n          saveConfig(\n            produce<PlotConfig>((draft) => {\n              draft.paths.push({\n                timestampMethod: \"receiveTime\",\n                value: \"\",\n                enabled: true,\n              });\n            }),\n          );\n        } else if (action.payload.id === \"delete-series\") {\n          const index = action.payload.path[1];\n          saveConfig(\n            produce<PlotConfig>((draft) => {\n              draft.paths.splice(Number(index), 1);\n            }),\n          );\n        }\n      }\n    },\n    [saveConfig],\n  );\n\n  useEffect(() => {\n    updatePanelSettingsTree({\n      actionHandler,\n      focusedPath,\n      nodes: buildSettingsTree(config, t),\n    });\n  }, [actionHandler, config, focusedPath, updatePanelSettingsTree, t]);\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport DownloadIcon from \"@mui/icons-material/Download\";\nimport { useTheme } from \"@mui/material\";\nimport { compact, isNumber, uniq } from \"lodash\";\nimport memoizeWeak from \"memoize-weak\";\nimport { ComponentProps, useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { filterMap } from \"@foxglove/den/collection\";\nimport { useShallowMemo } from \"@foxglove/hooks\";\nimport {\n  add as addTimes,\n  fromSec,\n  subtract as subtractTimes,\n  Time,\n  toSec,\n} from \"@foxglove/rostime\";\nimport { MessageEvent } from \"@foxglove/studio\";\nimport { useBlocksByTopic, useMessageReducer } from \"@foxglove/studio-base/PanelAPI\";\nimport { MessageBlock } from \"@foxglove/studio-base/PanelAPI/useBlocksByTopic\";\nimport parseRosPath, {\n  getTopicsFromPaths,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/parseRosPath\";\nimport {\n  MessageDataItemsByPath,\n  useCachedGetMessagePathDataItems,\n  useDecodeMessagePathsForMessagesByTopic,\n} from \"@foxglove/studio-base/components/MessagePathSyntax/useCachedGetMessagePathDataItems\";\nimport {\n  MessagePipelineContext,\n  useMessagePipeline,\n  useMessagePipelineGetter,\n} from \"@foxglove/studio-base/components/MessagePipeline\";\nimport Panel from \"@foxglove/studio-base/components/Panel\";\nimport PanelToolbar, {\n  PANEL_TOOLBAR_MIN_HEIGHT,\n} from \"@foxglove/studio-base/components/PanelToolbar\";\nimport ToolbarIconButton from \"@foxglove/studio-base/components/PanelToolbar/ToolbarIconButton\";\nimport Stack from \"@foxglove/studio-base/components/Stack\";\nimport {\n  ChartDefaultView,\n  TimeBasedChartTooltipData,\n} from \"@foxglove/studio-base/components/TimeBasedChart\";\nimport { OnClickArg as OnChartClickArgs } from \"@foxglove/studio-base/src/components/Chart\";\nimport { OpenSiblingPanel, PanelConfig, SaveConfig } from \"@foxglove/studio-base/types/panels\";\nimport { PANEL_TITLE_CONFIG_KEY } from \"@foxglove/studio-base/util/layout\";\nimport { getTimestampForMessage } from \"@foxglove/studio-base/util/time\";\n\nimport PlotChart from \"./PlotChart\";\nimport { PlotLegend } from \"./PlotLegend\";\nimport { downloadCSV } from \"./csv\";\nimport { getDatasets } from \"./datasets\";\nimport { DataSet, PlotDataByPath, PlotDataItem } from \"./internalTypes\";\nimport { usePlotPanelSettings } from \"./settings\";\nimport { PlotConfig } from \"./types\";\n\nexport { plotableRosTypes } from \"./types\";\nexport type { PlotConfig, PlotXAxisVal } from \"./types\";\n\nconst defaultSidebarDimension = 240;\n\nexport function openSiblingPlotPanel(openSiblingPanel: OpenSiblingPanel, topicName: string): void {\n  openSiblingPanel({\n    panelType: \"Plot\",\n    updateIfExists: true,\n    siblingConfigCreator: (config: PanelConfig) => ({\n      ...config,\n      paths: uniq(\n        (config as PlotConfig).paths\n          .concat([{ value: topicName, enabled: true, timestampMethod: \"receiveTime\" }])\n          .filter(({ value }) => value),\n      ),\n    }),\n  });\n}\n\ntype Props = {\n  config: PlotConfig;\n  saveConfig: SaveConfig<PlotConfig>;\n};\n\n// messagePathItems contains the whole parsed message, and we don't need to cache all of that.\n// Instead, throw away everything but what we need (the timestamps).\nconst getPlotDataByPath = (itemsByPath: MessageDataItemsByPath): PlotDataByPath => {\n  const ret: PlotDataByPath = {};\n  Object.entries(itemsByPath).forEach(([path, items]) => {\n    ret[path] = [\n      items.map((messageAndData) => {\n        const headerStamp = getTimestampForMessage(messageAndData.messageEvent.message);\n        return {\n          queriedData: messageAndData.queriedData,\n          receiveTime: messageAndData.messageEvent.receiveTime,\n          headerStamp,\n        };\n      }),\n    ];\n  });\n  return ret;\n};\n\nconst getMessagePathItemsForBlock = memoizeWeak(\n  (\n    decodeMessagePathsForMessagesByTopic: (_: MessageBlock) => MessageDataItemsByPath,\n    block: MessageBlock,\n  ): PlotDataByPath => {\n    return Object.freeze(getPlotDataByPath(decodeMessagePathsForMessagesByTopic(block)));\n  },\n);\n\nconst ZERO_TIME = { sec: 0, nsec: 0 };\n\nconst performance = window.performance;\n\n/**\n * Builds a lookup map of a compound x:y:index key to a datum, used to map hovered positions\n * on screen to a data point for tooltip display.\n */\nfunction buildTooltipLookupMap(datasets: DataSet[]): Map<string, TimeBasedChartTooltipData> {\n  const lookup = new Map<string, TimeBasedChartTooltipData>();\n  for (const [index, dataset] of datasets.entries()) {\n    for (const datum of dataset.data) {\n      lookup.set(`${datum.x}:${datum.y}:${index}`, datum);\n    }\n  }\n  return lookup;\n}\n\nfunction getBlockItemsByPath(\n  decodeMessagePathsForMessagesByTopic: (_: MessageBlock) => MessageDataItemsByPath,\n  blocks: readonly MessageBlock[],\n) {\n  const ret: Record<string, PlotDataItem[][]> = {};\n  const lastBlockIndexForPath: Record<string, number> = {};\n  let count = 0;\n  let i = 0;\n  for (const block of blocks) {\n    const messagePathItemsForBlock: PlotDataByPath = getMessagePathItemsForBlock(\n      decodeMessagePathsForMessagesByTopic,\n      block,\n    );\n\n    // After 1 million data points we check if there is more memory to continue loading more\n    // data points. This helps prevent runaway memory use if the user tried to plot a binary topic.\n    //\n    // An example would be to try plotting `/map.data[:]` where map is an occupancy grid\n    // this can easily result in many millions of points.\n    if (count >= 1_000_000) {\n      // if we have memory stats we can let the user have more points as long as memory is not under pressure\n      if (performance.memory) {\n        const pct = performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit;\n        if (isNaN(pct) || pct > 0.6) {\n          return ret;\n        }\n      } else {\n        return ret;\n      }\n    }\n\n    for (const [path, messagePathItems] of Object.entries(messagePathItemsForBlock)) {\n      count += messagePathItems[0]?.[0]?.queriedData.length ?? 0;\n\n      const existingItems = ret[path] ?? [];\n      // getMessagePathItemsForBlock returns an array of exactly one range of items.\n      const [pathItems] = messagePathItems;\n      if (lastBlockIndexForPath[path] === i - 1) {\n        // If we are continuing directly from the previous block index (i - 1) then add to the\n        // existing range, otherwise start a new range\n        const currentRange = existingItems[existingItems.length - 1];\n        if (currentRange && pathItems) {\n          for (const item of pathItems) {\n            currentRange.push(item);\n          }\n        }\n      } else {\n        if (pathItems) {\n          // Start a new contiguous range. Make a copy so we can extend it.\n          existingItems.push(pathItems.slice());\n        }\n      }\n      ret[path] = existingItems;\n      lastBlockIndexForPath[path] = i;\n    }\n\n    i += 1;\n  }\n  return ret;\n}\n\nfunction selectStartTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.startTime;\n}\n\nfunction selectCurrentTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.currentTime;\n}\n\nfunction selectEndTime(ctx: MessagePipelineContext) {\n  return ctx.playerState.activeData?.endTime;\n}\n\nfunction Plot(props: Props) {\n  const { saveConfig, config } = props;\n  const {\n    title: legacyTitle,\n    followingViewWidth,\n    paths: yAxisPaths,\n    minXValue,\n    maxXValue,\n    minYValue,\n    maxYValue,\n    showXAxisLabels,\n    showYAxisLabels,\n    showLegend,\n    legendDisplay = config.showSidebar === true ? \"left\" : \"floating\",\n    showPlotValuesInLegend,\n    isSynced,\n    xAxisVal,\n    xAxisPath,\n    sidebarDimension = config.sidebarWidth ?? defaultSidebarDimension,\n    [PANEL_TITLE_CONFIG_KEY]: customTitle,\n  } = config;\n\n  useEffect(() => {\n    if (legacyTitle && (customTitle == undefined || customTitle === \"\")) {\n      // Migrate legacy Plot-specific title setting to new global title setting\n      // https://github.com/foxglove/studio/pull/5225\n      saveConfig({\n        title: undefined,\n        [PANEL_TITLE_CONFIG_KEY]: legacyTitle,\n      } as Partial<PlotConfig>);\n    }\n  }, [customTitle, legacyTitle, saveConfig]);\n\n  const theme = useTheme();\n\n  useEffect(() => {\n    if (yAxisPaths.length === 0) {\n      saveConfig({ paths: [{ value: \"\", enabled: true, timestampMethod: \"receiveTime\" }] });\n    }\n  }, [saveConfig, yAxisPaths.length]);\n\n  const showSingleCurrentMessage = xAxisVal === \"currentCustom\" || xAxisVal === \"index\";\n\n  const startTime = useMessagePipeline(selectStartTime);\n  const currentTime = useMessagePipeline(selectCurrentTime);\n  const endTime = useMessagePipeline(selectEndTime);\n\n  // Min/max x-values and playback position indicator are only used for preloaded plots. In non-\n  // preloaded plots min x-value is always the last seek time, and the max x-value is the current\n  // playback time.\n  const timeSincePreloadedStart = (time?: Time): number | undefined => {\n    if (xAxisVal === \"timestamp\" && time && startTime) {\n      return toSec(subtractTimes(time, startTime));\n    }\n    return undefined;\n  };\n\n  const currentTimeSinceStart = timeSincePreloadedStart(currentTime);\n\n  const followingView = useMemo<ChartDefaultView | undefined>(() => {\n    if (followingViewWidth != undefined && +followingViewWidth > 0) {\n      return { type: \"following\", width: +followingViewWidth };\n    }\n    return undefined;\n  }, [followingViewWidth]);\n\n  const endTimeSinceStart = timeSincePreloadedStart(endTime);\n  const fixedView = useMemo<ChartDefaultView | undefined>(() => {\n    // Apply min/max x-value if either min or max or both is defined.\n    if ((isNumber(minXValue) && isNumber(endTimeSinceStart)) || isNumber(maxXValue)) {\n      return {\n        type: \"fixed\",\n        minXValue: isNumber(minXValue) ? minXValue : 0,\n        maxXValue: isNumber(maxXValue) ? maxXValue : endTimeSinceStart ?? 0,\n      };\n    }\n    if (xAxisVal === \"timestamp\" && startTime && endTimeSinceStart != undefined) {\n      return { type: \"fixed\", minXValue: 0, maxXValue: endTimeSinceStart };\n    }\n    return undefined;\n  }, [maxXValue, minXValue, endTimeSinceStart, startTime, xAxisVal]);\n\n  // following view and fixed view are split to keep defaultView identity stable when possible\n  const defaultView = useMemo<ChartDefaultView | undefined>(() => {\n    if (followingView) {\n      return followingView;\n    } else if (fixedView) {\n      return fixedView;\n    }\n    return undefined;\n  }, [fixedView, followingView]);\n\n  const allPaths = useMemo(() => {\n    return yAxisPaths.map(({ value }) => value).concat(compact([xAxisPath?.value]));\n  }, [xAxisPath?.value, yAxisPaths]);\n\n  const subscribeTopics = useMemo(() => getTopicsFromPaths(allPaths), [allPaths]);\n\n  const cachedGetMessagePathDataItems = useCachedGetMessagePathDataItems(allPaths);\n  const decodeMessagePathsForMessagesByTopic = useDecodeMessagePathsForMessagesByTopic(allPaths);\n\n  // When iterating message events, we need a reverse lookup from topic to the paths that requested\n  // the topic.\n  const topicToPaths = useMemo<Map<string, string[]>>(() => {\n    const out = new Map<string, string[]>();\n    for (const path of allPaths) {\n      const rosPath = parseRosPath(path);\n      if (!rosPath) {\n        continue;\n      }\n      const existing = out.get(rosPath.topicName) ?? [];\n      existing.push(path);\n      out.set(rosPath.topicName, existing);\n    }\n    return out;\n  }, [allPaths]);\n\n  const blocks = useBlocksByTopic(subscribeTopics);\n\n  // This memoization isn't quite ideal: getDatasets is a bit expensive with lots of preloaded data,\n  // and when we preload a new block we re-generate the datasets for the whole timeline. We could\n  // try to use block memoization here.\n  const plotDataForBlocks = useMemo(() => {\n    if (showSingleCurrentMessage) {\n      return {};\n    }\n    return getBlockItemsByPath(decodeMessagePathsForMessagesByTopic, blocks);\n  }, [blocks, decodeMessagePathsForMessagesByTopic, showSingleCurrentMessage]);\n\n  // When restoring, keep only the paths that are present in allPaths.\n  // Without this, the reducer value will grow unbounded with new paths as users add/remove series.\n  const restore = useCallback(\n    (previous?: PlotDataByPath): PlotDataByPath => {\n      if (!previous) {\n        return {};\n      }\n\n      const updated: PlotDataByPath = {};\n      for (const path of allPaths) {\n        const plotData = previous[path];\n        if (plotData) {\n          updated[path] = plotData;\n        }\n      }\n\n      return updated;\n    },\n    [allPaths],\n  );\n\n  // The addMessages function below is passed to useMessageReducer to handle new messages during\n  // playback. If we have messages for a specific path in _blocks_ then we ignore the messages in\n  // the reducer.\n  //\n  // To keep the addMessages function \"stable\" when loading new blocks we grab only the paths from\n  // the blocks and make addMessages depend on the paths. To keep paths referentially stable when\n  // the paths values haven't changed we use a shallow memo.\n  const blockPaths = useMemo(() => Object.keys(plotDataForBlocks), [plotDataForBlocks]);\n  const blockPathsMemo = useShallowMemo(blockPaths);\n\n  const addMessages = useCallback(\n    (accumulated: PlotDataByPath, msgEvents: readonly MessageEvent<unknown>[]) => {\n      const lastEventTime = msgEvents[msgEvents.length - 1]?.receiveTime;\n      const isFollowing = followingView?.type === \"following\";\n\n      // If we don't change any accumulated data, avoid returning a new \"accumulated\" object so\n      // react hooks remain stable.\n      let newAccumulated: PlotDataByPath | undefined;\n\n      for (const msgEvent of msgEvents) {\n        const paths = topicToPaths.get(msgEvent.topic);\n        if (!paths) {\n          continue;\n        }\n\n        for (const path of paths) {\n          // Skip any paths we already service in plotDataForBlocks.\n          // We don't need to accumulate these because the block data takes precedence.\n          if (blockPathsMemo.includes(path)) {\n            continue;\n          }\n\n          const dataItem = cachedGetMessagePathDataItems(path, msgEvent);\n          if (!dataItem) {\n            continue;\n          }\n\n          const headerStamp = getTimestampForMessage(msgEvent.message);\n          const plotDataItem = {\n            queriedData: dataItem,\n            receiveTime: msgEvent.receiveTime,\n            headerStamp,\n          };\n\n          if (!newAccumulated) {\n            newAccumulated = { ...accumulated };\n          }\n\n          if (showSingleCurrentMessage) {\n            newAccumulated[path] = [[plotDataItem]];\n          } else {\n            const plotDataPath = newAccumulated[path]?.slice() ?? [[]];\n            // PlotDataPaths have 2d arrays of items to accommodate blocks which may have gaps so\n            // each continuous set of blocks forms one continuous line. For streaming messages we\n            // treat this as one continuous set of items and always add to the first \"range\"\n            const plotDataItems = plotDataPath[0]!;\n\n            // If we are using the _following_ view mode, truncate away any items older than the view window.\n            if (lastEventTime && isFollowing) {\n              const minStamp = toSec(lastEventTime) - followingView.width;\n              const newItems = filterMap(plotDataItems, (item) => {\n                if (toSec(item.receiveTime) < minStamp) {\n                  return undefined;\n                }\n                return item;\n              });\n              newItems.push(plotDataItem);\n              plotDataPath[0] = newItems;\n            } else {\n              plotDataPath[0] = plotDataItems.concat(plotDataItem);\n            }\n\n            newAccumulated[path] = plotDataPath;\n          }\n        }\n      }\n\n      return newAccumulated ?? accumulated;\n    },\n    [\n      blockPathsMemo,\n      cachedGetMessagePathDataItems,\n      followingView,\n      showSingleCurrentMessage,\n      topicToPaths,\n    ],\n  );\n\n  // The extra useShallowMemo is useful when seeking. Without it, the reduced value will be reset,\n  // and trigger the plot to re-render even if the old value and new value were both empty ({})\n  // which happens for fully pre-loaded data coming from blocks.\n  const plotDataByPath = useShallowMemo(\n    useMessageReducer<PlotDataByPath>({\n      topics: subscribeTopics,\n      preloadType: \"full\",\n      restore,\n      addMessages,\n    }),\n  );\n\n  // Keep disabled paths when passing into getDatasets, because we still want\n  // easy access to the history when turning the disabled paths back on.\n  const { datasets, pathsWithMismatchedDataLengths } = useMemo(() => {\n    const allPlotData = { ...plotDataByPath, ...plotDataForBlocks };\n\n    return getDatasets({\n      paths: yAxisPaths,\n      itemsByPath: allPlotData,\n      startTime: startTime ?? ZERO_TIME,\n      xAxisVal,\n      xAxisPath,\n      invertedTheme: theme.palette.mode === \"dark\",\n    });\n  }, [plotDataByPath, plotDataForBlocks, yAxisPaths, startTime, xAxisVal, xAxisPath, theme]);\n\n  const tooltips = useMemo(() => {\n    if (showLegend && showPlotValuesInLegend) {\n      return new Map();\n    }\n    return buildTooltipLookupMap(datasets);\n  }, [datasets, showLegend, showPlotValuesInLegend]);\n\n  const messagePipeline = useMessagePipelineGetter();\n  const onClick = useCallback<NonNullable<ComponentProps<typeof PlotChart>[\"onClick\"]>>(\n    ({ x: seekSeconds }: OnChartClickArgs) => {\n      const {\n        seekPlayback,\n        playerState: { activeData: { startTime: start } = {} },\n      } = messagePipeline();\n      if (!seekPlayback || !start || seekSeconds == undefined || xAxisVal !== \"timestamp\") {\n        return;\n      }\n      // Avoid normalizing a negative time if the clicked point had x < 0.\n      if (seekSeconds >= 0) {\n        seekPlayback(addTimes(start, fromSec(seekSeconds)));\n      }\n    },\n    [messagePipeline, xAxisVal],\n  );\n\n  const [focusedPath, setFocusedPath] = useState<undefined | string[]>(undefined);\n\n  usePlotPanelSettings(config, saveConfig, focusedPath);\n\n  const stackDirection = useMemo(\n    () => (legendDisplay === \"top\" ? \"column\" : \"row\"),\n    [legendDisplay],\n  );\n\n  return (\n    <Stack\n      flex=\"auto\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      overflow=\"hidden\"\n      position=\"relative\"\n    >\n      <PanelToolbar\n        additionalIcons={\n          <ToolbarIconButton\n            onClick={() => downloadCSV(datasets, xAxisVal)}\n            title=\"Download plot data as CSV\"\n          >\n            <DownloadIcon fontSize=\"small\" />\n          </ToolbarIconButton>\n        }\n      />\n      <Stack\n        direction={stackDirection}\n        flex=\"auto\"\n        fullWidth\n        style={{ height: `calc(100% - ${PANEL_TOOLBAR_MIN_HEIGHT}px)` }}\n      >\n        {legendDisplay !== \"none\" && (\n          <PlotLegend\n            paths={yAxisPaths}\n            datasets={datasets}\n            currentTime={currentTimeSinceStart}\n            onClickPath={(index: number) => setFocusedPath([\"paths\", String(index)])}\n            saveConfig={saveConfig}\n            showLegend={showLegend}\n            pathsWithMismatchedDataLengths={pathsWithMismatchedDataLengths}\n            legendDisplay={legendDisplay}\n            showPlotValuesInLegend={showPlotValuesInLegend}\n            sidebarDimension={sidebarDimension}\n          />\n        )}\n        <Stack flex=\"auto\" alignItems=\"center\" justifyContent=\"center\" overflow=\"hidden\">\n          <PlotChart\n            isSynced={xAxisVal === \"timestamp\" && isSynced}\n            paths={yAxisPaths}\n            minYValue={parseFloat((minYValue ?? \"\").toString())}\n            maxYValue={parseFloat((maxYValue ?? \"\").toString())}\n            showXAxisLabels={showXAxisLabels}\n            showYAxisLabels={showYAxisLabels}\n            datasets={datasets}\n            tooltips={tooltips}\n            xAxisVal={xAxisVal}\n            currentTime={currentTimeSinceStart}\n            onClick={onClick}\n            defaultView={defaultView}\n          />\n        </Stack>\n      </Stack>\n    </Stack>\n  );\n}\n\nconst defaultConfig: PlotConfig = {\n  title: \"Plot\",\n  paths: [{ value: \"\", enabled: true, timestampMethod: \"receiveTime\" }],\n  minYValue: undefined,\n  maxYValue: undefined,\n  showXAxisLabels: true,\n  showYAxisLabels: true,\n  showLegend: true,\n  legendDisplay: \"floating\",\n  showPlotValuesInLegend: false,\n  isSynced: true,\n  xAxisVal: \"timestamp\",\n  sidebarDimension: defaultSidebarDimension,\n};\n\nexport default Panel(\n  Object.assign(Plot, {\n    panelType: \"Plot\",\n    defaultConfig,\n  }),\n);\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport { memoize, range, uniq } from \"lodash\";\nimport tinycolor from \"tinycolor2\";\n\nimport { toolsColorScheme } from \"@foxglove/studio-base/util/toolsColorScheme\";\n\n// Inspired by the \"light\" scheme from https://personal.sron.nl/~pault/#sec:qualitative\n// but using our standard tools colors.\nexport const lineColors = [\n  toolsColorScheme.blue.medium,\n  toolsColorScheme.orange.medium,\n  toolsColorScheme.yellow.medium,\n  toolsColorScheme.green.medium,\n  toolsColorScheme.cyan.medium,\n  toolsColorScheme.purple.medium,\n  toolsColorScheme.paleGreen.medium,\n];\n\nconst colorExpansion = lineColors.map((color) => [\n  color,\n  ...tinycolor(color)\n    .tetrad()\n    .map((acolor) => acolor.toHexString()),\n]);\n\nexport const expandedLineColors = uniq(\n  range(0, colorExpansion[0]!.length)\n    .map((i) => colorExpansion.map((colors) => colors[i]!))\n    .flat(),\n);\n\nexport const lightColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).brighten(15).toString(),\n);\n\nexport const darkColor: (_: string) => string = memoize((color: string): string =>\n  tinycolor(color).darken(30).toString(),\n);\n\nexport function getLineColor(color: string | undefined, index: number): string {\n  return color ?? lineColors[index % lineColors.length]!;\n}\n","// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n//\n// This file incorporates work covered by the following copyright and\n// permission notice:\n//\n//   Copyright 2018-2021 Cruise LLC\n//\n//   This source code is licensed under the Apache License, Version 2.0,\n//   found at http://www.apache.org/licenses/LICENSE-2.0\n//   You may not use this file except in compliance with the License.\n\nimport tinycolor from \"tinycolor2\";\n\nexport const toolsColorScheme = {\n  base: {\n    dark: \"#1F1E27\",\n    medium: \"#8B8B8D\",\n    light: \"#F7F7F3\",\n  },\n  red: {\n    dark: \"#F24366\",\n    medium: \"#ff7c96\",\n    light: \"#FFAABB\",\n  },\n  blue: {\n    dark: \"#1b83ec\",\n    medium: \"#4e98e2\",\n    light: \"#77AADD\",\n  },\n  paleGreen: {\n    dark: \"#B4CC00\",\n    medium: \"#cad660\",\n    light: \"#CDD67E\",\n  },\n  orange: {\n    dark: \"#ea531f\",\n    medium: \"#f5774d\",\n    light: \"#faa487\",\n  },\n  cyan: {\n    dark: \"#22b5ff\",\n    medium: \"#61cbff\",\n    light: \"#99DDFF\",\n  },\n  green: {\n    dark: \"#05d27d\",\n    medium: \"#5cd6a9\",\n    light: \"#8de0c9\",\n  },\n  purple: {\n    dark: \"#6E51EE\",\n    medium: \"#a395e2\",\n    light: \"#c7c0e7\",\n  },\n  yellow: {\n    dark: \"#EDCC28\",\n    medium: \"#f7df71\",\n    light: \"#f1e4aa\",\n  },\n};\n\nexport const grey = tinycolor(`hsv(0, 0%, 75%)`).toHexString();\n"],"names":["useStyles","theme","OverflowMessage","classes","TimeBasedChartTooltipContent","props","colorsByDatasetIndex","content","labelsByDatasetIndex","multiDataset","cx","itemsByPath","out","overflow","item","existing","Stack","idx","value","sortedItems","_","items","path","firstItem","color","label","itemIdx","downsampleTimeseries","dataset","bounds","pixelPerXValue","pixelPerYValue","downsampled","intFirst","intLast","intMin","intMax","xRange","minX","maxX","firstPastBounds","datum","x","y","downsampleScatter","pixelPerRow","sparse","locator","log","selectGlobalBounds","store","selectSetGlobalBounds","TimeBasedChart","requestID","datasetId","type","width","height","data","isSynced","tooltips","yAxes","xAxes","defaultView","currentTime","xAxisIsPlaybackTime","showXAxisLabels","labels","datasets","useTheme","componentId","isMounted","useMountedState","canvasContainer","hasUserPannedOrZoomed","setHasUserPannedOrZoomed","pauseFrame","messagePipeline","resumeFrame","requestedResumeFrame","onStartRender","onFinishRender","current","globalBounds","setGlobalBounds","syncedGlobalBounds","linesToHide","currentScalesRef","datasetBounds","xMin","xMax","yMin","yMax","invalidateDownsample","setDownsampleFlush","queueDownsampleInvalidate","onResetZoom","hasVerticalExclusiveZoom","setHasVerticalExclusiveZoom","hasBothAxesZoom","setHasBothAxesZoom","zoomMode","keyDownHandlers","keyUphandlers","mouseYRef","activeTooltip","setActiveTooltip","updateTooltip","elements","tooltipItems","element","key","foundTooltip","canvasRect","setHoverValue","clearHoverValue","clearGlobalHoverTime","onMouseOut","onMouseMove","event","xScale","canvasContainerRect","mouseX","pixels","xVal","plugins","min","max","defaultXTicksSettings","yScale","defaultYTicksSettings","minY","maxY","datasetBoundsRef","downsampleDatasets","fullDatasets","currentScales","dataBounds","undefinedToNanData","visibleDatasets","throttledDownsample","useThrottle","downsampledDatasets","downsampledData","options","onHover","onScalesUpdate","scales","userInteraction","old","scalesX","newMin","newMax","index","datasetsLength","tooltipContent","showReset","chartProps","Tooltip","Fade","HoverBar","VerticalBarWrapper","Chart","Button","KeyListener","isReferenceLinePlotPathType","getAnnotationFromReferenceLine","borderColor","getAnnotations","paths","PlotChart","showYAxisLabels","minYValue","maxYValue","onClick","xAxisVal","annotations","sizeRef","presence","plotPathDisplayName","plotableRosTypes","ROW_HEIGHT","_params","PlotLegendRow","hasMismatchedDataLength","onClickPath","savePaths","showPlotValuesInLegend","openPanelSettings","panelId","setSelectedPanelIds","correspondingData","hoverComponentId","hoverValue","currentValue","timeToCompare","pt","Checkbox","newPaths","newPath","Typography","minLegendWidth","maxLegendWidth","palette","shadows","shape","spacing","tinycolor","PlotLegend","legendDisplay","pathsWithMismatchedDataLengths","saveConfig","showLegend","sidebarDimension","dragStart","toggleLegend","legendIcon","handlePointerMove","delta","newDimension","handlePointerDown","handlePointerUp","IconButton","getCSVRow","receiveTime","headerStamp","receiveTimeFloat","stampTime","getCVSColName","generateCSV","headLine","combinedLines","downloadCSV","csvData","blob","download","derivative","newDatums","i","prevItem","secondsDifference","mathFunctions","degrees","radians","applyToDatum","func","numericYValue","isCustomScale","getXForPoint","timestamp","innerIdx","xAxisRanges","xItem","xAxisPath","getDatumsForMessagePathItem","yItem","startTime","timestampMethod","elapsedTime","entry","queriedPath","constantName","valueNum","hasMismatchedData","getDatasetsFromMessagePlotPath","yAxisRanges","invertedTheme","showLine","range","rangeIndex","plotData","maybeMathFn","funcName","rangeIdx","rangeData","outerIdx","datums","itemHasMistmatchedData","a","b","getDatasets","yRanges","xRanges","res","makeSeriesNode","t","makeRootSeriesNode","children","buildSettingsTree","config","maxYError","maxXError","usePlotPanelSettings","focusedPath","updatePanelSettingsTree","actionHandler","action","draft","defaultSidebarDimension","openSiblingPlotPanel","openSiblingPanel","topicName","getPlotDataByPath","ret","messageAndData","getMessagePathItemsForBlock","decodeMessagePathsForMessagesByTopic","block","ZERO_TIME","performance","buildTooltipLookupMap","lookup","getBlockItemsByPath","blocks","lastBlockIndexForPath","count","messagePathItemsForBlock","pct","messagePathItems","existingItems","pathItems","currentRange","selectStartTime","ctx","selectCurrentTime","selectEndTime","Plot","legacyTitle","followingViewWidth","yAxisPaths","minXValue","maxXValue","customTitle","showSingleCurrentMessage","endTime","timeSincePreloadedStart","time","currentTimeSinceStart","followingView","endTimeSinceStart","fixedView","allPaths","subscribeTopics","cachedGetMessagePathDataItems","useCachedGetMessagePathDataItems","topicToPaths","rosPath","parseRosPath","plotDataForBlocks","restore","previous","updated","blockPaths","blockPathsMemo","addMessages","accumulated","msgEvents","lastEventTime","isFollowing","newAccumulated","msgEvent","dataItem","plotDataItem","plotDataPath","plotDataItems","minStamp","newItems","plotDataByPath","allPlotData","seekSeconds","seekPlayback","start","setFocusedPath","stackDirection","PanelToolbar","ToolbarIconButton","Download","defaultConfig","Panel","lineColors","colorExpansion","acolor","expandedLineColors","colors","lightColor","darkColor","getLineColor","toolsColorScheme","grey"],"sourceRoot":""}